<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="benchmark__common_8hh" kind="file" language="C++">
    <compoundname>benchmark_common.hh</compoundname>
    <includes local="no">signal.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">chrono</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includedby refid="clean__shared__memory_8cpp" local="yes">benchmarks/clean_shared_memory.cpp</includedby>
    <includedby refid="stress__get__api_8cpp" local="no">benchmarks/stress_get_api.cpp</includedby>
    <includedby refid="stress__get__raw__boost__efficient_8cpp" local="yes">benchmarks/stress_get_raw_boost_efficient.cpp</includedby>
    <includedby refid="stress__get__raw__boost__inefficient_8cpp" local="yes">benchmarks/stress_get_raw_boost_inefficient.cpp</includedby>
    <includedby refid="stress__set__api_8cpp" local="yes">benchmarks/stress_set_api.cpp</includedby>
    <includedby refid="stress__set__raw__boost__efficient_8cpp" local="yes">benchmarks/stress_set_raw_boost_efficient.cpp</includedby>
    <includedby refid="stress__set__raw__boost__inefficient_8cpp" local="yes">benchmarks/stress_set_raw_boost_inefficient.cpp</includedby>
    <incdepgraph>
      <node id="1481">
        <label>cmath</label>
      </node>
      <node id="1479">
        <label>unistd.h</label>
      </node>
      <node id="1483">
        <label>vector</label>
      </node>
      <node id="1478">
        <label>signal.h</label>
      </node>
      <node id="1482">
        <label>iostream</label>
      </node>
      <node id="1480">
        <label>chrono</label>
      </node>
      <node id="1477">
        <label>include/shared_memory/benchmarks/benchmark_common.hh</label>
        <link refid="benchmark_common.hh"/>
        <childnode refid="1478" relation="include">
        </childnode>
        <childnode refid="1479" relation="include">
        </childnode>
        <childnode refid="1480" relation="include">
        </childnode>
        <childnode refid="1481" relation="include">
        </childnode>
        <childnode refid="1482" relation="include">
        </childnode>
        <childnode refid="1483" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1487">
        <label>benchmarks/stress_get_raw_boost_efficient.cpp</label>
        <link refid="stress__get__raw__boost__efficient_8cpp"/>
      </node>
      <node id="1490">
        <label>benchmarks/stress_set_raw_boost_efficient.cpp</label>
        <link refid="stress__set__raw__boost__efficient_8cpp"/>
      </node>
      <node id="1489">
        <label>benchmarks/stress_set_api.cpp</label>
        <link refid="stress__set__api_8cpp"/>
      </node>
      <node id="1491">
        <label>benchmarks/stress_set_raw_boost_inefficient.cpp</label>
        <link refid="stress__set__raw__boost__inefficient_8cpp"/>
      </node>
      <node id="1485">
        <label>benchmarks/clean_shared_memory.cpp</label>
        <link refid="clean__shared__memory_8cpp"/>
      </node>
      <node id="1486">
        <label>benchmarks/stress_get_api.cpp</label>
        <link refid="stress__get__api_8cpp"/>
      </node>
      <node id="1488">
        <label>benchmarks/stress_get_raw_boost_inefficient.cpp</label>
        <link refid="stress__get__raw__boost__inefficient_8cpp"/>
      </node>
      <node id="1484">
        <label>include/shared_memory/benchmarks/benchmark_common.hh</label>
        <link refid="benchmark_common.hh"/>
        <childnode refid="1485" relation="include">
        </childnode>
        <childnode refid="1486" relation="include">
        </childnode>
        <childnode refid="1487" relation="include">
        </childnode>
        <childnode refid="1488" relation="include">
        </childnode>
        <childnode refid="1489" relation="include">
        </childnode>
        <childnode refid="1490" relation="include">
        </childnode>
        <childnode refid="1491" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structMeasureTime" prot="public">MeasureTime</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="benchmark__common_8hh_1a21a16aec41293c80beb10d71f79ad7a2" prot="public" static="no">
        <name>SHARED_MEMORY_SIZE</name>
        <initializer>65536</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="21" column="9" bodyfile="include/shared_memory/benchmarks/benchmark_common.hh" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="benchmark__common_8hh_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="22" column="9" bodyfile="include/shared_memory/benchmarks/benchmark_common.hh" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="benchmark__common_8hh_1adf00b55c2043a89ad0ac69b3a2428281" prot="public" static="no">
        <name>NUMBER_OR_MEASURED_ITERATIONS</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="23" column="9" bodyfile="include/shared_memory/benchmarks/benchmark_common.hh" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="benchmark__common_8hh_1adc5fa90d9af8c15b5dc4c72697821c36" prot="public" static="no">
        <name>MAX_NUNMBER_OF_ITERATION</name>
        <initializer>10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="24" column="9" bodyfile="include/shared_memory/benchmarks/benchmark_common.hh" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="benchmark__common_8hh_1ac3379ce076aff9d7667b3fc267a87f48" prot="public" static="no">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>typedef std::chrono::high_resolution_clock::time_point TimeType</definition>
        <argsstring></argsstring>
        <name>TimeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="26" column="1" bodyfile="include/shared_memory/benchmarks/benchmark_common.hh" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="benchmark__common_8hh_1a383e703fc3e9dd425f075cf463ee4c5b" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool RUNNING</definition>
        <argsstring></argsstring>
        <name>RUNNING</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="29" column="1" bodyfile="include/shared_memory/benchmarks/benchmark_common.hh" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="benchmark__common_8hh_1a59c33a6b3ce646e26614a12d0193a2bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>static std::vector&lt;double&gt; DATA</definition>
        <argsstring>(SIZE, 2)</argsstring>
        <name>DATA</name>
        <param>
          <type>SIZE</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a2eab504a26ce27f25dc75a77486f0291" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string SHM_NAME</definition>
        <argsstring>(&quot;stress_test&quot;)</argsstring>
        <name>SHM_NAME</name>
        <param>
          <type>&quot;stress_test&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a7b0c439ad35b06a4ef0180f55a6d005a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string SHM_OBJECT_NAME</definition>
        <argsstring>(&quot;stress_object&quot;)</argsstring>
        <name>SHM_OBJECT_NAME</name>
        <param>
          <type>&quot;stress_object&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a8dd0271b9a992c4b761972f7082052a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MeasureTime &amp;time)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structMeasureTime" kindref="compound">MeasureTime</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="62" column="1" bodyfile="include/shared_memory/benchmarks/benchmark_common.hh" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1aa10d0d36e9613185c60cd04e376e12bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_benchmark</definition>
        <argsstring>()</argsstring>
        <name>init_benchmark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a91d65608f8757f45d8db7c6e58dfe9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void code_to_benchamrk</definition>
        <argsstring>()</argsstring>
        <name>code_to_benchamrk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a3ae3ecd5464dfa055c802feb243e62d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void end_benchmark</definition>
        <argsstring>()</argsstring>
        <name>end_benchmark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/benchmarks/benchmark_common.hh" line="73" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Common tools for benchmarking. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz </para></simplesect>
<xrefsect id="license_1_license000018"><xreftitle>License</xreftitle><xrefdescription><para>License BSD-3-Clause </para></xrefdescription></xrefsect><simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#ifndef<sp/>BENCHMARK_COMMON_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BENCHMARK_COMMON_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHARED_MEMORY_SIZE<sp/>65536</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZE<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMBER_OR_MEASURED_ITERATIONS<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_NUNMBER_OF_ITERATION<sp/>10000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::chrono::high_resolution_clock::time_point<sp/>TimeType;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>DATA(SIZE,<sp/>2);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RUNNING;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>SHM_NAME(</highlight><highlight class="stringliteral">&quot;stress_test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>SHM_OBJECT_NAME(</highlight><highlight class="stringliteral">&quot;stress_object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structMeasureTime" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMeasureTime" kindref="compound">MeasureTime</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMeasureTime" kindref="compound">MeasureTime</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start()</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tic_<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update()</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nanos<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tic_<sp/>-<sp/>prev_tic_)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequency_<sp/>=<sp/>1000.0<sp/>/<sp/>(pow(10.0,<sp/>-9.0)<sp/>*<sp/>nanos);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_<sp/>=<sp/>1.0<sp/>/<sp/>frequency_;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_tic_<sp/>=<sp/>tic_;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tic_<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMeasureTime" kindref="compound">MeasureTime</ref>&amp;<sp/>dt);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeType<sp/>tic_;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeType<sp/>prev_tic_;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frequency_;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>period_;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMeasureTime" kindref="compound">MeasureTime</ref>&amp;<sp/>time)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Frequency<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time.frequency_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Period<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time.period_;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_benchmark();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>code_to_benchamrk();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end_benchmark();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>BENCHMARK_COMMON_HH</highlight></codeline>
    </programlisting>
    <location file="include/shared_memory/benchmarks/benchmark_common.hh"/>
  </compounddef>
</doxygen>
