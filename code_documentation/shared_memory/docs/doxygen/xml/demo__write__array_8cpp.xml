<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="demo__write__array_8cpp" kind="file" language="C++">
    <compoundname>demo_write_array.cpp</compoundname>
    <includes local="no">signal.h</includes>
    <includes local="no">unistd.h</includes>
    <includes refid="array_8hpp" local="yes">shared_memory/array.hpp</includes>
    <includes refid="item_8hpp" local="yes">shared_memory/demos/item.hpp</includes>
    <incdepgraph>
      <node id="1055">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="1061">
        <label>array_fundamental_array.hxx</label>
        <link refid="array__fundamental__array_8hxx_source"/>
      </node>
      <node id="1027">
        <label>demos/demo_write_array.cpp</label>
        <link refid="demo_write_array.cpp"/>
        <childnode refid="1028" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1063" relation="include">
        </childnode>
      </node>
      <node id="1051">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="1050">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="1051" relation="include">
        </childnode>
        <childnode refid="1052" relation="include">
        </childnode>
        <childnode refid="1053" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1054" relation="include">
        </childnode>
        <childnode refid="1055" relation="include">
        </childnode>
      </node>
      <node id="1062">
        <label>array_serializable.hxx</label>
        <link refid="array__serializable_8hxx_source"/>
      </node>
      <node id="1056">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="1034" relation="include">
        </childnode>
      </node>
      <node id="1031">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1033" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
      </node>
      <node id="1043">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="1038">
        <label>string</label>
      </node>
      <node id="1034">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
        <childnode refid="1042" relation="include">
        </childnode>
        <childnode refid="1043" relation="include">
        </childnode>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1046" relation="include">
        </childnode>
        <childnode refid="1049" relation="include">
        </childnode>
        <childnode refid="1050" relation="include">
        </childnode>
        <childnode refid="1056" relation="include">
        </childnode>
      </node>
      <node id="1036">
        <label>map</label>
      </node>
      <node id="1047">
        <label>exception</label>
      </node>
      <node id="1049">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp_source"/>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1044">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="1032">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="1029">
        <label>unistd.h</label>
      </node>
      <node id="1039">
        <label>vector</label>
      </node>
      <node id="1028">
        <label>signal.h</label>
      </node>
      <node id="1042">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="1054">
        <label>utility</label>
      </node>
      <node id="1064">
        <label>array</label>
      </node>
      <node id="1048">
        <label>sstream</label>
      </node>
      <node id="1041">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="1035">
        <label>iostream</label>
      </node>
      <node id="1030">
        <label>shared_memory/array.hpp</label>
        <link refid="array_8hpp_source"/>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1050" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1057" relation="include">
        </childnode>
        <childnode refid="1058" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1060" relation="include">
        </childnode>
        <childnode refid="1061" relation="include">
        </childnode>
        <childnode refid="1062" relation="include">
        </childnode>
      </node>
      <node id="1037">
        <label>mutex</label>
      </node>
      <node id="1040">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="1063">
        <label>shared_memory/demos/item.hpp</label>
        <link refid="item_8hpp_source"/>
        <childnode refid="1064" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1060">
        <label>array_fundamental.hxx</label>
        <link refid="array__fundamental_8hxx_source"/>
      </node>
      <node id="1057">
        <label>shared_memory/internal/array_members.hpp</label>
        <link refid="array__members_8hpp_source"/>
      </node>
      <node id="1059">
        <label>array.hxx</label>
        <link refid="array_8hxx_source"/>
      </node>
      <node id="1052">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="1045">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="1058">
        <label>cstring</label>
      </node>
      <node id="1053">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="1033">
        <label>memory</label>
      </node>
      <node id="1046">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="demo__write__array_8cpp_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_write_array.cpp" line="18" column="9" bodyfile="demos/demo_write_array.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="demo__write__array_8cpp_1a715f5eb54a3e370e08f6eacb579cb462" prot="public" static="no">
        <name>SEGMENT_SERIALIZED</name>
        <initializer>&quot;demo_array_serialized&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_write_array.cpp" line="19" column="9" bodyfile="demos/demo_write_array.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="demo__write__array_8cpp_1a56db1002f1652200987b0a138c59516b" prot="public" static="no">
        <name>SEGMENT_FUNDAMENTAL</name>
        <initializer>&quot;demo_array_fundamental&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_write_array.cpp" line="20" column="9" bodyfile="demos/demo_write_array.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="demo__write__array_8cpp_1ac053d74fd470967d07823e1e5aa3137a" prot="public" static="no">
        <name>SEGMENT_FUNDAMENTAL_ARRAY</name>
        <initializer>&quot;demo_array_fundamental_array&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_write_array.cpp" line="21" column="9" bodyfile="demos/demo_write_array.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="demo__write__array_8cpp_1a383e703fc3e9dd425f075cf463ee4c5b" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool RUNNING</definition>
        <argsstring></argsstring>
        <name>RUNNING</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_write_array.cpp" line="23" column="1" bodyfile="demos/demo_write_array.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__write__array_8cpp_1aba399b0a6a6e3bd37af95bd04e8def6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stop</definition>
        <argsstring>(int)</argsstring>
        <name>stop</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_write_array.cpp" line="25" column="1" bodyfile="demos/demo_write_array.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="demo__write__array_8cpp_1a13a43e6d814de94978c515cb084873b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para>create interprocesses arrays and write into them. </para>        </briefdescription>
        <detaileddescription>
<para>Run demo_read_array for a process reading these arrays </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_write_array.cpp" line="34" column="1" bodyfile="demos/demo_write_array.cpp" bodystart="34" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="demo__write__array_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_write_array.cpp" line="103" column="1" bodyfile="demos/demo_write_array.cpp" bodystart="103" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>example of writing into interprocesses arrays </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz license License BSD-3-Clause </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellshaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/array.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/demos/item.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEGMENT_SERIALIZED<sp/>&quot;demo_array_serialized&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEGMENT_FUNDAMENTAL<sp/>&quot;demo_array_fundamental&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEGMENT_FUNDAMENTAL_ARRAY<sp/>&quot;demo_array_fundamental_array&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RUNNING<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>RUNNING<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__write__array_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run</ref>()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>a<sp/>previous<sp/>run<sp/>did<sp/>not<sp/>exit<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshared__memory_1a0371eb6089f446098adf2f9c106333dc" kindref="member">shared_memory::clear_array</ref>(SEGMENT_SERIALIZED);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshared__memory_1a0371eb6089f446098adf2f9c106333dc" kindref="member">shared_memory::clear_array</ref>(SEGMENT_FUNDAMENTAL);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshared__memory_1a0371eb6089f446098adf2f9c106333dc" kindref="member">shared_memory::clear_array</ref>(SEGMENT_FUNDAMENTAL_ARRAY);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>safe<sp/>to<sp/>have<sp/>another<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reading/writting<sp/>in<sp/>the<sp/>same<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mutex_protected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>declared<sp/>in<sp/>this<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>wipe<sp/>the<sp/>shared<sp/>memory<sp/>on<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear_on_destruction<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>SIZE<sp/>Item<sp/>(Item<sp/>being<sp/>themselfs<sp/>of<sp/>size<sp/>SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Item<sp/>implements<sp/>a<sp/>serialize<sp/>function,<sp/>and<sp/>instances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>items<sp/>will<sp/>be<sp/>serialized<sp/>into<sp/>a<sp/>string<sp/>before<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>written<sp/>in<sp/>the<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>include/shared_memory/demos/item.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1array" kindref="compound">shared_memory::array&lt;shared_memory::Item&lt;SIZE&gt;</ref><sp/>&gt;<sp/>serialized(</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEGMENT_SERIALIZED,<sp/>SIZE,<sp/>mutex_protected,<sp/>clear_on_destruction);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>SIZE<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1array" kindref="compound">shared_memory::array&lt;int&gt;</ref><sp/>fundamental(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEGMENT_FUNDAMENTAL,<sp/>SIZE,<sp/>mutex_protected,<sp/>clear_on_destruction);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>array<sp/>:<sp/>SIZE<sp/>*<sp/>SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1array" kindref="compound">shared_memory::array&lt;int, SIZE&gt;</ref><sp/>fundamental_array(</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEGMENT_FUNDAMENTAL_ARRAY,<sp/>SIZE,<sp/>mutex_protected,<sp/>clear_on_destruction);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1Item" kindref="compound">shared_memory::Item&lt;SIZE&gt;</ref><sp/>item(0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[SIZE];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(RUNNING)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SIZE;<sp/>i++)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writting<sp/>items<sp/>in<sp/>serialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.fill(0);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.set(i,<sp/>count);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.compact_print();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serialized.set(i,<sp/>item);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writting<sp/>integers<sp/>in<sp/>fundamental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fundamental.set(i,<sp/>count);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writting<sp/>values<sp/>in<sp/>fundamental<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>SIZE;<sp/>j++)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values[i]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fundamental_array.set(i,<sp/>values);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(100000);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>on<sp/>ctrl+c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>cleaning;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>cleaning.sa_handler<sp/>=<sp/>stop;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset(&amp;cleaning.sa_mask);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>cleaning.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>sigaction(SIGINT,<sp/>&amp;cleaning,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="demo__write__array_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run</ref>();</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_write_array.cpp"/>
  </compounddef>
</doxygen>
