<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classshared__memory_1_1Mutex" kind="class" language="C++" prot="public">
    <compoundname>shared_memory::Mutex</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshared__memory_1_1Mutex_1ac8f2675b262549f321f417323cf0702a" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend shared_memory::Mutex::Lock</definition>
        <argsstring></argsstring>
        <name>Lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="45" column="1" bodyfile="include/shared_memory/mutex.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1Mutex_1a2ab98408f60b14b160fae683b1a88977" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string shared_memory::Mutex::mutex_id_</definition>
        <argsstring></argsstring>
        <name>mutex_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="47" column="1" bodyfile="include/shared_memory/mutex.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1Mutex_1afc39f23ad6cfe9db45dd2de177a1ede1" prot="private" static="no" mutable="no">
        <type>SHMMutex</type>
        <definition>SHMMutex shared_memory::Mutex::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="48" column="1" bodyfile="include/shared_memory/mutex.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1Mutex_1a065ff25889e198e37021504fbe5feac8" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::Mutex::clean_memory_on_destruction_</definition>
        <argsstring></argsstring>
        <name>clean_memory_on_destruction_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="49" column="1" bodyfile="include/shared_memory/mutex.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshared__memory_1_1Mutex_1a8f1b1cffa2f3bdfb8cd74cf61b0df650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shared_memory::Mutex::Mutex</definition>
        <argsstring>(std::string mutex_id, bool clean_memory_on_destruction=true)</argsstring>
        <name>Mutex</name>
        <param>
          <type>std::string</type>
          <declname>mutex_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clean_memory_on_destruction</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>A <ref refid="classshared__memory_1_1Mutex" kindref="compound">Mutex</ref> accessible to several processes via the shared memory The mutex is cleaned from the shared memory on destruction if clean_memory_on_destruction is true (the default) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="26" column="1" bodyfile="src/mutex.cpp" bodystart="5" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Mutex_1ac71952734c60b9ecba84f74a12f87075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shared_memory::Mutex::~Mutex</definition>
        <argsstring>()</argsstring>
        <name>~Mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="28" column="1" bodyfile="src/mutex.cpp" bodystart="12" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Mutex_1a6b6ca2e15d379a5e3a8d68d15c04469f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::Mutex::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
<para>lock the mutex </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="33" column="1" bodyfile="src/mutex.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Mutex_1a06b9e214880af7ab9703bd78601ac0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::Mutex::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
<para>unlock the mutex </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="38" column="1" bodyfile="src/mutex.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classshared__memory_1_1Mutex_1a964e89132bb180569edcf52de5b43978" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::Mutex::clean</definition>
        <argsstring>(std::string mutex_id)</argsstring>
        <name>clean</name>
        <param>
          <type>std::string</type>
          <declname>mutex_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/mutex.hpp" line="41" column="1" bodyfile="src/mutex.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/shared_memory/mutex.hpp" line="19" column="1" bodyfile="include/shared_memory/mutex.hpp" bodystart="18" bodyend="50"/>
    <listofallmembers>
      <member refid="classshared__memory_1_1Mutex_1a964e89132bb180569edcf52de5b43978" prot="public" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>clean</name></member>
      <member refid="classshared__memory_1_1Mutex_1a065ff25889e198e37021504fbe5feac8" prot="private" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>clean_memory_on_destruction_</name></member>
      <member refid="classshared__memory_1_1Mutex_1ac8f2675b262549f321f417323cf0702a" prot="private" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>Lock</name></member>
      <member refid="classshared__memory_1_1Mutex_1a6b6ca2e15d379a5e3a8d68d15c04469f" prot="public" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>lock</name></member>
      <member refid="classshared__memory_1_1Mutex_1a8f1b1cffa2f3bdfb8cd74cf61b0df650" prot="public" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>Mutex</name></member>
      <member refid="classshared__memory_1_1Mutex_1afc39f23ad6cfe9db45dd2de177a1ede1" prot="private" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>mutex_</name></member>
      <member refid="classshared__memory_1_1Mutex_1a2ab98408f60b14b160fae683b1a88977" prot="private" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>mutex_id_</name></member>
      <member refid="classshared__memory_1_1Mutex_1a06b9e214880af7ab9703bd78601ac0c6" prot="public" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>unlock</name></member>
      <member refid="classshared__memory_1_1Mutex_1ac71952734c60b9ecba84f74a12f87075" prot="public" virt="non-virtual"><scope>shared_memory::Mutex</scope><name>~Mutex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
