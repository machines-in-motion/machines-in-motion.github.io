<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classshared__memory_1_1array" kind="class" language="C++" prot="public">
    <compoundname>shared_memory::array</compoundname>
    <basecompoundref refid="classshared__memory_1_1internal_1_1array__members" prot="public" virt="non-virtual">shared_memory::internal::array_members&lt; T, SIZE &gt;</basecompoundref>
    <includes refid="array_8hpp" local="no">array.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>int</type>
        <declname>SIZE</declname>
        <defname>SIZE</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshared__memory_1_1array_1a43c56477481ae684932b6a03b64d7b67" prot="private" static="no" mutable="no">
        <type>boost::interprocess::managed_shared_memory</type>
        <definition>boost::interprocess::managed_shared_memory shared_memory::array&lt; T, SIZE &gt;::segment_manager_</definition>
        <argsstring></argsstring>
        <name>segment_manager_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="156" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1array_1a25a07e97c454f8fb122eb092ab29812c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string shared_memory::array&lt; T, SIZE &gt;::segment_id_</definition>
        <argsstring></argsstring>
        <name>segment_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="157" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1array_1a1b47b48a2779e766a80403f47404876a" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t shared_memory::array&lt; T, SIZE &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="158" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1array_1afb6fcb395ac52cb9eaaef2882b623d23" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::array&lt; T, SIZE &gt;::clear_on_destruction_</definition>
        <argsstring></argsstring>
        <name>clear_on_destruction_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="159" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1array_1a7051346ccb28372b2ea5587714113079" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::array&lt; T, SIZE &gt;::multiprocess_safe_</definition>
        <argsstring></argsstring>
        <name>multiprocess_safe_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="161" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1array_1afaf6604cf5e2c380f86679e1515e6674" prot="private" static="no" mutable="no">
        <type><ref refid="classshared__memory_1_1Mutex" kindref="compound">shared_memory::Mutex</ref></type>
        <definition>shared_memory::Mutex shared_memory::array&lt; T, SIZE &gt;::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="163" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classshared__memory_1_1array_1a41258d788855ccc8435efb2017bdd068" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::init</definition>
        <argsstring>(FUNDAMENTAL)</argsstring>
        <name>init</name>
        <param>
          <type>FUNDAMENTAL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="46" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="6" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1ad7fa6301507f10efe97ce3ad40187d9f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::set</definition>
        <argsstring>(uint index, const T &amp;t, FUNDAMENTAL)</argsstring>
        <name>set</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>FUNDAMENTAL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="47" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="16" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1a0a54a689331205da7338f7c5891a6ee5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::get</definition>
        <argsstring>(uint index, T &amp;t, FUNDAMENTAL)</argsstring>
        <name>get</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>FUNDAMENTAL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="48" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="35" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1ac0e57adf8e47afae3f8053c20c3e15f2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::init</definition>
        <argsstring>(FUNDAMENTAL_ARRAY)</argsstring>
        <name>init</name>
        <param>
          <type>FUNDAMENTAL_ARRAY</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="54" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="6" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1a71bbc60da4a88fd51b3124cdb6cd1ae3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::set</definition>
        <argsstring>(uint index, const T &amp;t, FUNDAMENTAL_ARRAY)</argsstring>
        <name>set</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>FUNDAMENTAL_ARRAY</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="55" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="19" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1af12c8f76fc48b3ec1ff2c2c82d104837" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::get</definition>
        <argsstring>(uint index, T &amp;t, FUNDAMENTAL_ARRAY)</argsstring>
        <name>get</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>FUNDAMENTAL_ARRAY</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="56" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="42" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1a487be484bf27d17f8c7547a57ff995f9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::init</definition>
        <argsstring>(SERIALIZABLE)</argsstring>
        <name>init</name>
        <param>
          <type>SERIALIZABLE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="62" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="6" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1a951c9ca373e942f094910bea57953eb0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::set</definition>
        <argsstring>(uint index, const T &amp;t, SERIALIZABLE)</argsstring>
        <name>set</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>SERIALIZABLE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="63" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="18" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1afb0025021b69b790c152c27ef441cd66" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::get</definition>
        <argsstring>(uint index, T &amp;t, SERIALIZABLE)</argsstring>
        <name>get</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>SERIALIZABLE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="64" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="41" bodyend="58"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshared__memory_1_1array_1a95b5abd158cb04ab0644f5aa6df48b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shared_memory::array&lt; T, SIZE &gt;::array</definition>
        <argsstring>(std::string segment_id, std::size_t size, bool clear_on_destruction=true, bool multiprocess_safe=true)</argsstring>
        <name>array</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clear_on_destruction</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>multiprocess_safe</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>should be the same for all array pointing to the same shared memory segment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: number of elements to be stored by the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_on_destruction</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the shared memory segment will be wiped on destruction of the array. Note that any other array pointing to this segment may hang indefinitely as a result. If no arrays pointing to the shared memory segment delete the segment, then users are expected to call <ref refid="namespaceshared__memory_1a0371eb6089f446098adf2f9c106333dc" kindref="member">shared_memory::clear_array</ref>. Failing to do so may result in new array pointing to a new memory segment of the same id to hang indefinitely at construction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiprocess_safe</parametername>
</parameternamelist>
<parameterdescription>
<para>if false, it is strongly adviced to protect accesses via a <ref refid="classshared__memory_1_1Mutex" kindref="compound">shared_memory::Mutex</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="81" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="19" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1a45cad350fdb0170c955c8c367a9e910d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>array::~array</definition>
        <argsstring>()</argsstring>
        <name>~array</name>
        <briefdescription>
<para>wipe the related shared memory segment if clear_on_destruction is true (true by default) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="90" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1acde1531706ba2ab6c05d7639bc0f6f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>array::array</definition>
        <argsstring>(const array&lt; T, SIZE &gt; &amp;other)</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classshared__memory_1_1array" kindref="compound">array</ref>&lt; T, SIZE &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>this array and other array will point to the same memory segment, and will have same values for clear_on_destruction and multiprocess_safe </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="97" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="33" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1af399f2f20d16dadf8381c61ea5ad42fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shared_memory::array&lt; T, SIZE &gt;::array</definition>
        <argsstring>(array&lt; T, SIZE &gt; &amp;&amp;other) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="classshared__memory_1_1array" kindref="compound">array</ref>&lt; T, SIZE &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>This array will point to the share memory segment pointed at by other; and will have same value for multprocess_safe and clear_on_destruction. </para>        </briefdescription>
        <detaileddescription>
<para>Warning: even if other.clear_on_destruction is true, the segment memory will not be wiped on the destruction of other. The duty of deleting the shared memory is passed to the new instance, so to speak </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="108" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="44" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1ad5b4b2841b2785b188a6371cb7f00f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classshared__memory_1_1array" kindref="compound">array</ref>&lt; T, SIZE &gt; &amp;</type>
        <definition>array&lt; T, SIZE &gt; &amp; array::operator=</definition>
        <argsstring>(array&lt; T, SIZE &gt; &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classshared__memory_1_1array" kindref="compound">array</ref>&lt; T, SIZE &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>This array will point to the share memory segment pointed at by other; and will have same value for multprocess_safe and clear_on_destruction. </para>        </briefdescription>
        <detaileddescription>
<para>Warning: even if other.clear_on_destruction is true, the segment memory will not be wiped on the destruction of other. The duty of deleting the shared memory is passed to the new instance, so to speak </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="119" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="57" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1ac413bc76d199bb52a0f95faff7222f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::set</definition>
        <argsstring>(uint index, const T &amp;t)</argsstring>
        <name>set</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>set element t at index </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="124" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1ae581f4ffcf1e543032e0128be5da181d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::set</definition>
        <argsstring>(uint index, const T *t)</argsstring>
        <name>set</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>set element t at index </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="129" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1ae16ed72c9590631e608de8bacf1368ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::get</definition>
        <argsstring>(uint index, T &amp;t)</argsstring>
        <name>get</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>read element at index into t </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="134" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1ad700d5874d92def07f77f4da7f31f980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::get</definition>
        <argsstring>(uint index, T *t)</argsstring>
        <name>get</name>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>read element at index into t </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="139" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1afc0dd0c59873934b082e524adb6bf2d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t array::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>max number of elements in the array </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="144" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1a9e912e143886359921c04fdbba7f6cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array::print</definition>
        <argsstring>()</argsstring>
        <name>print</name>
        <briefdescription>
<para>print in terminal info about array&apos;s memory usage </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="150" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1array_1a20e27fb6b9a18e252368c4f6118b3d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * array::get_raw</definition>
        <argsstring>()</argsstring>
        <name>get_raw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/array.hpp" line="153" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implement a shared array stored on a shared memory segment. </para>    </briefdescription>
    <detaileddescription>
<para>Items hosted by the array may be of (1) fundamental type (e.g. int, double, char), (2) array of fundamental type (e.g. int[10]); or (3) instances of a class implementing a serializable function (see shared_memory::serializer). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="78">
        <label>shared_memory::array&lt; T, SIZE &gt;</label>
        <link refid="classshared__memory_1_1array"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>shared_memory::internal::array_members&lt; T, SIZE &gt;</label>
        <link refid="classshared__memory_1_1internal_1_1array__members"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="80">
        <label>shared_memory::array&lt; T, SIZE &gt;</label>
        <link refid="classshared__memory_1_1array"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>shared_memory::Serializer&lt; T &gt;</label>
        <link refid="classshared__memory_1_1Serializer"/>
      </node>
      <node id="83">
        <label>shared_memory::Mutex</label>
        <link refid="classshared__memory_1_1Mutex"/>
      </node>
      <node id="81">
        <label>shared_memory::internal::array_members&lt; T, SIZE &gt;</label>
        <link refid="classshared__memory_1_1internal_1_1array__members"/>
        <childnode refid="82" relation="usage">
          <edgelabel>serializer_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/shared_memory/array.hpp" line="40" column="1" bodyfile="include/shared_memory/array.hpp" bodystart="39" bodyend="164"/>
    <listofallmembers>
      <member refid="classshared__memory_1_1array_1a95b5abd158cb04ab0644f5aa6df48b2b" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>array</name></member>
      <member refid="classshared__memory_1_1array_1acde1531706ba2ab6c05d7639bc0f6f56" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>array</name></member>
      <member refid="classshared__memory_1_1array_1af399f2f20d16dadf8381c61ea5ad42fd" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>array</name></member>
      <member refid="classshared__memory_1_1array_1afb6fcb395ac52cb9eaaef2882b623d23" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>clear_on_destruction_</name></member>
      <member refid="classshared__memory_1_1array_1a0a54a689331205da7338f7c5891a6ee5" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>get</name></member>
      <member refid="classshared__memory_1_1array_1af12c8f76fc48b3ec1ff2c2c82d104837" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>get</name></member>
      <member refid="classshared__memory_1_1array_1afb0025021b69b790c152c27ef441cd66" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>get</name></member>
      <member refid="classshared__memory_1_1array_1ae16ed72c9590631e608de8bacf1368ba" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>get</name></member>
      <member refid="classshared__memory_1_1array_1ad700d5874d92def07f77f4da7f31f980" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>get</name></member>
      <member refid="classshared__memory_1_1array_1a20e27fb6b9a18e252368c4f6118b3d27" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>get_raw</name></member>
      <member refid="classshared__memory_1_1array_1a41258d788855ccc8435efb2017bdd068" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>init</name></member>
      <member refid="classshared__memory_1_1array_1ac0e57adf8e47afae3f8053c20c3e15f2" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>init</name></member>
      <member refid="classshared__memory_1_1array_1a487be484bf27d17f8c7547a57ff995f9" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>init</name></member>
      <member refid="classshared__memory_1_1internal_1_1array__members_1abd1f5a78fd25466746fcdb172c824007" prot="protected" virt="non-virtual"><scope>shared_memory::array</scope><name>item_size_</name></member>
      <member refid="classshared__memory_1_1array_1a7051346ccb28372b2ea5587714113079" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>multiprocess_safe_</name></member>
      <member refid="classshared__memory_1_1array_1afaf6604cf5e2c380f86679e1515e6674" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>mutex_</name></member>
      <member refid="classshared__memory_1_1array_1ad5b4b2841b2785b188a6371cb7f00f1f" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>operator=</name></member>
      <member refid="classshared__memory_1_1array_1a9e912e143886359921c04fdbba7f6cba" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>print</name></member>
      <member refid="classshared__memory_1_1array_1a25a07e97c454f8fb122eb092ab29812c" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>segment_id_</name></member>
      <member refid="classshared__memory_1_1array_1a43c56477481ae684932b6a03b64d7b67" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>segment_manager_</name></member>
      <member refid="classshared__memory_1_1internal_1_1array__members_1a277e877df362970ef3bc3afdc1c405f8" prot="protected" virt="non-virtual"><scope>shared_memory::array</scope><name>serializer_</name></member>
      <member refid="classshared__memory_1_1array_1ad7fa6301507f10efe97ce3ad40187d9f" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>set</name></member>
      <member refid="classshared__memory_1_1array_1a71bbc60da4a88fd51b3124cdb6cd1ae3" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>set</name></member>
      <member refid="classshared__memory_1_1array_1a951c9ca373e942f094910bea57953eb0" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>set</name></member>
      <member refid="classshared__memory_1_1array_1ac413bc76d199bb52a0f95faff7222f37" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>set</name></member>
      <member refid="classshared__memory_1_1array_1ae581f4ffcf1e543032e0128be5da181d" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>set</name></member>
      <member refid="classshared__memory_1_1internal_1_1array__members_1a43d6cb2ddca3c64b5ddf9179385e0156" prot="protected" virt="non-virtual"><scope>shared_memory::array</scope><name>shared_</name></member>
      <member refid="classshared__memory_1_1array_1afc0dd0c59873934b082e524adb6bf2d7" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>size</name></member>
      <member refid="classshared__memory_1_1array_1a1b47b48a2779e766a80403f47404876a" prot="private" virt="non-virtual"><scope>shared_memory::array</scope><name>size_</name></member>
      <member refid="classshared__memory_1_1internal_1_1array__members_1ac7dc62a93b0836545cd31e824ab89686" prot="protected" virt="non-virtual"><scope>shared_memory::array</scope><name>total_size_</name></member>
      <member refid="classshared__memory_1_1internal_1_1array__members_1a5f899d0844d266a9041766d6f07da183" prot="protected" virt="non-virtual"><scope>shared_memory::array</scope><name>type_</name></member>
      <member refid="classshared__memory_1_1array_1a45cad350fdb0170c955c8c367a9e910d" prot="public" virt="non-virtual"><scope>shared_memory::array</scope><name>~array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
