<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cond__var__pong_8cpp" kind="file" language="C++">
    <compoundname>cond_var_pong.cpp</compoundname>
    <includes local="no">unistd.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">iostream</includes>
    <includes local="no">thread</includes>
    <includes local="no">vector</includes>
    <includes refid="condition__variable_8hpp" local="yes">shared_memory/condition_variable.hpp</includes>
    <includes refid="lock_8hpp" local="yes">shared_memory/lock.hpp</includes>
    <includes refid="mutex_8hpp" local="yes">shared_memory/mutex.hpp</includes>
    <incdepgraph>
      <node id="871">
        <label>atomic</label>
      </node>
      <node id="900">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="896">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="895">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="896" relation="include">
        </childnode>
        <childnode refid="897" relation="include">
        </childnode>
        <childnode refid="898" relation="include">
        </childnode>
        <childnode refid="893" relation="include">
        </childnode>
        <childnode refid="899" relation="include">
        </childnode>
        <childnode refid="900" relation="include">
        </childnode>
      </node>
      <node id="901">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="881" relation="include">
        </childnode>
      </node>
      <node id="877">
        <label>boost/interprocess/sync/scoped_lock.hpp</label>
      </node>
      <node id="878">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="879" relation="include">
        </childnode>
        <childnode refid="880" relation="include">
        </childnode>
        <childnode refid="881" relation="include">
        </childnode>
      </node>
      <node id="888">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="884">
        <label>string</label>
      </node>
      <node id="881">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="872" relation="include">
        </childnode>
        <childnode refid="882" relation="include">
        </childnode>
        <childnode refid="883" relation="include">
        </childnode>
        <childnode refid="884" relation="include">
        </childnode>
        <childnode refid="874" relation="include">
        </childnode>
        <childnode refid="885" relation="include">
        </childnode>
        <childnode refid="886" relation="include">
        </childnode>
        <childnode refid="887" relation="include">
        </childnode>
        <childnode refid="888" relation="include">
        </childnode>
        <childnode refid="889" relation="include">
        </childnode>
        <childnode refid="890" relation="include">
        </childnode>
        <childnode refid="891" relation="include">
        </childnode>
        <childnode refid="894" relation="include">
        </childnode>
        <childnode refid="895" relation="include">
        </childnode>
        <childnode refid="901" relation="include">
        </childnode>
      </node>
      <node id="882">
        <label>map</label>
      </node>
      <node id="875">
        <label>shared_memory/condition_variable.hpp</label>
        <link refid="condition__variable_8hpp_source"/>
        <childnode refid="876" relation="include">
        </childnode>
        <childnode refid="902" relation="include">
        </childnode>
      </node>
      <node id="892">
        <label>exception</label>
      </node>
      <node id="902">
        <label>boost/interprocess/sync/named_condition.hpp</label>
      </node>
      <node id="894">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp_source"/>
        <childnode refid="890" relation="include">
        </childnode>
        <childnode refid="872" relation="include">
        </childnode>
      </node>
      <node id="889">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="879">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="870">
        <label>unistd.h</label>
      </node>
      <node id="874">
        <label>vector</label>
      </node>
      <node id="887">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="899">
        <label>utility</label>
      </node>
      <node id="893">
        <label>sstream</label>
      </node>
      <node id="876">
        <label>shared_memory/lock.hpp</label>
        <link refid="lock_8hpp_source"/>
        <childnode refid="877" relation="include">
        </childnode>
        <childnode refid="878" relation="include">
        </childnode>
      </node>
      <node id="869">
        <label>demos/cond_var_pong.cpp</label>
        <link refid="cond_var_pong.cpp"/>
        <childnode refid="870" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
        <childnode refid="872" relation="include">
        </childnode>
        <childnode refid="873" relation="include">
        </childnode>
        <childnode refid="874" relation="include">
        </childnode>
        <childnode refid="875" relation="include">
        </childnode>
        <childnode refid="876" relation="include">
        </childnode>
        <childnode refid="878" relation="include">
        </childnode>
      </node>
      <node id="886">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="872">
        <label>iostream</label>
      </node>
      <node id="883">
        <label>mutex</label>
      </node>
      <node id="885">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="873">
        <label>thread</label>
      </node>
      <node id="897">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="890">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="898">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="880">
        <label>memory</label>
      </node>
      <node id="891">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="892" relation="include">
        </childnode>
        <childnode refid="872" relation="include">
        </childnode>
        <childnode refid="893" relation="include">
        </childnode>
        <childnode refid="884" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="cond__var__pong_8cpp_1a9a974e4caa0215b6dac5d6135458415d" prot="public" static="no">
        <name>MUTEX_ID</name>
        <initializer>&quot;sm_cond_var_demo_mutex&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/cond_var_pong.cpp" line="11" column="9" bodyfile="demos/cond_var_pong.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cond__var__pong_8cpp_1af6149f829b753316a15dae5f4c1bf984" prot="public" static="no">
        <name>CV_SEGMENT_ID</name>
        <initializer>&quot;sm_cond_var_demo_segment&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/cond_var_pong.cpp" line="12" column="9" bodyfile="demos/cond_var_pong.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cond__var__pong_8cpp_1af1f9f04839ff14f81f82a9ae7b89077c" prot="public" static="no">
        <name>RUNNING_SEGMENT_ID</name>
        <initializer>&quot;sm_running_demo_segment&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/cond_var_pong.cpp" line="13" column="9" bodyfile="demos/cond_var_pong.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cond__var__pong_8cpp_1a2b216b5d0c4f0818ad3a3ca00f1369f1" prot="public" static="no">
        <name>RUNNING_OBJECT_ID</name>
        <initializer>&quot;sm_running_demo_object&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/cond_var_pong.cpp" line="14" column="9" bodyfile="demos/cond_var_pong.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cond__var__pong_8cpp_1aa0b03826c8f7cc324ac2db0ada2dce0a" prot="public" static="no">
        <name>VALUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/cond_var_pong.cpp" line="15" column="9" bodyfile="demos/cond_var_pong.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cond__var__pong_8cpp_1a7417052f32231c4db7d7632b827704b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_vector</definition>
        <argsstring>()</argsstring>
        <name>update_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/cond_var_pong.cpp" line="17" column="1" bodyfile="demos/cond_var_pong.cpp" bodystart="17" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="cond__var__pong_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/cond_var_pong.cpp" line="65" column="1" bodyfile="demos/cond_var_pong.cpp" bodystart="65" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/condition_variable.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/lock.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/mutex.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUTEX_ID<sp/>&quot;sm_cond_var_demo_mutex&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CV_SEGMENT_ID<sp/>&quot;sm_cond_var_demo_segment&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RUNNING_SEGMENT_ID<sp/>&quot;sm_running_demo_segment&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RUNNING_OBJECT_ID<sp/>&quot;sm_running_demo_object&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VALUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_vector()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(1000000);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::Mutex::clean(MUTEX_ID);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1Mutex" kindref="compound">shared_memory::Mutex</ref><sp/>mutex(MUTEX_ID);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1ConditionVariable" kindref="compound">shared_memory::ConditionVariable</ref><sp/>condition(CV_SEGMENT_ID,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>ping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nstarting<sp/>PING...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>condition.notify_one();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nstarting<sp/>PONG...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10000;<sp/>i++)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1Lock" kindref="compound">shared_memory::Lock</ref><sp/>lock(mutex);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition.wait(lock);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PONG<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>v.size();<sp/>j++)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[j]<sp/>=<sp/>VALUE;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(500);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>v.size();<sp/>j++)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[j]<sp/>!=<sp/>VALUE)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n---<sp/>damn,<sp/>the<sp/>vector<sp/>was<sp/>not<sp/>locked<sp/>!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v[j];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition.notify_one();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stopping<sp/>ping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::set&lt;bool&gt;(RUNNING_SEGMENT_ID,<sp/>RUNNING_OBJECT_ID,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>go_ahead;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ping<sp/>should<sp/>be<sp/>started<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>is<sp/>starting,<sp/>below<sp/>will<sp/>not<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foo;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::get&lt;bool&gt;(RUNNING_SEGMENT_ID,<sp/>RUNNING_OBJECT_ID,<sp/>foo);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>go_ahead<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nstart<sp/>sm_cond_var_ping<sp/>first<sp/>!\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(go_ahead)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::set&lt;bool&gt;(RUNNING_SEGMENT_ID,<sp/>RUNNING_OBJECT_ID,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_vector();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/cond_var_pong.cpp"/>
  </compounddef>
</doxygen>
