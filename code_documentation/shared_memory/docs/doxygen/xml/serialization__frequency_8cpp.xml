<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="serialization__frequency_8cpp" kind="file" language="C++">
    <compoundname>serialization_frequency.cpp</compoundname>
    <includes local="no">chrono</includes>
    <includes refid="four__int__values_8hpp" local="yes">shared_memory/demos/four_int_values.hpp</includes>
    <includes refid="serializer_8hpp" local="yes">shared_memory/serializer.hpp</includes>
    <incdepgraph>
      <node id="719">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="711">
        <label>shared_memory/demos/four_int_values.hpp</label>
        <link refid="four__int__values_8hpp"/>
        <childnode refid="712" relation="include">
        </childnode>
        <childnode refid="713" relation="include">
        </childnode>
      </node>
      <node id="714">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="713">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="714" relation="include">
        </childnode>
        <childnode refid="715" relation="include">
        </childnode>
        <childnode refid="716" relation="include">
        </childnode>
        <childnode refid="717" relation="include">
        </childnode>
        <childnode refid="718" relation="include">
        </childnode>
        <childnode refid="719" relation="include">
        </childnode>
      </node>
      <node id="709">
        <label>benchmarks/serialization_frequency.cpp</label>
        <link refid="serialization_frequency.cpp"/>
        <childnode refid="710" relation="include">
        </childnode>
        <childnode refid="711" relation="include">
        </childnode>
        <childnode refid="713" relation="include">
        </childnode>
      </node>
      <node id="718">
        <label>utility</label>
      </node>
      <node id="717">
        <label>sstream</label>
      </node>
      <node id="712">
        <label>iostream</label>
      </node>
      <node id="710">
        <label>chrono</label>
      </node>
      <node id="715">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="716">
        <label>cereal/types/vector.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="serialization__frequency_8cpp_1a61af3e60b94ae3e748f6fbac1e794af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void execute</definition>
        <argsstring>()</argsstring>
        <name>execute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="benchmarks/serialization_frequency.cpp" line="7" column="1" bodyfile="benchmarks/serialization_frequency.cpp" bodystart="7" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="serialization__frequency_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="benchmarks/serialization_frequency.cpp" line="39" column="1" bodyfile="benchmarks/serialization_frequency.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="four__int__values_8hpp" kindref="compound">shared_memory/demos/four_int_values.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/serializer.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>checks<sp/>at<sp/>which<sp/>frequency<sp/>1<sp/>million<sp/>items<sp/>can<sp/>be<sp/>serialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>execute()</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_iterations<sp/>=<sp/>1000000;<sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>million</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1Four__int__values" kindref="compound">shared_memory::Four_int_values</ref><sp/>fiv(1,<sp/>1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1Serializer" kindref="compound">shared_memory::Serializer&lt;shared_memory::Four_int_values&gt;</ref><sp/>serializer;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_size_;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration<sp/>=<sp/>0;<sp/>iteration<sp/>&lt;<sp/>nb_iterations;<sp/>iteration++)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>serialized<sp/>=<sp/>serializer.<ref refid="classshared__memory_1_1Serializer_1a61ea01a0e5e28fc24c9274455050b1c1" kindref="member">serialize</ref>(fiv);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>to<sp/>make<sp/>sure<sp/>the<sp/>compiler<sp/>does<sp/>not<sp/>remove<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>above<sp/>for<sp/>optimization<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_size_<sp/>+=<sp/>serialized.size();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>duration_us<sp/>=</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(end<sp/>-<sp/>start)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>duration_seconds<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(duration_us)<sp/>/<sp/>1e6;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frequency<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nb_iterations)<sp/>/<sp/>duration_seconds;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nserialization<sp/>frequency:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>frequency</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>irrelevant<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_size_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>execute();</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="benchmarks/serialization_frequency.cpp"/>
  </compounddef>
</doxygen>
