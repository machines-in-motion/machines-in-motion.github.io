<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="mutex_8cpp" kind="file" language="C++">
    <compoundname>mutex.cpp</compoundname>
    <includes refid="mutex_8hpp" local="yes">shared_memory/mutex.hpp</includes>
    <incdepgraph>
      <node id="2165">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="2161">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="2160">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="2161" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
      </node>
      <node id="2166">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="2144" relation="include">
        </childnode>
      </node>
      <node id="2141">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="2142" relation="include">
        </childnode>
        <childnode refid="2143" relation="include">
        </childnode>
        <childnode refid="2144" relation="include">
        </childnode>
      </node>
      <node id="2153">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="2148">
        <label>string</label>
      </node>
      <node id="2144">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="2145" relation="include">
        </childnode>
        <childnode refid="2146" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2148" relation="include">
        </childnode>
        <childnode refid="2149" relation="include">
        </childnode>
        <childnode refid="2150" relation="include">
        </childnode>
        <childnode refid="2151" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
        <childnode refid="2153" relation="include">
        </childnode>
        <childnode refid="2154" relation="include">
        </childnode>
        <childnode refid="2155" relation="include">
        </childnode>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2159" relation="include">
        </childnode>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2166" relation="include">
        </childnode>
      </node>
      <node id="2146">
        <label>map</label>
      </node>
      <node id="2157">
        <label>exception</label>
      </node>
      <node id="2159">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp_source"/>
        <childnode refid="2155" relation="include">
        </childnode>
        <childnode refid="2145" relation="include">
        </childnode>
      </node>
      <node id="2154">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="2142">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="2149">
        <label>vector</label>
      </node>
      <node id="2152">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="2140">
        <label>src/mutex.cpp</label>
        <link refid="mutex.cpp"/>
        <childnode refid="2141" relation="include">
        </childnode>
      </node>
      <node id="2164">
        <label>utility</label>
      </node>
      <node id="2158">
        <label>sstream</label>
      </node>
      <node id="2151">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="2145">
        <label>iostream</label>
      </node>
      <node id="2147">
        <label>mutex</label>
      </node>
      <node id="2150">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="2162">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="2155">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="2163">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="2143">
        <label>memory</label>
      </node>
      <node id="2156">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2145" relation="include">
        </childnode>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2148" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;shared_memory/mutex.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classshared__memory_1_1Mutex_1a8f1b1cffa2f3bdfb8cd74cf61b0df650" kindref="member">Mutex::Mutex</ref>(std::string<sp/>mutex_id,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clean_memory_on_destruction)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>mutex_{boost::interprocess::open_or_create,<sp/>mutex_id.c_str()}</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_id_<sp/>=<sp/>mutex_id;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>clean_memory_on_destruction_<sp/>=<sp/>clean_memory_on_destruction;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">Mutex::~Mutex()</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_.unlock();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clean_memory_on_destruction_)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::interprocess::named_mutex::remove(mutex_id_.c_str());</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex_.unlock();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1Mutex_1a6b6ca2e15d379a5e3a8d68d15c04469f" kindref="member">Mutex::lock</ref>()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_.lock();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1Mutex_1a06b9e214880af7ab9703bd78601ac0c6" kindref="member">Mutex::unlock</ref>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_.unlock();</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Mutex::clean(std::string<sp/>mutex_id)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1Mutex_1a8f1b1cffa2f3bdfb8cd74cf61b0df650" kindref="member">Mutex</ref><sp/>mutex(mutex_id,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/mutex.cpp"/>
  </compounddef>
</doxygen>
