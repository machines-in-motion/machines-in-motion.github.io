<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="locked__condition__variable_8cpp" kind="file" language="C++">
    <compoundname>locked_condition_variable.cpp</compoundname>
    <includes refid="locked__condition__variable_8hpp" local="yes">shared_memory/locked_condition_variable.hpp</includes>
    <incdepgraph>
      <node id="2137">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="2133">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="2132">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="2133" relation="include">
        </childnode>
        <childnode refid="2134" relation="include">
        </childnode>
        <childnode refid="2135" relation="include">
        </childnode>
        <childnode refid="2130" relation="include">
        </childnode>
        <childnode refid="2136" relation="include">
        </childnode>
        <childnode refid="2137" relation="include">
        </childnode>
      </node>
      <node id="2138">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="2116" relation="include">
        </childnode>
      </node>
      <node id="2110">
        <label>shared_memory/locked_condition_variable.hpp</label>
        <link refid="locked__condition__variable_8hpp_source"/>
        <childnode refid="2111" relation="include">
        </childnode>
        <childnode refid="2112" relation="include">
        </childnode>
        <childnode refid="2113" relation="include">
        </childnode>
        <childnode refid="2114" relation="include">
        </childnode>
        <childnode refid="2115" relation="include">
        </childnode>
        <childnode refid="2116" relation="include">
        </childnode>
      </node>
      <node id="2114">
        <label>boost/interprocess/sync/scoped_lock.hpp</label>
      </node>
      <node id="2115">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="2113" relation="include">
        </childnode>
        <childnode refid="2111" relation="include">
        </childnode>
        <childnode refid="2116" relation="include">
        </childnode>
      </node>
      <node id="2125">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="2120">
        <label>string</label>
      </node>
      <node id="2116">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="2117" relation="include">
        </childnode>
        <childnode refid="2118" relation="include">
        </childnode>
        <childnode refid="2119" relation="include">
        </childnode>
        <childnode refid="2120" relation="include">
        </childnode>
        <childnode refid="2121" relation="include">
        </childnode>
        <childnode refid="2122" relation="include">
        </childnode>
        <childnode refid="2123" relation="include">
        </childnode>
        <childnode refid="2124" relation="include">
        </childnode>
        <childnode refid="2125" relation="include">
        </childnode>
        <childnode refid="2126" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
        <childnode refid="2128" relation="include">
        </childnode>
        <childnode refid="2131" relation="include">
        </childnode>
        <childnode refid="2132" relation="include">
        </childnode>
        <childnode refid="2138" relation="include">
        </childnode>
      </node>
      <node id="2118">
        <label>map</label>
      </node>
      <node id="2129">
        <label>exception</label>
      </node>
      <node id="2112">
        <label>boost/interprocess/sync/named_condition.hpp</label>
      </node>
      <node id="2131">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp_source"/>
        <childnode refid="2127" relation="include">
        </childnode>
        <childnode refid="2117" relation="include">
        </childnode>
      </node>
      <node id="2109">
        <label>src/locked_condition_variable.cpp</label>
        <link refid="locked_condition_variable.cpp"/>
        <childnode refid="2110" relation="include">
        </childnode>
      </node>
      <node id="2126">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="2113">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="2121">
        <label>vector</label>
      </node>
      <node id="2124">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="2136">
        <label>utility</label>
      </node>
      <node id="2130">
        <label>sstream</label>
      </node>
      <node id="2123">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="2117">
        <label>iostream</label>
      </node>
      <node id="2119">
        <label>mutex</label>
      </node>
      <node id="2122">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="2134">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="2127">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="2135">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="2111">
        <label>memory</label>
      </node>
      <node id="2128">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="2129" relation="include">
        </childnode>
        <childnode refid="2117" relation="include">
        </childnode>
        <childnode refid="2130" relation="include">
        </childnode>
        <childnode refid="2120" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;shared_memory/locked_condition_variable.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classshared__memory_1_1LockedConditionVariable_1a648057022bbf8a7b5221e1170b1e099c" kindref="member">LockedConditionVariable::LockedConditionVariable</ref>(</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>object_id,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clean_memory_on_destruction)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>mutex_id_(object_id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_mtx&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>condition_id_(object_id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_cond&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mutex_{boost::interprocess::open_or_create,<sp/>mutex_id_.c_str()},</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clean_memory_on_destruction_(clean_memory_on_destruction)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>condition_variable_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SHMCondition(boost::interprocess::open_or_create,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition_id_.c_str());</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">LockedConditionVariable::~LockedConditionVariable()</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1adf3a50665011b3b92b80369bbbc6d4a4" kindref="member">unlock_scope</ref>();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1LockedConditionVariable_1a8bc7fb73332304b406335e38ba4cdd1b" kindref="member">condition_variable_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1LockedConditionVariable_1a8bc7fb73332304b406335e38ba4cdd1b" kindref="member">condition_variable_</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1LockedConditionVariable_1abe0963bc5746d19350e816ad42ff47b1" kindref="member">clean_memory_on_destruction_</ref>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::interprocess::named_mutex::remove(<ref refid="classshared__memory_1_1LockedConditionVariable_1a07d7d718e33cc2e833cf9bb22fe8fada" kindref="member">mutex_id_</ref>.c_str());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::interprocess::named_condition::remove(<ref refid="classshared__memory_1_1LockedConditionVariable_1a7cf01915f9d1a8795f4e69345cd1e1e4" kindref="member">condition_id_</ref>.c_str());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1aa3bca5020f84c8e0a90a2dad3e6521e5" kindref="member">LockedConditionVariable::clean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>segment_id)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a648057022bbf8a7b5221e1170b1e099c" kindref="member">LockedConditionVariable</ref><sp/>cv(segment_id,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a31633f2243b988dc0a8bd3d4637dc216" kindref="member">LockedConditionVariable::notify_all</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a8bc7fb73332304b406335e38ba4cdd1b" kindref="member">condition_variable_</ref>-&gt;notify_all();</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a532a1332fe184e668a49fa002db5be08" kindref="member">LockedConditionVariable::notify_one</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a8bc7fb73332304b406335e38ba4cdd1b" kindref="member">condition_variable_</ref>-&gt;notify_one();</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a9eb84ab5d570a0c5a81f6eaeb4c4dd50" kindref="member">LockedConditionVariable::wait</ref>()</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a8bc7fb73332304b406335e38ba4cdd1b" kindref="member">condition_variable_</ref>-&gt;wait(*<ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockedConditionVariable::wait():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING,<sp/>undefined<sp/>behavior,<sp/>the<sp/>scope<sp/>has<sp/>not<sp/>been<sp/>locked&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a0d4ab218fc51fcce34146f2adca408d7" kindref="member">LockedConditionVariable::timed_wait</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>wait_nano_seconds)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::posix_time::ptime<sp/>current_time<sp/>=</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::interprocess::microsec_clock::universal_time();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::posix_time::time_duration<sp/>waiting_time<sp/>=</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::posix_time::microseconds(static_cast&lt;long&gt;(</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(wait_nano_seconds)<sp/>*<sp/>0.001));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a8bc7fb73332304b406335e38ba4cdd1b" kindref="member">condition_variable_</ref>-&gt;timed_wait(*<ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_time<sp/>+<sp/>waiting_time);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockedConditionVariable::timed_wait():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING,<sp/>undefined<sp/>behavior,<sp/>the<sp/>scope<sp/>has<sp/>not<sp/>been<sp/>locked&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a86b42b23b94593bca5b12b9d792d1275" kindref="member">LockedConditionVariable::try_lock</ref>()</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>-&gt;try_lock();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockedConditionVariable::try_lock():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING,<sp/>undefined<sp/>behavior,<sp/>the<sp/>scope<sp/>has<sp/>not<sp/>been<sp/>locked&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a5d28bb5942fc5bc4886014d6b9b26885" kindref="member">LockedConditionVariable::unlock</ref>()</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>-&gt;unlock();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockedConditionVariable::try_lock():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING,<sp/>undefined<sp/>behavior,<sp/>the<sp/>scope<sp/>has<sp/>not<sp/>been<sp/>locked&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LockedConditionVariable::owns()</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>-&gt;owns();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LockedConditionVariable::owns():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING,<sp/>undefined<sp/>behavior,<sp/>the<sp/>scope<sp/>has<sp/>not<sp/>been<sp/>locked&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a1eef63f7e3e898c3734923c987383ffe" kindref="member">LockedConditionVariable::lock_scope</ref>()</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SHMScopeLock(<ref refid="classshared__memory_1_1LockedConditionVariable_1a757abc2190906a0773667b42be6e4e66" kindref="member">mutex_</ref>));</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1adf3a50665011b3b92b80369bbbc6d4a4" kindref="member">LockedConditionVariable::unlock_scope</ref>()</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>.reset(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/locked_condition_variable.cpp"/>
  </compounddef>
</doxygen>
