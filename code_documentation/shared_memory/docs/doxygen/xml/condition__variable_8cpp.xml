<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="condition__variable_8cpp" kind="file" language="C++">
    <compoundname>condition_variable.cpp</compoundname>
    <includes refid="condition__variable_8hpp" local="yes">shared_memory/condition_variable.hpp</includes>
    <incdepgraph>
      <node id="2068">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="2064">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="2063">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="2064" relation="include">
        </childnode>
        <childnode refid="2065" relation="include">
        </childnode>
        <childnode refid="2066" relation="include">
        </childnode>
        <childnode refid="2061" relation="include">
        </childnode>
        <childnode refid="2067" relation="include">
        </childnode>
        <childnode refid="2068" relation="include">
        </childnode>
      </node>
      <node id="2069">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="2047" relation="include">
        </childnode>
      </node>
      <node id="2043">
        <label>boost/interprocess/sync/scoped_lock.hpp</label>
      </node>
      <node id="2044">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2047" relation="include">
        </childnode>
      </node>
      <node id="2056">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="2051">
        <label>string</label>
      </node>
      <node id="2047">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2049" relation="include">
        </childnode>
        <childnode refid="2050" relation="include">
        </childnode>
        <childnode refid="2051" relation="include">
        </childnode>
        <childnode refid="2052" relation="include">
        </childnode>
        <childnode refid="2053" relation="include">
        </childnode>
        <childnode refid="2054" relation="include">
        </childnode>
        <childnode refid="2055" relation="include">
        </childnode>
        <childnode refid="2056" relation="include">
        </childnode>
        <childnode refid="2057" relation="include">
        </childnode>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2059" relation="include">
        </childnode>
        <childnode refid="2062" relation="include">
        </childnode>
        <childnode refid="2063" relation="include">
        </childnode>
        <childnode refid="2069" relation="include">
        </childnode>
      </node>
      <node id="2049">
        <label>map</label>
      </node>
      <node id="2041">
        <label>shared_memory/condition_variable.hpp</label>
        <link refid="condition__variable_8hpp_source"/>
        <childnode refid="2042" relation="include">
        </childnode>
        <childnode refid="2070" relation="include">
        </childnode>
      </node>
      <node id="2060">
        <label>exception</label>
      </node>
      <node id="2070">
        <label>boost/interprocess/sync/named_condition.hpp</label>
      </node>
      <node id="2062">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp_source"/>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
      </node>
      <node id="2057">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="2045">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="2052">
        <label>vector</label>
      </node>
      <node id="2055">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="2067">
        <label>utility</label>
      </node>
      <node id="2061">
        <label>sstream</label>
      </node>
      <node id="2042">
        <label>shared_memory/lock.hpp</label>
        <link refid="lock_8hpp_source"/>
        <childnode refid="2043" relation="include">
        </childnode>
        <childnode refid="2044" relation="include">
        </childnode>
      </node>
      <node id="2054">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="2048">
        <label>iostream</label>
      </node>
      <node id="2050">
        <label>mutex</label>
      </node>
      <node id="2053">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="2040">
        <label>src/condition_variable.cpp</label>
        <link refid="condition_variable.cpp"/>
        <childnode refid="2041" relation="include">
        </childnode>
      </node>
      <node id="2065">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="2058">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="2066">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="2046">
        <label>memory</label>
      </node>
      <node id="2059">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="2060" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2061" relation="include">
        </childnode>
        <childnode refid="2051" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;shared_memory/condition_variable.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classshared__memory_1_1ConditionVariable_1ae4b6accfbe98b2e23f9e20789cea46f7" kindref="member">ConditionVariable::ConditionVariable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>object_id,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clean_memory_on_destruction)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>condition_id_(object_id),</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clean_memory_on_destruction_(clean_memory_on_destruction)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note:<sp/>using<sp/>an<sp/>instance<sp/>that<sp/>is<sp/>defined<sp/>in<sp/>initializer<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sometimes<sp/>results<sp/>in<sp/>segfault.<sp/>Thus<sp/>switching<sp/>to<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>condition_variable_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SHMCondition(boost::interprocess::open_or_create,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition_id_.c_str());</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">ConditionVariable::~ConditionVariable()</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1ConditionVariable_1a37c6e1a6ca44d30c2a29990e4460803b" kindref="member">condition_variable_</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1ConditionVariable_1a872a5c9305c0dff22ec085b8c8306a0d" kindref="member">clean_memory_on_destruction_</ref>)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::interprocess::named_condition::remove(<ref refid="classshared__memory_1_1ConditionVariable_1a496feeef1a7fec080435b68a79bc163d" kindref="member">condition_id_</ref>.c_str());</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConditionVariable::clean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>object_id)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::interprocess::named_condition::remove(object_id.c_str());</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1ConditionVariable_1abc70cd1401f40e23ca4a6afb33f28bb5" kindref="member">ConditionVariable::notify_all</ref>()</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1ConditionVariable_1a37c6e1a6ca44d30c2a29990e4460803b" kindref="member">condition_variable_</ref>-&gt;notify_all();</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1ConditionVariable_1a8953b054a1074ab5ef0a9f9b35f58a42" kindref="member">ConditionVariable::notify_one</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1ConditionVariable_1a37c6e1a6ca44d30c2a29990e4460803b" kindref="member">condition_variable_</ref>-&gt;notify_one();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1ConditionVariable_1a8746faccdf81b03dd36c5b405c9ab48d" kindref="member">ConditionVariable::wait</ref>(Lock<sp/>&amp;lock)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ConditionVariable<sp/>is<sp/>friend<sp/>of<sp/>Lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1ConditionVariable_1a37c6e1a6ca44d30c2a29990e4460803b" kindref="member">condition_variable_</ref>-&gt;wait(lock.lock_);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1ConditionVariable_1af7b1ce584ff9ef9a0925f57cae8e6263" kindref="member">ConditionVariable::timed_wait</ref>(Lock<sp/>&amp;lock,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>wait_nano_seconds)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::posix_time::ptime<sp/>current_time<sp/>=</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::interprocess::microsec_clock::universal_time();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::posix_time::time_duration<sp/>waiting_time<sp/>=</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::posix_time::microseconds(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;long&gt;(static_cast&lt;double&gt;(wait_nano_seconds)<sp/>*<sp/>0.001));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1ConditionVariable_1a37c6e1a6ca44d30c2a29990e4460803b" kindref="member">condition_variable_</ref>-&gt;timed_wait(lock.lock_,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_time<sp/>+<sp/>waiting_time);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/condition_variable.cpp"/>
  </compounddef>
</doxygen>
