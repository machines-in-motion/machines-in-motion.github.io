<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="wrappers_8cpp" kind="file" language="C++">
    <compoundname>wrappers.cpp</compoundname>
    <includes refid="condition__variable_8hpp" local="yes">shared_memory/condition_variable.hpp</includes>
    <includes refid="lock_8hpp" local="yes">shared_memory/lock.hpp</includes>
    <includes refid="locked__condition__variable_8hpp" local="yes">shared_memory/locked_condition_variable.hpp</includes>
    <includes refid="mutex_8hpp" local="yes">shared_memory/mutex.hpp</includes>
    <includes local="no">pybind11/pybind11.h</includes>
    <includes local="no">pybind11/stl.h</includes>
    <incdepgraph>
      <node id="2226">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="2222">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="2221">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2226" relation="include">
        </childnode>
      </node>
      <node id="2227">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="2205" relation="include">
        </childnode>
      </node>
      <node id="2229">
        <label>shared_memory/locked_condition_variable.hpp</label>
        <link refid="locked__condition__variable_8hpp_source"/>
        <childnode refid="2204" relation="include">
        </childnode>
        <childnode refid="2228" relation="include">
        </childnode>
        <childnode refid="2203" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2205" relation="include">
        </childnode>
      </node>
      <node id="2201">
        <label>boost/interprocess/sync/scoped_lock.hpp</label>
      </node>
      <node id="2202">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="2203" relation="include">
        </childnode>
        <childnode refid="2204" relation="include">
        </childnode>
        <childnode refid="2205" relation="include">
        </childnode>
      </node>
      <node id="2214">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="2209">
        <label>string</label>
      </node>
      <node id="2205">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="2206" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2208" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2211" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2215" relation="include">
        </childnode>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
        <childnode refid="2221" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
      </node>
      <node id="2207">
        <label>map</label>
      </node>
      <node id="2199">
        <label>shared_memory/condition_variable.hpp</label>
        <link refid="condition__variable_8hpp_source"/>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2228" relation="include">
        </childnode>
      </node>
      <node id="2218">
        <label>exception</label>
      </node>
      <node id="2228">
        <label>boost/interprocess/sync/named_condition.hpp</label>
      </node>
      <node id="2220">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp_source"/>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2206" relation="include">
        </childnode>
      </node>
      <node id="2215">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="2203">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="2210">
        <label>vector</label>
      </node>
      <node id="2213">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="2225">
        <label>utility</label>
      </node>
      <node id="2219">
        <label>sstream</label>
      </node>
      <node id="2230">
        <label>pybind11/pybind11.h</label>
      </node>
      <node id="2200">
        <label>shared_memory/lock.hpp</label>
        <link refid="lock_8hpp_source"/>
        <childnode refid="2201" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2198">
        <label>srcpy/wrappers.cpp</label>
        <link refid="wrappers.cpp"/>
        <childnode refid="2199" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2229" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2230" relation="include">
        </childnode>
        <childnode refid="2231" relation="include">
        </childnode>
      </node>
      <node id="2212">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="2206">
        <label>iostream</label>
      </node>
      <node id="2208">
        <label>mutex</label>
      </node>
      <node id="2211">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="2223">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="2216">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="2224">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="2204">
        <label>memory</label>
      </node>
      <node id="2217">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2206" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
      </node>
      <node id="2231">
        <label>pybind11/stl.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="wrappers_8cpp_1a6ade333a1d60c18003eaee840237c2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PYBIND11_MODULE</definition>
        <argsstring>(shared_memory, m)</argsstring>
        <name>PYBIND11_MODULE</name>
        <param>
          <type>shared_memory</type>
        </param>
        <param>
          <type>m</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="srcpy/wrappers.cpp" line="14" column="1" bodyfile="srcpy/wrappers.cpp" bodystart="14" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>Max<sp/>Planck<sp/>Gesellschaft<sp/>and<sp/>New<sp/>York<sp/>University</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors<sp/>:<sp/>Vincent<sp/>Berenz,<sp/>Maximilien<sp/>Naveau</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/condition_variable.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/lock.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/locked_condition_variable.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/mutex.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/pybind11.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/stl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">PYBIND11_MODULE(<ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref>,m){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>pybind11::class_&lt;Mutex&gt;(m,</highlight><highlight class="stringliteral">&quot;Mutex&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(pybind11::init&lt;std::string,bool&gt;())</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;unlock&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1Mutex_1a06b9e214880af7ab9703bd78601ac0c6" kindref="member">Mutex::unlock</ref>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;lock&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1Mutex_1a6b6ca2e15d379a5e3a8d68d15c04469f" kindref="member">Mutex::lock</ref>)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>.def_static(</highlight><highlight class="stringliteral">&quot;clean&quot;</highlight><highlight class="normal">,&amp;Mutex::clean);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>pybind11::class_&lt;Lock&gt;(m,</highlight><highlight class="stringliteral">&quot;Lock&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(pybind11::init&lt;Mutex&amp;&gt;());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ConditionVariable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>pybind11::class_&lt;ConditionVariable&gt;(m,</highlight><highlight class="stringliteral">&quot;ConditionVariable&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(pybind11::init&lt;std::string,bool&gt;())</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;notify_all&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1ConditionVariable_1abc70cd1401f40e23ca4a6afb33f28bb5" kindref="member">ConditionVariable::notify_all</ref>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;notify_one&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1ConditionVariable_1a8953b054a1074ab5ef0a9f9b35f58a42" kindref="member">ConditionVariable::notify_one</ref>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;timed_wait&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1ConditionVariable_1af7b1ce584ff9ef9a0925f57cae8e6263" kindref="member">ConditionVariable::timed_wait</ref>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1ConditionVariable_1a8746faccdf81b03dd36c5b405c9ab48d" kindref="member">ConditionVariable::wait</ref>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>.def_static(</highlight><highlight class="stringliteral">&quot;clean&quot;</highlight><highlight class="normal">,&amp;ConditionVariable::clean);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>LockedConditionVariable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>pybind11::class_&lt;LockedConditionVariable&gt;(m,</highlight><highlight class="stringliteral">&quot;LockedConditionVariable&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(pybind11::init&lt;std::string,bool&gt;())</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;notify_all&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1a31633f2243b988dc0a8bd3d4637dc216" kindref="member">LockedConditionVariable::notify_all</ref>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;notify_one&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1a532a1332fe184e668a49fa002db5be08" kindref="member">LockedConditionVariable::notify_one</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;timed_wait&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1a0d4ab218fc51fcce34146f2adca408d7" kindref="member">LockedConditionVariable::timed_wait</ref>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1a9eb84ab5d570a0c5a81f6eaeb4c4dd50" kindref="member">LockedConditionVariable::wait</ref>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;try_lock&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1a86b42b23b94593bca5b12b9d792d1275" kindref="member">LockedConditionVariable::try_lock</ref>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;unlock&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1a5d28bb5942fc5bc4886014d6b9b26885" kindref="member">LockedConditionVariable::unlock</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;lock_scope&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1a1eef63f7e3e898c3734923c987383ffe" kindref="member">LockedConditionVariable::lock_scope</ref>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;unlock_scope&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1adf3a50665011b3b92b80369bbbc6d4a4" kindref="member">LockedConditionVariable::unlock_scope</ref>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>.def_static(</highlight><highlight class="stringliteral">&quot;clean&quot;</highlight><highlight class="normal">,&amp;<ref refid="classshared__memory_1_1LockedConditionVariable_1aa3bca5020f84c8e0a90a2dad3e6521e5" kindref="member">LockedConditionVariable::clean</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sharing<sp/>a<sp/>boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;set_bool&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::set&lt;bool&gt;(segment,object,value);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_bool&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::get&lt;bool&gt;(segment,object,value);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;set_int&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::set&lt;int&gt;(segment,object,value);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_int&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::get&lt;int&gt;(segment,object,value);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;set_double&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::set&lt;double&gt;(segment,object,value);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_double&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::get&lt;double&gt;(segment,object,value);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;set_string&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>value){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::set&lt;std::string&gt;(segment,object,value);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_string&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>value;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::get&lt;std::string&gt;(segment,object,value);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;clear_shared_memory&quot;</highlight><highlight class="normal">,[](std::string<sp/>segment)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshared__memory_1aa8583540879db53fc80b31410b5eec68" kindref="member">shared_memory::clear_shared_memory</ref>(segment);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="srcpy/wrappers.cpp"/>
  </compounddef>
</doxygen>
