<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="exchange__manager__consumer_8hpp" kind="file" language="C++">
    <compoundname>exchange_manager_consumer.hpp</compoundname>
    <includes refid="exchange__manager__memory_8hpp" local="yes">shared_memory/internal/exchange_manager_memory.hpp</includes>
    <includes refid="exchange__manager__consumer_8hxx" local="yes">exchange_manager_consumer.hxx</includes>
    <includedby refid="exchange__manager__consumer_8cpp" local="yes">demos/exchange_manager_consumer.cpp</includedby>
    <includedby refid="exchange__manager__demo_8cpp" local="yes">demos/exchange_manager_demo.cpp</includedby>
    <includedby refid="exchange__manager__producer_8cpp" local="yes">demos/exchange_manager_producer.cpp</includedby>
    <incdepgraph>
      <node id="1598">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="1594">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="1593">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="1594" relation="include">
        </childnode>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
        <childnode refid="1591" relation="include">
        </childnode>
        <childnode refid="1597" relation="include">
        </childnode>
        <childnode refid="1598" relation="include">
        </childnode>
      </node>
      <node id="1599">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="1582" relation="include">
        </childnode>
      </node>
      <node id="1571">
        <label>include/shared_memory/exchange_manager_consumer.hpp</label>
        <link refid="exchange_manager_consumer.hpp"/>
        <childnode refid="1572" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
      </node>
      <node id="1579">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1581" relation="include">
        </childnode>
        <childnode refid="1582" relation="include">
        </childnode>
      </node>
      <node id="1574">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="1578">
        <label>string</label>
      </node>
      <node id="1582">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="1577" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1584" relation="include">
        </childnode>
        <childnode refid="1578" relation="include">
        </childnode>
        <childnode refid="1585" relation="include">
        </childnode>
        <childnode refid="1586" relation="include">
        </childnode>
        <childnode refid="1573" relation="include">
        </childnode>
        <childnode refid="1587" relation="include">
        </childnode>
        <childnode refid="1574" relation="include">
        </childnode>
        <childnode refid="1588" relation="include">
        </childnode>
        <childnode refid="1575" relation="include">
        </childnode>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1592" relation="include">
        </childnode>
        <childnode refid="1593" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
      </node>
      <node id="1583">
        <label>map</label>
      </node>
      <node id="1601">
        <label>exchange_manager_consumer.hxx</label>
        <link refid="exchange__manager__consumer_8hxx_source"/>
      </node>
      <node id="1590">
        <label>exception</label>
      </node>
      <node id="1592">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp_source"/>
        <childnode refid="1575" relation="include">
        </childnode>
        <childnode refid="1577" relation="include">
        </childnode>
      </node>
      <node id="1588">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="1580">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="1600">
        <label>exchange_manager_memory.hxx</label>
        <link refid="exchange__manager__memory_8hxx_source"/>
      </node>
      <node id="1585">
        <label>vector</label>
      </node>
      <node id="1587">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="1597">
        <label>utility</label>
      </node>
      <node id="1591">
        <label>sstream</label>
      </node>
      <node id="1572">
        <label>shared_memory/internal/exchange_manager_memory.hpp</label>
        <link refid="exchange__manager__memory_8hpp"/>
        <childnode refid="1573" relation="include">
        </childnode>
        <childnode refid="1574" relation="include">
        </childnode>
        <childnode refid="1575" relation="include">
        </childnode>
        <childnode refid="1576" relation="include">
        </childnode>
        <childnode refid="1577" relation="include">
        </childnode>
        <childnode refid="1578" relation="include">
        </childnode>
        <childnode refid="1579" relation="include">
        </childnode>
        <childnode refid="1593" relation="include">
        </childnode>
        <childnode refid="1582" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1573">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="1576">
        <label>boost/lockfree/queue.hpp</label>
      </node>
      <node id="1577">
        <label>iostream</label>
      </node>
      <node id="1584">
        <label>mutex</label>
      </node>
      <node id="1586">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="1595">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="1575">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="1596">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="1581">
        <label>memory</label>
      </node>
      <node id="1589">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="1590" relation="include">
        </childnode>
        <childnode refid="1577" relation="include">
        </childnode>
        <childnode refid="1591" relation="include">
        </childnode>
        <childnode refid="1578" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1603">
        <label>demos/exchange_manager_consumer.cpp</label>
        <link refid="exchange__manager__consumer_8cpp"/>
      </node>
      <node id="1602">
        <label>include/shared_memory/exchange_manager_consumer.hpp</label>
        <link refid="exchange_manager_consumer.hpp"/>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
      </node>
      <node id="1604">
        <label>demos/exchange_manager_demo.cpp</label>
        <link refid="exchange__manager__demo_8cpp"/>
      </node>
      <node id="1605">
        <label>demos/exchange_manager_producer.cpp</label>
        <link refid="exchange__manager__producer_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classshared__memory_1_1Exchange__manager__consumer" prot="public">shared_memory::Exchange_manager_consumer</innerclass>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
<para>Interprocess exchange of serialized items. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz (<ulink url="mailto:vberenz@tuebingen.mpg.de">vberenz@tuebingen.mpg.de</ulink>) </para></simplesect>
<xrefsect id="license_1_license000021"><xreftitle>License</xreftitle><xrefdescription><para>License BSD-3-Clause </para></xrefdescription></xrefsect><simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-06-07 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exchange__manager__memory_8hpp" kindref="compound">shared_memory/internal/exchange_manager_memory.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bip<sp/>=<sp/>boost::interprocess;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory_1_1internal" kindref="compound">shared_memory::internal</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Serializable,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QUEUE_SIZE&gt;</highlight></codeline>
<codeline lineno="23" refid="classshared__memory_1_1Exchange__manager__consumer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classshared__memory_1_1Exchange__manager__consumer" kindref="compound">Exchange_manager_consumer</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1internal_1_1Exchange__manager__memory" kindref="compound">Exchange_manager_memory&lt;Serializable, QUEUE_SIZE&gt;</ref><sp/><ref refid="classshared__memory_1_1internal_1_1Exchange__manager__memory" kindref="compound">Memory</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Memory&gt;<sp/>Memory_ptr;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1Exchange__manager__consumer" kindref="compound">Exchange_manager_consumer</ref>(std::string<sp/>segment_id,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>object_id,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>leading,</highlight></codeline>
<codeline lineno="46" refid="classshared__memory_1_1Exchange__manager__consumer_1af1a894d796387d297f848d18d8d55df5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autolock<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classshared__memory_1_1Exchange__manager__consumer" kindref="compound">Exchange_manager_consumer</ref>();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lock();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>consume(<ref refid="classSerializable" kindref="compound">Serializable</ref><sp/>&amp;serializable);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1Exchange__manager__consumer_1af1a894d796387d297f848d18d8d55df5" kindref="member">ready_to_consume</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>purge_feedbacks();</highlight></codeline>
<codeline lineno="87" refid="classshared__memory_1_1Exchange__manager__consumer_1aaf053702ec1ef8455fc10e70144f6923" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_char_read();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_producer_queue_empty()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_consumer_queue_empty()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>@brief<sp/>Clean<sp/>the<sp/>underlying<sp/>shared<sp/>memory.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Call<sp/>should<sp/>not<sp/>be<sp/>required<sp/>if<sp/>the<sp/>constructor<sp/>has</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>been<sp/>called<sp/>with<sp/>&quot;clean_memory_on_exit&quot;<sp/>to<sp/>true.<sp/>Yet,<sp/>maybe<sp/>useful<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="101" refid="classshared__memory_1_1Exchange__manager__consumer_1a5e62220c9b50327130cb95683d22b0dc" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>program<sp/>crashed<sp/>without<sp/>calling<sp/>the<sp/>destructor<sp/>as<sp/>it<sp/>should<sp/>have<sp/>had.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clean_mutex(std::string<sp/>segment_id);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>@brief<sp/>Unlock<sp/>and<sp/>delete<sp/>the<sp/>underlying<sp/>shared<sp/>memory<sp/>mutex.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Call<sp/>should<sp/>not<sp/>be<sp/>required<sp/>if<sp/>the<sp/>constructor<sp/>has</highlight></codeline>
<codeline lineno="107" refid="classshared__memory_1_1Exchange__manager__consumer_1ae3e006de034b55e328784d3eacfb1772" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>been<sp/>called<sp/>with<sp/>&quot;clean_memory_on_exit&quot;<sp/>to<sp/>true.<sp/>Yet,<sp/>maybe<sp/>useful<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>program<sp/>crashed<sp/>without<sp/>calling<sp/>the<sp/>destructor<sp/>as<sp/>it<sp/>should<sp/>have<sp/>had.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clean_memory(std::string<sp/>segment_id);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>do<sp/>all<sp/>shared<sp/>memory<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>Memory_ptr<sp/>memory_;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>clean<sp/>the<sp/>memory<sp/>at<sp/>destruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>each<sp/>time<sp/>a<sp/>producer<sp/>dies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>leading_;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consumes<sp/>lock<sp/>the<sp/>condition<sp/>variable<sp/>automatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>false:<sp/>the<sp/>lock<sp/>function<sp/>has<sp/>to<sp/>be<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autolock_;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>segment_id_;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>object_id_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;exchange_manager_consumer.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/shared_memory/exchange_manager_consumer.hpp"/>
  </compounddef>
</doxygen>
