<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classshared__memory_1_1Exchange__manager__producer" kind="class" language="C++" prot="public">
    <compoundname>shared_memory::Exchange_manager_producer</compoundname>
    <templateparamlist>
      <param>
        <type>class <ref refid="classSerializable" kindref="compound">Serializable</ref></type>
      </param>
      <param>
        <type>int</type>
        <declname>QUEUE_SIZE</declname>
        <defname>QUEUE_SIZE</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classshared__memory_1_1Exchange__manager__producer_1a65119cf07c0c10f167c191c9ee913029" prot="private" static="no">
        <type><ref refid="classshared__memory_1_1internal_1_1Exchange__manager__memory" kindref="compound">Exchange_manager_memory</ref>&lt; <ref refid="classSerializable" kindref="compound">Serializable</ref>, QUEUE_SIZE &gt;</type>
        <definition>typedef Exchange_manager_memory&lt;Serializable, QUEUE_SIZE&gt; shared_memory::Exchange_manager_producer&lt; Serializable, QUEUE_SIZE &gt;::Memory</definition>
        <argsstring></argsstring>
        <name>Memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="26" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshared__memory_1_1Exchange__manager__producer_1a7f3d7760ca2d1c01fa88e7a6447a38d7" prot="private" static="no">
        <type>std::shared_ptr&lt; <ref refid="classshared__memory_1_1internal_1_1Exchange__manager__memory" kindref="compound">Memory</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;Memory&gt; shared_memory::Exchange_manager_producer&lt; Serializable, QUEUE_SIZE &gt;::Memory_ptr</definition>
        <argsstring></argsstring>
        <name>Memory_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="27" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshared__memory_1_1Exchange__manager__producer_1a67f2a2c049dabace06c85a35335d1614" prot="private" static="no" mutable="no">
        <type>Memory_ptr</type>
        <definition>Memory_ptr shared_memory::Exchange_manager_producer&lt; Serializable, QUEUE_SIZE &gt;::memory_</definition>
        <argsstring></argsstring>
        <name>memory_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="110" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1Exchange__manager__producer_1a6d89b939f08bbb9180460a0fab2c877f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::Exchange_manager_producer&lt; Serializable, QUEUE_SIZE &gt;::autolock_</definition>
        <argsstring></argsstring>
        <name>autolock_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="111" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1Exchange__manager__producer_1a4c71d725b7b95e4dd00ecf68232d4ac9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::Exchange_manager_producer&lt; Serializable, QUEUE_SIZE &gt;::leading_</definition>
        <argsstring></argsstring>
        <name>leading_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="112" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1Exchange__manager__producer_1a96ce58e9619ac28b31b46a81c53c20c2" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string shared_memory::Exchange_manager_producer&lt; Serializable, QUEUE_SIZE &gt;::segment_id_</definition>
        <argsstring></argsstring>
        <name>segment_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="113" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1Exchange__manager__producer_1a57ea2e6076963223331f3b6e78cbbc05" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string shared_memory::Exchange_manager_producer&lt; Serializable, QUEUE_SIZE &gt;::object_id_</definition>
        <argsstring></argsstring>
        <name>object_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="114" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a3fb01ae44f85b9d8b4a22137f2da90f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Exchange_manager_producer::Exchange_manager_producer</definition>
        <argsstring>(std::string segment_id, std::string object_id, bool leading, bool autolock=true)</argsstring>
        <name>Exchange_manager_producer</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>leading</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>autolock</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>An exchange_manager_producer writes in the shared memory serialized items expected to be consumed by an instance of exchange_manager_consumer (which should use the same segment_id and object_id), possibly running in a separate process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the shared memory segment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the shared memory object prefix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>autolock</parametername>
</parameternamelist>
<parameterdescription>
<para>mutex locking mechanism internally managed by the producer. If false, lock has to be &quot;manually&quot; called. This allows for example to set several items in one shot </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clean_memory_on_exit.</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the destructor will clean the underlined shared memory items. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="43" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="4" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a2facf670e12bfea1d7c4900f3ffae7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Exchange_manager_producer::~Exchange_manager_producer</definition>
        <argsstring>()</argsstring>
        <name>~Exchange_manager_producer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="48" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="31" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a3ef5cfdd196a396edfd6ca502119f839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_producer::ready_to_produce</definition>
        <argsstring>()</argsstring>
        <name>ready_to_produce</name>
        <briefdescription>
<para>returns true if a consumer is also running. </para>        </briefdescription>
        <detaileddescription>
<para>&apos;set&apos; should be called only if ready_to_produce returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="53" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="52" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1aa39c8b921eeff081111c756bd6d2ca3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_producer::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
<para>lock the mutex required for writting in the shared memory without any collision with any consumer. </para>        </briefdescription>
        <detaileddescription>
<para>Should be called before calls to &quot;set&quot;. Not required if the constructor was called with autolock set to true </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="60" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a9c02040ee5ef8db658f3112ae4b3b969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_producer::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
<para>unlock the mutex for writting in the shared memory without any collision with any consumer. </para>        </briefdescription>
        <detaileddescription>
<para>Not required if the constructor was called with autolock set to true </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="66" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a0f86798dbbb5bead856c566257bd1b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_producer::set</definition>
        <argsstring>(const Serializable &amp;serializable)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classSerializable" kindref="compound">Serializable</ref> &amp;</type>
          <declname>serializable</declname>
        </param>
        <briefdescription>
<para>Set this serializable to be consumed. </para>        </briefdescription>
        <detaileddescription>
<para>Throws <ref refid="classshared__memory_1_1Memory__overflow__exception" kindref="compound">shared_memory::Memory_overflow_exception</ref> if the shared memory is full. Some of the shared memory should get free once items have been consumed by a consumer. This method should be called only if &apos;ready_to_produce&apos; returns true; Returns true if all data could be written in the shared memory, false if some data required to be buffered (any following call to set, if any, will perform a new attempt to write remaining buffer to the shared memory) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="78" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="105" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a733c4c3f794e10590569f94e3f320201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_producer::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>removed all elements from the shared queue </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="84" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1afd8afb25d70407b785484e68d1182c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_producer::get</definition>
        <argsstring>(std::deque&lt; int &gt; &amp;get_consumed_ids)</argsstring>
        <name>get</name>
        <param>
          <type>std::deque&lt; int &gt; &amp;</type>
          <declname>get_consumed_ids</declname>
        </param>
        <briefdescription>
<para>write into get_consumed_ids the ids of serialized items that have been successfully consumed by a consumer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="89" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="137" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1ab31e6b87ad4c856736dec15486ed4489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Exchange_manager_producer::nb_char_written</definition>
        <argsstring>()</argsstring>
        <name>nb_char_written</name>
        <briefdescription>
<para>returns the number of characters that have been serialized and written to the exchange queue. </para>        </briefdescription>
        <detaileddescription>
<para>For debug purposes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="95" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a742e8859608d49901d3dafbbe08e4674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_producer::reset_char_count</definition>
        <argsstring>()</argsstring>
        <name>reset_char_count</name>
        <briefdescription>
<para>reset the count of characters written to the exchange queue to zero </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="101" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a32172d2cbf30e1bcb2a45778063e6ff2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_producer::producer_queue_empty</definition>
        <argsstring>() const </argsstring>
        <name>producer_queue_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="103" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a208c79c39c9206b22aecb919eb0df87e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_producer::consumer_queue_empty</definition>
        <argsstring>() const </argsstring>
        <name>consumer_queue_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="104" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="189" bodyend="193"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a2148cfb2e9a1973089d81237ea5735b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_producer::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="107" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="44" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1af98fe4321e1fd280b509f5dfd2cf4a5b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_producer::clean_mutex</definition>
        <argsstring>(std::string segment_id)</argsstring>
        <name>clean_mutex</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
<para>(unlock) and erase the mutex from the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>To be used if some executable using the exchange manager crashed without calls to destructors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="121" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1Exchange__manager__producer_1a8574f4e075d6f755e567d21d04f24aab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_producer::clean_memory</definition>
        <argsstring>(std::string segment_id)</argsstring>
        <name>clean_memory</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
<para>wipe out the corresponding shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>To be used if some executable using the exchange manager crashed without calls to destructors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shared_memory/exchange_manager_producer.hpp" line="127" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="175" bodyend="179"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/shared_memory/exchange_manager_producer.hpp" line="25" column="1" bodyfile="include/shared_memory/exchange_manager_producer.hpp" bodystart="24" bodyend="128"/>
    <listofallmembers>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a6d89b939f08bbb9180460a0fab2c877f" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>autolock_</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a8574f4e075d6f755e567d21d04f24aab" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>clean_memory</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1af98fe4321e1fd280b509f5dfd2cf4a5b" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>clean_mutex</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a733c4c3f794e10590569f94e3f320201" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>clear</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a208c79c39c9206b22aecb919eb0df87e" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>consumer_queue_empty</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a3fb01ae44f85b9d8b4a22137f2da90f1" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>Exchange_manager_producer</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1afd8afb25d70407b785484e68d1182c0b" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>get</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a4c71d725b7b95e4dd00ecf68232d4ac9" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>leading_</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1aa39c8b921eeff081111c756bd6d2ca3d" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>lock</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a65119cf07c0c10f167c191c9ee913029" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>Memory</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a67f2a2c049dabace06c85a35335d1614" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>memory_</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a7f3d7760ca2d1c01fa88e7a6447a38d7" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>Memory_ptr</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1ab31e6b87ad4c856736dec15486ed4489" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>nb_char_written</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a57ea2e6076963223331f3b6e78cbbc05" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>object_id_</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a32172d2cbf30e1bcb2a45778063e6ff2" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>producer_queue_empty</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a3ef5cfdd196a396edfd6ca502119f839" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>ready_to_produce</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a2148cfb2e9a1973089d81237ea5735b9" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>reset</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a742e8859608d49901d3dafbbe08e4674" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>reset_char_count</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a96ce58e9619ac28b31b46a81c53c20c2" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>segment_id_</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a0f86798dbbb5bead856c566257bd1b07" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>set</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a9c02040ee5ef8db658f3112ae4b3b969" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>unlock</name></member>
      <member refid="classshared__memory_1_1Exchange__manager__producer_1a2facf670e12bfea1d7c4900f3ffae7d7" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_producer</scope><name>~Exchange_manager_producer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
