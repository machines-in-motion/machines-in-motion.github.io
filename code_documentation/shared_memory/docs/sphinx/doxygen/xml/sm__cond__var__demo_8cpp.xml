<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="sm__cond__var__demo_8cpp" kind="file" language="C++">
    <compoundname>sm_cond_var_demo.cpp</compoundname>
    <includes local="no">unistd.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">iostream</includes>
    <includes local="no">thread</includes>
    <includes local="no">vector</includes>
    <includes refid="condition__variable_8hpp" local="yes">shared_memory/condition_variable.hpp</includes>
    <includes refid="lock_8hpp" local="yes">shared_memory/lock.hpp</includes>
    <includes refid="mutex_8hpp" local="yes">shared_memory/mutex.hpp</includes>
    <incdepgraph>
      <node id="2359">
        <label>atomic</label>
      </node>
      <node id="2388">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx"/>
      </node>
      <node id="2384">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="2383">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="2384" relation="include">
        </childnode>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2381" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2388" relation="include">
        </childnode>
      </node>
      <node id="2389">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="2369" relation="include">
        </childnode>
      </node>
      <node id="2365">
        <label>boost/interprocess/sync/scoped_lock.hpp</label>
      </node>
      <node id="2366">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp"/>
        <childnode refid="2367" relation="include">
        </childnode>
        <childnode refid="2368" relation="include">
        </childnode>
        <childnode refid="2369" relation="include">
        </childnode>
      </node>
      <node id="2376">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="2372">
        <label>string</label>
      </node>
      <node id="2369">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="2360" relation="include">
        </childnode>
        <childnode refid="2370" relation="include">
        </childnode>
        <childnode refid="2371" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
        <childnode refid="2362" relation="include">
        </childnode>
        <childnode refid="2373" relation="include">
        </childnode>
        <childnode refid="2374" relation="include">
        </childnode>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
        <childnode refid="2379" relation="include">
        </childnode>
        <childnode refid="2382" relation="include">
        </childnode>
        <childnode refid="2383" relation="include">
        </childnode>
        <childnode refid="2389" relation="include">
        </childnode>
      </node>
      <node id="2370">
        <label>map</label>
      </node>
      <node id="2363">
        <label>shared_memory/condition_variable.hpp</label>
        <link refid="condition__variable_8hpp"/>
        <childnode refid="2364" relation="include">
        </childnode>
        <childnode refid="2390" relation="include">
        </childnode>
      </node>
      <node id="2380">
        <label>exception</label>
      </node>
      <node id="2390">
        <label>boost/interprocess/sync/named_condition.hpp</label>
      </node>
      <node id="2382">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp"/>
        <childnode refid="2378" relation="include">
        </childnode>
        <childnode refid="2360" relation="include">
        </childnode>
      </node>
      <node id="2377">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="2367">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="2358">
        <label>unistd.h</label>
      </node>
      <node id="2362">
        <label>vector</label>
      </node>
      <node id="2375">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="2387">
        <label>utility</label>
      </node>
      <node id="2381">
        <label>sstream</label>
      </node>
      <node id="2364">
        <label>shared_memory/lock.hpp</label>
        <link refid="lock_8hpp"/>
        <childnode refid="2365" relation="include">
        </childnode>
        <childnode refid="2366" relation="include">
        </childnode>
      </node>
      <node id="2374">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="2360">
        <label>iostream</label>
      </node>
      <node id="2371">
        <label>mutex</label>
      </node>
      <node id="2373">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="2361">
        <label>thread</label>
      </node>
      <node id="2357">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp</label>
        <link refid="sm_cond_var_demo.cpp"/>
        <childnode refid="2358" relation="include">
        </childnode>
        <childnode refid="2359" relation="include">
        </childnode>
        <childnode refid="2360" relation="include">
        </childnode>
        <childnode refid="2361" relation="include">
        </childnode>
        <childnode refid="2362" relation="include">
        </childnode>
        <childnode refid="2363" relation="include">
        </childnode>
        <childnode refid="2364" relation="include">
        </childnode>
        <childnode refid="2366" relation="include">
        </childnode>
      </node>
      <node id="2385">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="2378">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="2386">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="2368">
        <label>memory</label>
      </node>
      <node id="2379">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="2380" relation="include">
        </childnode>
        <childnode refid="2360" relation="include">
        </childnode>
        <childnode refid="2381" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_config" prot="public">Config</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="sm__cond__var__demo_8cpp_1a9a974e4caa0215b6dac5d6135458415d" prot="public" static="no">
        <name>MUTEX_ID</name>
        <initializer>&quot;sm_cond_var_demo_mutex&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" line="11" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sm__cond__var__demo_8cpp_1af6149f829b753316a15dae5f4c1bf984" prot="public" static="no">
        <name>CV_SEGMENT_ID</name>
        <initializer>&quot;sm_cond_var_demo_segment&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" line="12" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sm__cond__var__demo_8cpp_1a29b4a301f6a323f1eb8cbb0de3c9218b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* update_vector_async</definition>
        <argsstring>(void *config_)</argsstring>
        <name>update_vector_async</name>
        <param>
          <type>void *</type>
          <declname>config_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" line="22" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" bodystart="22" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="sm__cond__var__demo_8cpp_1ab1a8566f9515d591ff504e9bc81668b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* update_vector</definition>
        <argsstring>(void *config_)</argsstring>
        <name>update_vector</name>
        <param>
          <type>void *</type>
          <declname>config_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" line="64" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" bodystart="64" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="sm__cond__var__demo_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" line="105" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp" bodystart="105" bodyend="137"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="condition__variable_8hpp" kindref="compound">shared_memory/condition_variable.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lock_8hpp" kindref="compound">shared_memory/lock.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mutex_8hpp" kindref="compound">shared_memory/mutex.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUTEX_ID<sp/>&quot;sm_cond_var_demo_mutex&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CV_SEGMENT_ID<sp/>&quot;sm_cond_var_demo_segment&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_config" kindref="compound">Config</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_config_1a0ed2027733c661de1fae2dbe70146ab4" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_config_1a05d75fea9600b821909ef25e947b3167" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic&lt;bool&gt;<sp/>*<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="sm__cond__var__demo_8cpp_1a29b4a301f6a323f1eb8cbb0de3c9218b" kindref="member">update_vector_async</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*config_)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(1000000);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex" kindref="compound">shared_memory::Mutex</ref><sp/><ref refid="class_config_1abacf2bdd32d425c995c2ba5b16a896bd" kindref="member">mutex</ref>(<ref refid="sm__cond__var__demo_8cpp_1a9a974e4caa0215b6dac5d6135458415d" kindref="member">MUTEX_ID</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_condition_variable" kindref="compound">shared_memory::ConditionVariable</ref><sp/><ref refid="class_config_1aa701cf3ea7f432c2879698446754d320" kindref="member">condition</ref>(<ref refid="sm__cond__var__demo_8cpp_1af6149f829b753316a15dae5f4c1bf984" kindref="member">CV_SEGMENT_ID</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_config" kindref="compound">Config</ref><sp/>*config<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_config" kindref="compound">Config</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(config_);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*config-&gt;<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_config_1abacf2bdd32d425c995c2ba5b16a896bd" kindref="member">mutex</ref>.lock();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>config-&gt;<ref refid="class_config_1a05d75fea9600b821909ef25e947b3167" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>config-&gt;<ref refid="class_config_1a0ed2027733c661de1fae2dbe70146ab4" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(500);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>!=<sp/>config-&gt;<ref refid="class_config_1a0ed2027733c661de1fae2dbe70146ab4" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>damn,<sp/>the<sp/>vector<sp/>was<sp/>not<sp/>locked<sp/>!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v[i];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_config_1abacf2bdd32d425c995c2ba5b16a896bd" kindref="member">mutex</ref>.unlock();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_config_1aa701cf3ea7f432c2879698446754d320" kindref="member">condition</ref>.notify_one();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(10);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="sm__cond__var__demo_8cpp_1ab1a8566f9515d591ff504e9bc81668b6" kindref="member">update_vector</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*config_)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_config" kindref="compound">Config</ref><sp/>*config<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_config" kindref="compound">Config</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(config_);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(1000000);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex" kindref="compound">shared_memory::Mutex</ref><sp/><ref refid="class_config_1abacf2bdd32d425c995c2ba5b16a896bd" kindref="member">mutex</ref>(<ref refid="sm__cond__var__demo_8cpp_1a9a974e4caa0215b6dac5d6135458415d" kindref="member">MUTEX_ID</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_condition_variable" kindref="compound">shared_memory::ConditionVariable</ref><sp/><ref refid="class_config_1aa701cf3ea7f432c2879698446754d320" kindref="member">condition</ref>(<ref refid="sm__cond__var__demo_8cpp_1af6149f829b753316a15dae5f4c1bf984" kindref="member">CV_SEGMENT_ID</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*config-&gt;<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_lock" kindref="compound">shared_memory::Lock</ref><sp/>lock(<ref refid="class_config_1abacf2bdd32d425c995c2ba5b16a896bd" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_config_1aa701cf3ea7f432c2879698446754d320" kindref="member">condition</ref>.wait(lock);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>config-&gt;<ref refid="class_config_1a05d75fea9600b821909ef25e947b3167" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>config-&gt;<ref refid="class_config_1a0ed2027733c661de1fae2dbe70146ab4" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(500);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>!=<sp/>config-&gt;<ref refid="class_config_1a0ed2027733c661de1fae2dbe70146ab4" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n---<sp/>damn,<sp/>the<sp/>vector<sp/>was<sp/>not<sp/>locked<sp/>!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v[i];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_config_1aa701cf3ea7f432c2879698446754d320" kindref="member">condition</ref>.notify_one();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sm__cond__var__demo_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex_1a964e89132bb180569edcf52de5b43978" kindref="member">shared_memory::Mutex::clean</ref>(<ref refid="sm__cond__var__demo_8cpp_1a9a974e4caa0215b6dac5d6135458415d" kindref="member">MUTEX_ID</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic&lt;bool&gt;<sp/><ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_config" kindref="compound">Config</ref><sp/>config1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>config1.<ref refid="class_config_1a0ed2027733c661de1fae2dbe70146ab4" kindref="member">value</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>config1.<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref><sp/>=<sp/>&amp;<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>config1.<ref refid="class_config_1a05d75fea9600b821909ef25e947b3167" kindref="member">message</ref><sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;ping&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>thread1(<ref refid="sm__cond__var__demo_8cpp_1ab1a8566f9515d591ff504e9bc81668b6" kindref="member">update_vector</ref>,<sp/>&amp;config1);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_config" kindref="compound">Config</ref><sp/>config2;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>config2.<ref refid="class_config_1a0ed2027733c661de1fae2dbe70146ab4" kindref="member">value</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>config2.<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref><sp/>=<sp/>&amp;<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>config2.<ref refid="class_config_1a05d75fea9600b821909ef25e947b3167" kindref="member">message</ref><sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;pong&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>thread2(<ref refid="sm__cond__var__demo_8cpp_1ab1a8566f9515d591ff504e9bc81668b6" kindref="member">update_vector</ref>,<sp/>&amp;config2);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_config" kindref="compound">Config</ref><sp/>config3;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>config3.<ref refid="class_config_1a0ed2027733c661de1fae2dbe70146ab4" kindref="member">value</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>config3.<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref><sp/>=<sp/>&amp;<ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>config3.<ref refid="class_config_1a05d75fea9600b821909ef25e947b3167" kindref="member">message</ref><sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;pung&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>thread3(<ref refid="sm__cond__var__demo_8cpp_1a29b4a301f6a323f1eb8cbb0de3c9218b" kindref="member">update_vector_async</ref>,<sp/>&amp;config3);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(5000000);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tSTOPPING!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_config_1a32ce04a94d39445c2c35dc28e03006ef" kindref="member">running</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>thread1.join();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>thread2.join();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>thread3.join();</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp"/>
  </compounddef>
</doxygen>
