<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cond__var__ping_8cpp" kind="file" language="C++">
    <compoundname>cond_var_ping.cpp</compoundname>
    <includes local="no">unistd.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">iostream</includes>
    <includes local="no">thread</includes>
    <includes local="no">vector</includes>
    <includes refid="condition__variable_8hpp" local="yes">shared_memory/condition_variable.hpp</includes>
    <includes refid="lock_8hpp" local="yes">shared_memory/lock.hpp</includes>
    <includes refid="mutex_8hpp" local="yes">shared_memory/mutex.hpp</includes>
    <incdepgraph>
      <node id="1815">
        <label>atomic</label>
      </node>
      <node id="1844">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx"/>
      </node>
      <node id="1813">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp</label>
        <link refid="cond_var_ping.cpp"/>
        <childnode refid="1814" relation="include">
        </childnode>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1816" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
        <childnode refid="1820" relation="include">
        </childnode>
        <childnode refid="1822" relation="include">
        </childnode>
      </node>
      <node id="1840">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="1839">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="1840" relation="include">
        </childnode>
        <childnode refid="1841" relation="include">
        </childnode>
        <childnode refid="1842" relation="include">
        </childnode>
        <childnode refid="1837" relation="include">
        </childnode>
        <childnode refid="1843" relation="include">
        </childnode>
        <childnode refid="1844" relation="include">
        </childnode>
      </node>
      <node id="1845">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="1825" relation="include">
        </childnode>
      </node>
      <node id="1821">
        <label>boost/interprocess/sync/scoped_lock.hpp</label>
      </node>
      <node id="1822">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp"/>
        <childnode refid="1823" relation="include">
        </childnode>
        <childnode refid="1824" relation="include">
        </childnode>
        <childnode refid="1825" relation="include">
        </childnode>
      </node>
      <node id="1832">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="1828">
        <label>string</label>
      </node>
      <node id="1825">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="1816" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1827" relation="include">
        </childnode>
        <childnode refid="1828" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1829" relation="include">
        </childnode>
        <childnode refid="1830" relation="include">
        </childnode>
        <childnode refid="1831" relation="include">
        </childnode>
        <childnode refid="1832" relation="include">
        </childnode>
        <childnode refid="1833" relation="include">
        </childnode>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1835" relation="include">
        </childnode>
        <childnode refid="1838" relation="include">
        </childnode>
        <childnode refid="1839" relation="include">
        </childnode>
        <childnode refid="1845" relation="include">
        </childnode>
      </node>
      <node id="1826">
        <label>map</label>
      </node>
      <node id="1819">
        <label>shared_memory/condition_variable.hpp</label>
        <link refid="condition__variable_8hpp"/>
        <childnode refid="1820" relation="include">
        </childnode>
        <childnode refid="1846" relation="include">
        </childnode>
      </node>
      <node id="1836">
        <label>exception</label>
      </node>
      <node id="1846">
        <label>boost/interprocess/sync/named_condition.hpp</label>
      </node>
      <node id="1838">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp"/>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1816" relation="include">
        </childnode>
      </node>
      <node id="1833">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="1823">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="1814">
        <label>unistd.h</label>
      </node>
      <node id="1818">
        <label>vector</label>
      </node>
      <node id="1831">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="1843">
        <label>utility</label>
      </node>
      <node id="1837">
        <label>sstream</label>
      </node>
      <node id="1820">
        <label>shared_memory/lock.hpp</label>
        <link refid="lock_8hpp"/>
        <childnode refid="1821" relation="include">
        </childnode>
        <childnode refid="1822" relation="include">
        </childnode>
      </node>
      <node id="1830">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="1816">
        <label>iostream</label>
      </node>
      <node id="1827">
        <label>mutex</label>
      </node>
      <node id="1829">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="1817">
        <label>thread</label>
      </node>
      <node id="1841">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="1834">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="1842">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="1824">
        <label>memory</label>
      </node>
      <node id="1835">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="1836" relation="include">
        </childnode>
        <childnode refid="1816" relation="include">
        </childnode>
        <childnode refid="1837" relation="include">
        </childnode>
        <childnode refid="1828" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="cond__var__ping_8cpp_1a9a974e4caa0215b6dac5d6135458415d" prot="public" static="no">
        <name>MUTEX_ID</name>
        <initializer>&quot;sm_cond_var_demo_mutex&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" line="11" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cond__var__ping_8cpp_1af6149f829b753316a15dae5f4c1bf984" prot="public" static="no">
        <name>CV_SEGMENT_ID</name>
        <initializer>&quot;sm_cond_var_demo_segment&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" line="12" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cond__var__ping_8cpp_1af1f9f04839ff14f81f82a9ae7b89077c" prot="public" static="no">
        <name>RUNNING_SEGMENT_ID</name>
        <initializer>&quot;sm_running_demo_segment&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" line="13" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cond__var__ping_8cpp_1a2b216b5d0c4f0818ad3a3ca00f1369f1" prot="public" static="no">
        <name>RUNNING_OBJECT_ID</name>
        <initializer>&quot;sm_running_demo_object&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" line="14" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cond__var__ping_8cpp_1aa0b03826c8f7cc324ac2db0ada2dce0a" prot="public" static="no">
        <name>VALUE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" line="15" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cond__var__ping_8cpp_1ac30f9ca2626f9787330a7ccac3d57baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool should_run</definition>
        <argsstring>()</argsstring>
        <name>should_run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" line="17" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" bodystart="17" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="cond__var__ping_8cpp_1a7417052f32231c4db7d7632b827704b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_vector</definition>
        <argsstring>()</argsstring>
        <name>update_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" line="24" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" bodystart="24" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="cond__var__ping_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" line="74" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="condition__variable_8hpp" kindref="compound">shared_memory/condition_variable.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lock_8hpp" kindref="compound">shared_memory/lock.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mutex_8hpp" kindref="compound">shared_memory/mutex.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUTEX_ID<sp/>&quot;sm_cond_var_demo_mutex&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CV_SEGMENT_ID<sp/>&quot;sm_cond_var_demo_segment&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RUNNING_SEGMENT_ID<sp/>&quot;sm_running_demo_segment&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RUNNING_OBJECT_ID<sp/>&quot;sm_running_demo_object&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VALUE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cond__var__ping_8cpp_1ac30f9ca2626f9787330a7ccac3d57baf" kindref="member">should_run</ref>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>running;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::get&lt;bool&gt;(<ref refid="cond__var__ping_8cpp_1af1f9f04839ff14f81f82a9ae7b89077c" kindref="member">RUNNING_SEGMENT_ID</ref>,<sp/><ref refid="cond__var__ping_8cpp_1a2b216b5d0c4f0818ad3a3ca00f1369f1" kindref="member">RUNNING_OBJECT_ID</ref>,<sp/>running);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>running;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cond__var__ping_8cpp_1a7417052f32231c4db7d7632b827704b8" kindref="member">update_vector</ref>()</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(1000000);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex_1a964e89132bb180569edcf52de5b43978" kindref="member">shared_memory::Mutex::clean</ref>(<ref refid="cond__var__ping_8cpp_1a9a974e4caa0215b6dac5d6135458415d" kindref="member">MUTEX_ID</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshared__memory_1aa8583540879db53fc80b31410b5eec68" kindref="member">shared_memory::clear_shared_memory</ref>(<ref refid="cond__var__ping_8cpp_1af1f9f04839ff14f81f82a9ae7b89077c" kindref="member">RUNNING_SEGMENT_ID</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex" kindref="compound">shared_memory::Mutex</ref><sp/>mutex(<ref refid="cond__var__ping_8cpp_1a9a974e4caa0215b6dac5d6135458415d" kindref="member">MUTEX_ID</ref>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_condition_variable" kindref="compound">shared_memory::ConditionVariable</ref><sp/>condition(<ref refid="cond__var__ping_8cpp_1af6149f829b753316a15dae5f4c1bf984" kindref="member">CV_SEGMENT_ID</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::set&lt;bool&gt;(<ref refid="cond__var__ping_8cpp_1af1f9f04839ff14f81f82a9ae7b89077c" kindref="member">RUNNING_SEGMENT_ID</ref>,<sp/><ref refid="cond__var__ping_8cpp_1a2b216b5d0c4f0818ad3a3ca00f1369f1" kindref="member">RUNNING_OBJECT_ID</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nwaiting<sp/>for<sp/>pong<sp/>...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_iteration<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(first_iteration<sp/>||<sp/><ref refid="cond__var__ping_8cpp_1ac30f9ca2626f9787330a7ccac3d57baf" kindref="member">should_run</ref>())</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_iteration<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_lock" kindref="compound">shared_memory::Lock</ref><sp/>lock(mutex);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition.wait(lock);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PING<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/><ref refid="cond__var__ping_8cpp_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(500);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>!=<sp/><ref refid="cond__var__ping_8cpp_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n---<sp/>damn,<sp/>the<sp/>vector<sp/>was<sp/>not<sp/>locked<sp/>!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v[i];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition.notify_one();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshared__memory_1aa8583540879db53fc80b31410b5eec68" kindref="member">shared_memory::clear_shared_memory</ref>(RUNNING_SEGMENT_ID);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cond__var__ping_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cond__var__ping_8cpp_1a7417052f32231c4db7d7632b827704b8" kindref="member">update_vector</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp"/>
  </compounddef>
</doxygen>
