<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classshared__memory_1_1_exchange__manager__consumer" kind="class" language="C++" prot="public">
    <compoundname>shared_memory::Exchange_manager_consumer</compoundname>
    <includes refid="exchange__manager__consumer_8hpp" local="no">exchange_manager_consumer.hpp</includes>
    <templateparamlist>
      <param>
        <type>class <ref refid="class_serializable" kindref="compound">Serializable</ref></type>
      </param>
      <param>
        <type>int</type>
        <declname>QUEUE_SIZE</declname>
        <defname>QUEUE_SIZE</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classshared__memory_1_1_exchange__manager__consumer_1a1699ba86d1d5b943d428fc1b391abd42" prot="private" static="no">
        <type><ref refid="classshared__memory_1_1internal_1_1_exchange__manager__memory" kindref="compound">Exchange_manager_memory</ref>&lt; <ref refid="class_serializable" kindref="compound">Serializable</ref>, <ref refid="exchange__manager__producer_8cpp_1a142810068f1b99cd93d3fc9f0e160e02" kindref="member">QUEUE_SIZE</ref> &gt;</type>
        <definition>typedef Exchange_manager_memory&lt;Serializable, QUEUE_SIZE&gt; shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::Memory</definition>
        <argsstring></argsstring>
        <name>Memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="25" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshared__memory_1_1_exchange__manager__consumer_1a92ad5c787b53c26d5b3c75712ca539f3" prot="private" static="no">
        <type>std::shared_ptr&lt; <ref refid="classshared__memory_1_1_exchange__manager__consumer_1a1699ba86d1d5b943d428fc1b391abd42" kindref="member">Memory</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;Memory&gt; shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::Memory_ptr</definition>
        <argsstring></argsstring>
        <name>Memory_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="26" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshared__memory_1_1_exchange__manager__consumer_1a65f7ea81649be03ac11b11bc998d5047" prot="private" static="no" mutable="no">
        <type><ref refid="classshared__memory_1_1_exchange__manager__consumer_1a92ad5c787b53c26d5b3c75712ca539f3" kindref="member">Memory_ptr</ref></type>
        <definition>Memory_ptr shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::memory_</definition>
        <argsstring></argsstring>
        <name>memory_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="117" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1_exchange__manager__consumer_1a3d2838c1a3e709dafe1c941f217d8f54" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::leading_</definition>
        <argsstring></argsstring>
        <name>leading_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="121" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1_exchange__manager__consumer_1a6ea7ce15b0da981027f80d3d35825593" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::autolock_</definition>
        <argsstring></argsstring>
        <name>autolock_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="125" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1_exchange__manager__consumer_1a830f88a2c6f6d3cf6e0c83353a436742" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::segment_id_</definition>
        <argsstring></argsstring>
        <name>segment_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="127" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1_exchange__manager__consumer_1afbde973522ab55b0a3c49ef6f26fbba5" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::object_id_</definition>
        <argsstring></argsstring>
        <name>object_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="128" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1a15b2b91e57fb8c9c60ec354274edf20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Exchange_manager_consumer::Exchange_manager_consumer</definition>
        <argsstring>(std::string segment_id, std::string object_id, bool leading, bool autolock=true)</argsstring>
        <name>Exchange_manager_consumer</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>leading</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>autolock</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>An exchange_manager_consumer reads from the shared memory serialized items produced by an instance of exchange_manager_producer (which should use the same segment_id and object_id), possibly running in a separate process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the shared memory segment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the shared memory object prefix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>consumer is to be &quot;permanent&quot;, while different producers may provide data. Implies the deletion of the underlying share memory upon destruction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>locking mechanism internally managed by the producer. If false, lock has to be &quot;manually&quot; called. This allows for example to set several items in one shot </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="43" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="5" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1a163df4d7e66a1cae7d0b0cb5f7692c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Exchange_manager_consumer::~Exchange_manager_consumer</definition>
        <argsstring>()</argsstring>
        <name>~Exchange_manager_consumer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="48" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="32" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1a1ec59bb41c9de78eb891ea70efe6b8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_consumer::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
<para>lock the mutex required for writting in the shared memory without any collision with any producer. </para>        </briefdescription>
        <detaileddescription>
<para>Should be called before calls to &quot;consume&quot;. Not required if the constructor was called with autolock set to true </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="55" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1aaf053702ec1ef8455fc10e70144f6923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_consumer::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
<para>unlock the mutex for writting in the shared memory without any collision with any producer. </para>        </briefdescription>
        <detaileddescription>
<para>Not required if the constructor was called with autolock set to true </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="61" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1ae3e006de034b55e328784d3eacfb1772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_consumer::consume</definition>
        <argsstring>(Serializable &amp;serializable)</argsstring>
        <name>consume</name>
        <param>
          <type><ref refid="class_serializable" kindref="compound">Serializable</ref> &amp;</type>
          <declname>serializable</declname>
        </param>
        <briefdescription>
<para>read from the underlying shared memory a serialized object (set by a producer). </para>        </briefdescription>
        <detaileddescription>
<para>Should be called only if ready_to_consume returns true. <simplesect kind="return"><para>true if an item has been read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="68" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="107" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1af1a894d796387d297f848d18d8d55df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_consumer::ready_to_consume</definition>
        <argsstring>()</argsstring>
        <name>ready_to_consume</name>
        <briefdescription>
<para>returns true if a producer is also running. </para>        </briefdescription>
        <detaileddescription>
<para>&apos;consume&apos; should be called only if ready_to_consume returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="73" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="46" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1a5e62220c9b50327130cb95683d22b0dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_consumer::purge_feedbacks</definition>
        <argsstring>()</argsstring>
        <name>purge_feedbacks</name>
        <briefdescription>
<para>When this instance consumes an item, the item id is written in a shared queue for the producer to read (and acquire the feedback the item has been consumed). </para>        </briefdescription>
        <detaileddescription>
<para>This shared queue may get full (e.g the producer does not read it fast enough), in which case the item id is buffered in this instance. If this instance stops to consume, the buffered item ids will never be written in the shared queue, and the producer will not receive the corresponding feedback. This attempts to write the buffered ids into the queue, and returns true if the buffer is not empty after the call (i.e. some feedbacks have not been sent yet), false otherwise. Usage: to call before exit until true is returned </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="86" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1ab8651cff750b5cb2ceae97a97b2c7f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Exchange_manager_consumer::nb_char_read</definition>
        <argsstring>()</argsstring>
        <name>nb_char_read</name>
        <briefdescription>
<para>returns the number of char that have been read from the exchange queue. </para>        </briefdescription>
        <detaileddescription>
<para>For debugging purposes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="92" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1ad7d4cd68db87b53a0fe45f08c4adb647" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_consumer::is_producer_queue_empty</definition>
        <argsstring>() const </argsstring>
        <name>is_producer_queue_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="94" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1a5d50ce37fd9464f45b973f6e96b81ba3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Exchange_manager_consumer::is_consumer_queue_empty</definition>
        <argsstring>() const </argsstring>
        <name>is_consumer_queue_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="95" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1a5aeebd5f2857f73c91fe3212d274909e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::clean_mutex</definition>
        <argsstring>(std::string segment_id)</argsstring>
        <name>clean_mutex</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1a828a56d15a0f68edd8e3b395c41b0c0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void shared_memory::Exchange_manager_consumer&lt; Serializable, QUEUE_SIZE &gt;::clean_memory</definition>
        <argsstring>(std::string segment_id)</argsstring>
        <name>clean_memory</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="110" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classshared__memory_1_1_exchange__manager__consumer_1a7543d28030c9c3e17b8fd60facc917b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exchange_manager_consumer::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="113" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="93" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" line="24" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp" bodystart="23" bodyend="129"/>
    <listofallmembers>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a6ea7ce15b0da981027f80d3d35825593" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>autolock_</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a828a56d15a0f68edd8e3b395c41b0c0c" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>clean_memory</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a5aeebd5f2857f73c91fe3212d274909e" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>clean_mutex</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1ae3e006de034b55e328784d3eacfb1772" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>consume</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a15b2b91e57fb8c9c60ec354274edf20d" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>Exchange_manager_consumer</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a5d50ce37fd9464f45b973f6e96b81ba3" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>is_consumer_queue_empty</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1ad7d4cd68db87b53a0fe45f08c4adb647" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>is_producer_queue_empty</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a3d2838c1a3e709dafe1c941f217d8f54" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>leading_</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a1ec59bb41c9de78eb891ea70efe6b8c2" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>lock</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a1699ba86d1d5b943d428fc1b391abd42" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>Memory</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a65f7ea81649be03ac11b11bc998d5047" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>memory_</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a92ad5c787b53c26d5b3c75712ca539f3" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>Memory_ptr</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1ab8651cff750b5cb2ceae97a97b2c7f2d" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>nb_char_read</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1afbde973522ab55b0a3c49ef6f26fbba5" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>object_id_</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a5e62220c9b50327130cb95683d22b0dc" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>purge_feedbacks</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1af1a894d796387d297f848d18d8d55df5" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>ready_to_consume</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a7543d28030c9c3e17b8fd60facc917b2" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>reset</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a830f88a2c6f6d3cf6e0c83353a436742" prot="private" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>segment_id_</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1aaf053702ec1ef8455fc10e70144f6923" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>unlock</name></member>
      <member refid="classshared__memory_1_1_exchange__manager__consumer_1a163df4d7e66a1cae7d0b0cb5f7692c59" prot="public" virt="non-virtual"><scope>shared_memory::Exchange_manager_consumer</scope><name>~Exchange_manager_consumer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
