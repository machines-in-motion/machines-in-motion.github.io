<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceshared__memory" kind="namespace" language="C++">
    <compoundname>shared_memory</compoundname>
    <innerclass refid="classshared__memory_1_1_allocation__exception" prot="public">shared_memory::Allocation_exception</innerclass>
    <innerclass refid="classshared__memory_1_1array" prot="public">shared_memory::array</innerclass>
    <innerclass refid="classshared__memory_1_1_condition_variable" prot="public">shared_memory::ConditionVariable</innerclass>
    <innerclass refid="classshared__memory_1_1_exchange__manager__consumer" prot="public">shared_memory::Exchange_manager_consumer</innerclass>
    <innerclass refid="classshared__memory_1_1_exchange__manager__producer" prot="public">shared_memory::Exchange_manager_producer</innerclass>
    <innerclass refid="classshared__memory_1_1_four__int__values" prot="public">shared_memory::Four_int_values</innerclass>
    <innerclass refid="classshared__memory_1_1_item" prot="public">shared_memory::Item</innerclass>
    <innerclass refid="classshared__memory_1_1_lock" prot="public">shared_memory::Lock</innerclass>
    <innerclass refid="classshared__memory_1_1_locked_condition_variable" prot="public">shared_memory::LockedConditionVariable</innerclass>
    <innerclass refid="classshared__memory_1_1_memory__overflow__exception" prot="public">shared_memory::Memory_overflow_exception</innerclass>
    <innerclass refid="classshared__memory_1_1_mutex" prot="public">shared_memory::Mutex</innerclass>
    <innerclass refid="classshared__memory_1_1_not__consumed__exception" prot="public">shared_memory::Not_consumed_exception</innerclass>
    <innerclass refid="classshared__memory_1_1_segment_info" prot="public">shared_memory::SegmentInfo</innerclass>
    <innerclass refid="classshared__memory_1_1_serializable__exchange" prot="public">shared_memory::Serializable_exchange</innerclass>
    <innerclass refid="classshared__memory_1_1_serializer" prot="public">shared_memory::Serializer</innerclass>
    <innerclass refid="classshared__memory_1_1_shared_memory_segment" prot="public">shared_memory::SharedMemorySegment</innerclass>
    <innerclass refid="structshared__memory_1_1_shm_type_helper" prot="public">shared_memory::ShmTypeHelper</innerclass>
    <innerclass refid="classshared__memory_1_1_unexpected__map__key" prot="public">shared_memory::Unexpected_map_key</innerclass>
    <innerclass refid="classshared__memory_1_1_unexpected__size__exception" prot="public">shared_memory::Unexpected_size_exception</innerclass>
    <innernamespace refid="namespaceshared__memory_1_1internal">shared_memory::internal</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceshared__memory_1a98598a317e2364e30dec871c52491d3c" prot="public" static="no">
        <type>boost::interprocess::named_condition</type>
        <definition>typedef boost::interprocess::named_condition shared_memory::SHMCondition</definition>
        <argsstring></argsstring>
        <name>SHMCondition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/condition_variable.hpp" line="12" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/condition_variable.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1af5f7fb7bbbc4c6334d59d0cd09f3ba85" prot="public" static="no">
        <type>std::integral_constant&lt; int, 0 &gt;</type>
        <definition>typedef std::integral_constant&lt;int, 0&gt; shared_memory::SERIALIZABLE</definition>
        <argsstring></argsstring>
        <name>SERIALIZABLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/internal/array_members.hpp" line="10" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/internal/array_members.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a391f1de569d6b76979d6ff4591513bfd" prot="public" static="no">
        <type>std::integral_constant&lt; int, 1 &gt;</type>
        <definition>typedef std::integral_constant&lt;int, 1&gt; shared_memory::FUNDAMENTAL</definition>
        <argsstring></argsstring>
        <name>FUNDAMENTAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/internal/array_members.hpp" line="11" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/internal/array_members.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a641fa51f2069f15b1dfb114e630fc1ba" prot="public" static="no">
        <type>std::integral_constant&lt; int, 2 &gt;</type>
        <definition>typedef std::integral_constant&lt;int, 2&gt; shared_memory::FUNDAMENTAL_ARRAY</definition>
        <argsstring></argsstring>
        <name>FUNDAMENTAL_ARRAY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/internal/array_members.hpp" line="12" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/internal/array_members.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1aa1e27e85804c1f1c0b7c1bf077add7bf" prot="public" static="no">
        <type>boost::interprocess::scoped_lock&lt; <ref refid="namespaceshared__memory_1a9e455ab41b63e529ceca7424dbf13ba1" kindref="member">SHMMutex</ref> &gt;</type>
        <definition>typedef boost::interprocess::scoped_lock&lt; SHMMutex &gt; shared_memory::SHMScopeLock</definition>
        <argsstring></argsstring>
        <name>SHMScopeLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/lock.hpp" line="11" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/lock.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a2a3aa667d92610e695d7948a834172f1" prot="public" static="no">
        <type>boost::interprocess::interprocess_mutex</type>
        <definition>typedef boost::interprocess::interprocess_mutex shared_memory::UnamedSHMMutex</definition>
        <argsstring></argsstring>
        <name>UnamedSHMMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/locked_condition_variable.hpp" line="19" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/locked_condition_variable.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a83b64c7cfca3d52b46e5e9833968a7b9" prot="public" static="no">
        <type>boost::interprocess::interprocess_condition</type>
        <definition>typedef boost::interprocess::interprocess_condition shared_memory::UnamedSHMCondition</definition>
        <argsstring></argsstring>
        <name>UnamedSHMCondition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/locked_condition_variable.hpp" line="20" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/locked_condition_variable.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a0b94121a6c0d65beda535a70704a1aa5" prot="public" static="no">
        <type>boost::interprocess::scoped_lock&lt; <ref refid="namespaceshared__memory_1a2a3aa667d92610e695d7948a834172f1" kindref="member">UnamedSHMMutex</ref> &gt;</type>
        <definition>typedef boost::interprocess::scoped_lock&lt;UnamedSHMMutex&gt; shared_memory::UnamedSHMLock</definition>
        <argsstring></argsstring>
        <name>UnamedSHMLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/locked_condition_variable.hpp" line="21" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/locked_condition_variable.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a9e455ab41b63e529ceca7424dbf13ba1" prot="public" static="no">
        <type>boost::interprocess::named_mutex</type>
        <definition>typedef boost::interprocess::named_mutex shared_memory::SHMMutex</definition>
        <argsstring></argsstring>
        <name>SHMMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/mutex.hpp" line="12" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/mutex.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1ada3eeebd8f77a3757ad50c9401bcd249" prot="public" static="no">
        <type>cereal::access</type>
        <definition>typedef cereal::access shared_memory::private_serialization</definition>
        <argsstring></argsstring>
        <name>private_serialization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/serializer.hpp" line="15" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/serializer.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1ae50b2192256821112a69e47d5314b467" prot="public" static="no">
        <type>std::map&lt; std::string, std::pair&lt; void *, std::size_t &gt; &gt;</type>
        <definition>typedef std::map&lt;std::string, std::pair&lt;void*, std::size_t&gt; &gt; shared_memory::ShmObjects</definition>
        <argsstring></argsstring>
        <name>ShmObjects</name>
        <briefdescription>
<para>ShmObjects typedef is a simple renaming that ease the for loop writting. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="78" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a36a105df63154c883e86f4282f380647" prot="public" static="no">
        <type><ref refid="structshared__memory_1_1_shm_type_helper" kindref="compound">ShmTypeHelper</ref>&lt; char &gt;::ElemTypeAllocator</type>
        <definition>typedef ShmTypeHelper&lt;char&gt;::ElemTypeAllocator shared_memory::ShmCharAllocator</definition>
        <argsstring></argsstring>
        <name>ShmCharAllocator</name>
        <briefdescription>
<para>Create a char allocator to ease the creation of strings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="108" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a07ee51d077030d33ba8408f5938569cc" prot="public" static="no">
        <type>std::basic_string&lt; char, std::char_traits&lt; char &gt;, <ref refid="namespaceshared__memory_1a36a105df63154c883e86f4282f380647" kindref="member">ShmCharAllocator</ref> &gt;</type>
        <definition>typedef std::basic_string&lt;char, std::char_traits&lt;char&gt;, ShmCharAllocator&gt; shared_memory::ShmString</definition>
        <argsstring></argsstring>
        <name>ShmString</name>
        <briefdescription>
<para>Create a basic_string type for the Shared Memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="114" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshared__memory_1a9aeebdfb6185497cac7c093cf3d765c5" prot="public" static="no">
        <type>std::map&lt; std::string, std::unique_ptr&lt; <ref refid="classshared__memory_1_1_shared_memory_segment" kindref="compound">SharedMemorySegment</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt;std::string, std::unique_ptr&lt;SharedMemorySegment&gt; &gt; shared_memory::SegmentMap</definition>
        <argsstring></argsstring>
        <name>SegmentMap</name>
        <briefdescription>
<para>SegmentMap typedef is a simple short cut to the GLOBAL_SHM_SEGMENTS type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" line="161" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceshared__memory_1adb7d7158652e09188fea583e05949bb5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::VERBOSE</definition>
        <argsstring></argsstring>
        <name>VERBOSE</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" line="25" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceshared__memory_1ad1f78482aa062e165f37fd49e2e8f539" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceshared__memory_1a9aeebdfb6185497cac7c093cf3d765c5" kindref="member">SegmentMap</ref></type>
        <definition>SegmentMap shared_memory::GLOBAL_SHM_SEGMENTS</definition>
        <argsstring></argsstring>
        <name>GLOBAL_SHM_SEGMENTS</name>
        <briefdescription>
<para>GLOBAL_SHARED_MEMORY_SEGMENT is global variable that acts as a a shared memory manager. </para>        </briefdescription>
        <detaileddescription>
<para>The use of the std::unique_ptr allows to delete the object and re-create at will. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" line="170" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceshared__memory_1a1aa02b0b88f0045c3711029f882d80fa" prot="public" static="yes" mutable="no">
        <type>uint</type>
        <definition>uint shared_memory::SEGMENT_SIZE</definition>
        <argsstring></argsstring>
        <name>SEGMENT_SIZE</name>
        <initializer>= <ref refid="shared__memory_8hpp_1acd2f5089f8d2870e833cdc9f7af461ec" kindref="member">DEFAULT_SHARED_MEMORY_SIZE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" line="17" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceshared__memory_1a5c687b65860cde45c62305fbb7a19e71" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex shared_memory::SEGMENT_SIZE_MUTEX</definition>
        <argsstring></argsstring>
        <name>SEGMENT_SIZE_MUTEX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" line="18" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceshared__memory_1a0371eb6089f446098adf2f9c106333dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::clear_array</definition>
        <argsstring>(std::string segment_id)</argsstring>
        <name>clear_array</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
<para>wipe the shared memory segment created by an instance of <ref refid="classshared__memory_1_1array" kindref="compound">shared_memory::array</ref>, including mutexes, if any. </para>        </briefdescription>
        <detaileddescription>
<para>If there are no memory segment of this id, there will be no effect. If <ref refid="classshared__memory_1_1array" kindref="compound">shared_memory::array</ref> instances are pointing to the wiped out segment, their get and set functions may hang indefinitely. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/array.hpp" line="29" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/array.cpp" bodystart="5" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a62e06d817f0f52addc9970db9f83e15d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint</type>
        <definition>static uint shared_memory::get_segment_size</definition>
        <argsstring>(size_t size_array, size_t size_item)</argsstring>
        <name>get_segment_size</name>
        <param>
          <type>size_t</type>
          <declname>size_array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/array.hxx" line="7" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/array.hpp" bodystart="7" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1ac8ef94dc78f444092f488f0143b155f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::set_segment_sizes</definition>
        <argsstring>(uint multiplier_1025)</argsstring>
        <name>set_segment_sizes</name>
        <param>
          <type>uint</type>
          <declname>multiplier_1025</declname>
        </param>
        <briefdescription>
<para>sets the size of the segments that will be newly created via the set methods. </para>        </briefdescription>
        <detaileddescription>
<para>Until this function is called, segments are created with a size of 65536 bytes. This function is not interprocess : it will set the size of segments created in the current process <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>multiplier_1025</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of create segment will be multiplier_1025 * 1025 bytes (because memory segment sizes have to be a multiple of 1025) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="62" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="20" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a841687861fcc9efe381ffbe84843ca33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::set_default_segment_sizes</definition>
        <argsstring>()</argsstring>
        <name>set_default_segment_sizes</name>
        <briefdescription>
<para>set the size of segment newly created to the default size value of 65536 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="68" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a7c76ec22ab70d3b7487becd3ec9943bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classshared__memory_1_1_shared_memory_segment" kindref="compound">SharedMemorySegment</ref> &amp;</type>
        <definition>SharedMemorySegment &amp; shared_memory::get_segment</definition>
        <argsstring>(const std::string &amp;segment_id, const bool clear_upon_destruction=false)</argsstring>
        <name>get_segment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>clear_upon_destruction</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>get_segment creates or give back a pointer to a <ref refid="classshared__memory_1_1_shared_memory_segment" kindref="compound">SharedMemorySegment</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="320" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="79" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a70f7613a247615e323cab083934c803e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classshared__memory_1_1_segment_info" kindref="compound">SegmentInfo</ref></type>
        <definition>SegmentInfo shared_memory::get_segment_info</definition>
        <argsstring>(const std::string &amp;segment_id, const bool clear_upon_destruction=false)</argsstring>
        <name>get_segment_info</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>clear_upon_destruction</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>performs introspection on the segment and return related information. </para>        </briefdescription>
        <detaileddescription>
<para>If the segment does not exists, creates it first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="328" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a82297c2b7b85c57c53578749c9bd6429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shared_memory::segment_exists</definition>
        <argsstring>(const std::string &amp;segment_id)</argsstring>
        <name>segment_exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
<para>returns true if a segment exists under this id </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="335" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="100" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a60cbce63ae7fb64a2758b773f9006471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::delete_segment</definition>
        <argsstring>(const std::string &amp;segment_id)</argsstring>
        <name>delete_segment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
<para>delete_segment deletes the segment of existing shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>it makes sure that all element created in it is destroyed first. (is this needed? I do not know.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="343" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a1f88dd41dca9a23387090866213dbd85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::delete_all_segment</definition>
        <argsstring>()</argsstring>
        <name>delete_all_segment</name>
        <briefdescription>
<para>delete_all_segment delete all mapping to the shared memory used during the current process </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="349" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="122" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a7b43b29fa0aa6a5cad0ca47afdd03e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool shared_memory::delete_object</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id)</argsstring>
        <name>delete_object</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>delete_object deletes a particular object in the shared memory segment </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if everything went fine. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="358" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="173" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1aed33c9701140a1c43e40f182a380199b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::interprocess::interprocess_mutex &amp;</type>
        <definition>boost::interprocess::interprocess_mutex &amp; shared_memory::get_segment_mutex</definition>
        <argsstring>(const std::string segment_id)</argsstring>
        <name>get_segment_mutex</name>
        <param>
          <type>const std::string</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
<para>get_sgement_mutex aquiere a reference to the semgent global mutex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to a boost mutex </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="365" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1aa8583540879db53fc80b31410b5eec68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::clear_shared_memory</definition>
        <argsstring>(const std::string &amp;segment_id)</argsstring>
        <name>clear_shared_memory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <briefdescription>
<para>clear_shared_memory_segment destroys the shared memory </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="372" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1ace68bf582cfe50ba83a9cfc9b7aed3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::set</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, const ElemType &amp;set_)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const ElemType &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>set instanciates or get pointer to any elementary types in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="390" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="191" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a7e37a0a2146d2cfeeccb63390a3d9132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::set</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, const ElemType *set_, const std::size_t size)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const ElemType *</type>
          <declname>set_</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>set instanciates or get pointer to a fixed sized array of the templated type &quot;T&quot; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the pointer to the array of objects to set in the memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>is the array size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="408" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="210" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a61a2945c994bcbe84cc8dce96a189edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::set</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, const std::string &amp;set_)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>set instanciates or get pointer to a string in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="423" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1ac6521a6731fa97be21779b1d6c7589ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::set</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, const std::vector&lt; ElemType &gt; &amp;set_)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; ElemType &gt; &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>set instanciates or get pointer to a std::vector&lt;ElemType&gt; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This will translated as a fixed sized array in the shared memory</para><para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="440" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="238" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1ac8364e5cde6c8a2f1abc2a59035f26a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::set</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, const Eigen::Matrix&lt; ElemType, Eigen::Dynamic, 1 &gt; &amp;set_)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; ElemType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>set instanciates or get pointer to a Eigen::Matrix&lt;ElemType, Eigen::Dynamic, 1&gt; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This will translated as a fixed sized array in the shared memory</para><para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="457" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="246" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a657bb799483a19a96f61706b50aca1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FirstType</type>
          </param>
          <param>
            <type>typename SecondType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::set</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, const std::pair&lt; FirstType, SecondType &gt; &amp;set_)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const std::pair&lt; FirstType, SecondType &gt; &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>set instanciates or get pointer to a std::pair&lt;FirstType, SecondType&gt; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This is very usefull to dump maps in the shared memory</para><para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="474" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="254" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a562e79433e54463f39c9c276b8440f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::set</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, const std::map&lt; KeyType, ValueType &gt; &amp;set_)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const std::map&lt; KeyType, ValueType &gt; &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>set instanciates or get pointer to a std::vector&lt;ElemType&gt; or an Eigen::Matrix&lt;ElemType, any, any&gt; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This will translated as a fixed sized array in the shared memory</para><para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="491" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="263" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1ad017562102dbe044db2de6c79c0669d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::get</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, ElemType &amp;get_)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>ElemType &amp;</type>
          <declname>get_</declname>
        </param>
        <briefdescription>
<para>get gets a pointer to any elementary types in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">get_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="511" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="292" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a6241b9143a2152b0c0beb784869373c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::get</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, ElemType *get_, const std::size_t expected_size)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>ElemType *</type>
          <declname>get_</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>expected_size</declname>
        </param>
        <briefdescription>
<para>get gets a pointer to a fixed sized array of the templated type &quot;T&quot; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">get_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the pointer to the array of objects to set in the memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>is the array size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="529" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="315" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a8a952cc446e3dce8fea8cd1ea02613f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::get</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, std::string &amp;get_)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>get_</declname>
        </param>
        <briefdescription>
<para>get gets a pointer to a string in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">get_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="544" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="154" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1afd0ab66344562f5d927dea0d319a6a08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::get</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, std::vector&lt; ElemType &gt; &amp;get_)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>std::vector&lt; ElemType &gt; &amp;</type>
          <declname>get_</declname>
        </param>
        <briefdescription>
<para>get gets a pointer to a std::vector&lt;ElemType&gt; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This will translated as a fixed sized array in the shared memory</para><para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="561" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="339" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a4e230e55e38089aee71cd6df93110174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::get</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, Eigen::Matrix&lt; ElemType, Eigen::Dynamic, 1 &gt; &amp;get_)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; ElemType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>get_</declname>
        </param>
        <briefdescription>
<para>get gets a pointer to a Eigen::Matrix&lt;ElemType, Eigen::Dynamic, 1&gt; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This will translated as a fixed sized array in the shared memory</para><para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="578" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="347" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a2579e9a10a16e0fbd006900c618addc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FirstType</type>
          </param>
          <param>
            <type>typename SecondType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::get</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, std::pair&lt; FirstType, SecondType &gt; &amp;get_)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>std::pair&lt; FirstType, SecondType &gt; &amp;</type>
          <declname>get_</declname>
        </param>
        <briefdescription>
<para>get instanciates or get pointer to a std::pair&lt;FirstType, SecondType&gt; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This is very usefull to dump maps in the shared memory</para><para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">get_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="595" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="355" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1add6604c2716e51cdcf17de2439251089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::get</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, std::map&lt; KeyType, ValueType &gt; &amp;get_)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>std::map&lt; KeyType, ValueType &gt; &amp;</type>
          <declname>get_</declname>
        </param>
        <briefdescription>
<para>get gets a pointer to a std::vector&lt;ElemType&gt; or an Eigen::Matrix&lt;ElemType, any, any&gt; in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This will translated as a fixed sized array in the shared memory</para><para>All set functions make sure that the pointer is uniquely created to avoid useless computation time consumption.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">get_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the string to be created in the shared memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="612" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="364" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a003005dc269ebf79f08523dc0f8d1ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="class_serializable" kindref="compound">Serializable</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::serialize</definition>
        <argsstring>(const std::string &amp;segment, const std::string &amp;object, const Serializable &amp;serializable)</argsstring>
        <name>serialize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const <ref refid="class_serializable" kindref="compound">Serializable</ref> &amp;</type>
          <declname>serializable</declname>
        </param>
        <briefdescription>
<para>Serialize the instance into a string which is written in the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>This uses cereal for serialization, and <ref refid="class_serializable" kindref="compound">Serializable</ref> must implement a serialize function, see: <ulink url="https://uscilab.github.io/cereal/">https://uscilab.github.io/cereal/</ulink> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">serializable</parametername>
</parameternamelist>
<parameterdescription>
<para>is the instance to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="626" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="626" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a33e39adccccefb603e2dafc7ea8733e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="class_serializable" kindref="compound">Serializable</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::deserialize</definition>
        <argsstring>(const std::string &amp;segment, const std::string &amp;object, Serializable &amp;serializable)</argsstring>
        <name>deserialize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="class_serializable" kindref="compound">Serializable</ref> &amp;</type>
          <declname>serializable</declname>
        </param>
        <briefdescription>
<para>Read from the memory a string that is deserialized into the passed instance of <ref refid="class_serializable" kindref="compound">Serializable</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This assumes the serialization and writting in the shared memory has been performed using the serialize function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the shared memory object to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">serializable</parametername>
</parameternamelist>
<parameterdescription>
<para>is the instance in which the string will be deserialized </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="646" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="646" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1afe26d531f043f59bb36ea7816b8a40bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::set_verbose</definition>
        <argsstring>(bool mode)</argsstring>
        <name>set_verbose</name>
        <param>
          <type>bool</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>if verbose mode set to true (starting default is false), informaton about newly created objects will be displayed in the terminal. </para>        </briefdescription>
        <detaileddescription>
<para>Call to this function will change the verbose mode only for the current process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="662" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshared__memory_1a653947408c221da4e2c26439ba913f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorType</type>
          </param>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::set</definition>
        <argsstring>(const std::string &amp;segment_id, const std::string &amp;object_id, const VectorType &amp;set_)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const VectorType &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" line="230" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="230" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>All templated types in this namespaces are elementary types: int, double, float, char*, ... </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/four_int_values.cpp" line="14" column="1"/>
  </compounddef>
</doxygen>
