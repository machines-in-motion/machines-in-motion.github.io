<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="mutex_8cpp" kind="file" language="C++">
    <compoundname>mutex.cpp</compoundname>
    <includes refid="mutex_8hpp" local="yes">shared_memory/mutex.hpp</includes>
    <incdepgraph>
      <node id="3280">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx"/>
      </node>
      <node id="3276">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="3275">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="3276" relation="include">
        </childnode>
        <childnode refid="3277" relation="include">
        </childnode>
        <childnode refid="3278" relation="include">
        </childnode>
        <childnode refid="3273" relation="include">
        </childnode>
        <childnode refid="3279" relation="include">
        </childnode>
        <childnode refid="3280" relation="include">
        </childnode>
      </node>
      <node id="3281">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="3259" relation="include">
        </childnode>
      </node>
      <node id="3256">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp"/>
        <childnode refid="3257" relation="include">
        </childnode>
        <childnode refid="3258" relation="include">
        </childnode>
        <childnode refid="3259" relation="include">
        </childnode>
      </node>
      <node id="3268">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="3263">
        <label>string</label>
      </node>
      <node id="3259">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="3260" relation="include">
        </childnode>
        <childnode refid="3261" relation="include">
        </childnode>
        <childnode refid="3262" relation="include">
        </childnode>
        <childnode refid="3263" relation="include">
        </childnode>
        <childnode refid="3264" relation="include">
        </childnode>
        <childnode refid="3265" relation="include">
        </childnode>
        <childnode refid="3266" relation="include">
        </childnode>
        <childnode refid="3267" relation="include">
        </childnode>
        <childnode refid="3268" relation="include">
        </childnode>
        <childnode refid="3269" relation="include">
        </childnode>
        <childnode refid="3270" relation="include">
        </childnode>
        <childnode refid="3271" relation="include">
        </childnode>
        <childnode refid="3274" relation="include">
        </childnode>
        <childnode refid="3275" relation="include">
        </childnode>
        <childnode refid="3281" relation="include">
        </childnode>
      </node>
      <node id="3261">
        <label>map</label>
      </node>
      <node id="3272">
        <label>exception</label>
      </node>
      <node id="3274">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp"/>
        <childnode refid="3270" relation="include">
        </childnode>
        <childnode refid="3260" relation="include">
        </childnode>
      </node>
      <node id="3269">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="3257">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="3264">
        <label>vector</label>
      </node>
      <node id="3267">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="3255">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/mutex.cpp</label>
        <link refid="mutex.cpp"/>
        <childnode refid="3256" relation="include">
        </childnode>
      </node>
      <node id="3279">
        <label>utility</label>
      </node>
      <node id="3273">
        <label>sstream</label>
      </node>
      <node id="3266">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="3260">
        <label>iostream</label>
      </node>
      <node id="3262">
        <label>mutex</label>
      </node>
      <node id="3265">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="3277">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="3270">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="3278">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="3258">
        <label>memory</label>
      </node>
      <node id="3271">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="3272" relation="include">
        </childnode>
        <childnode refid="3260" relation="include">
        </childnode>
        <childnode refid="3273" relation="include">
        </childnode>
        <childnode refid="3263" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mutex_8hpp" kindref="compound">shared_memory/mutex.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classshared__memory_1_1_mutex_1a8f1b1cffa2f3bdfb8cd74cf61b0df650" kindref="member">Mutex::Mutex</ref>(std::string<sp/>mutex_id,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clean_memory_on_destruction)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>mutex_{boost::interprocess::open_or_create,<sp/>mutex_id.c_str()}</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_id_<sp/>=<sp/>mutex_id;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>clean_memory_on_destruction_<sp/>=<sp/>clean_memory_on_destruction;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="classshared__memory_1_1_mutex_1ac71952734c60b9ecba84f74a12f87075" kindref="member">Mutex::~Mutex</ref>()</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex_1afc39f23ad6cfe9db45dd2de177a1ede1" kindref="member">mutex_</ref>.unlock();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classshared__memory_1_1_mutex_1a065ff25889e198e37021504fbe5feac8" kindref="member">clean_memory_on_destruction_</ref>)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::interprocess::named_mutex::remove(<ref refid="classshared__memory_1_1_mutex_1a2ab98408f60b14b160fae683b1a88977" kindref="member">mutex_id_</ref>.c_str());</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex_1afc39f23ad6cfe9db45dd2de177a1ede1" kindref="member">mutex_</ref>.unlock();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_mutex_1a6b6ca2e15d379a5e3a8d68d15c04469f" kindref="member">Mutex::lock</ref>()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex_1afc39f23ad6cfe9db45dd2de177a1ede1" kindref="member">mutex_</ref>.lock();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_mutex_1a06b9e214880af7ab9703bd78601ac0c6" kindref="member">Mutex::unlock</ref>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex_1afc39f23ad6cfe9db45dd2de177a1ede1" kindref="member">mutex_</ref>.unlock();</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_mutex_1a964e89132bb180569edcf52de5b43978" kindref="member">Mutex::clean</ref>(std::string<sp/>mutex_id)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_mutex_1a8f1b1cffa2f3bdfb8cd74cf61b0df650" kindref="member">Mutex</ref><sp/>mutex(mutex_id,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/mutex.cpp"/>
  </compounddef>
</doxygen>
