<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="exceptions_8h" kind="file" language="C++">
    <compoundname>exceptions.h</compoundname>
    <includes local="no">exception</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includedby refid="shared__memory_8hpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp</includedby>
    <includedby refid="exceptions_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/exceptions.cpp</includedby>
    <incdepgraph>
      <node id="2536">
        <label>string</label>
      </node>
      <node id="2533">
        <label>exception</label>
      </node>
      <node id="2535">
        <label>sstream</label>
      </node>
      <node id="2534">
        <label>iostream</label>
      </node>
      <node id="2532">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exceptions.h</label>
        <link refid="exceptions.h"/>
        <childnode refid="2533" relation="include">
        </childnode>
        <childnode refid="2534" relation="include">
        </childnode>
        <childnode refid="2535" relation="include">
        </childnode>
        <childnode refid="2536" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2549">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/demo_read_array.cpp</label>
        <link refid="demo__read__array_8cpp"/>
      </node>
      <node id="2554">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/exchange_manager_consumer.cpp</label>
        <link refid="exchange__manager__consumer_8cpp"/>
      </node>
      <node id="2546">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/serialization.cpp</label>
        <link refid="serialization_8cpp"/>
      </node>
      <node id="2544">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/locked_cond_var_ping.cpp</label>
        <link refid="locked__cond__var__ping_8cpp"/>
      </node>
      <node id="2550">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/demo_write_array.cpp</label>
        <link refid="demo__write__array_8cpp"/>
      </node>
      <node id="2564">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp</label>
        <link refid="cond__var__ping_8cpp"/>
      </node>
      <node id="2543">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/get_data.cpp</label>
        <link refid="get__data_8cpp"/>
      </node>
      <node id="2560">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_timeout.cpp</label>
        <link refid="cond__var__timeout_8cpp"/>
      </node>
      <node id="2573">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="2538" relation="include">
        </childnode>
      </node>
      <node id="2575">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/exceptions.cpp</label>
        <link refid="exceptions_8cpp"/>
      </node>
      <node id="2553">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_consumer.hpp</label>
        <link refid="exchange__manager__consumer_8hpp"/>
        <childnode refid="2554" relation="include">
        </childnode>
        <childnode refid="2555" relation="include">
        </childnode>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2540">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_set_api.cpp</label>
        <link refid="stress__set__api_8cpp"/>
      </node>
      <node id="2559">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/locked_condition_variable.hpp</label>
        <link refid="locked__condition__variable_8hpp"/>
        <childnode refid="2560" relation="include">
        </childnode>
        <childnode refid="2544" relation="include">
        </childnode>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2561" relation="include">
        </childnode>
        <childnode refid="2562" relation="include">
        </childnode>
      </node>
      <node id="2563">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp"/>
        <childnode refid="2564" relation="include">
        </childnode>
        <childnode refid="2565" relation="include">
        </childnode>
        <childnode refid="2566" relation="include">
        </childnode>
        <childnode refid="2548" relation="include">
        </childnode>
        <childnode refid="2552" relation="include">
        </childnode>
        <childnode refid="2567" relation="include">
        </childnode>
        <childnode refid="2559" relation="include">
        </childnode>
        <childnode refid="2571" relation="include">
        </childnode>
        <childnode refid="2562" relation="include">
        </childnode>
      </node>
      <node id="2574">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp</label>
        <link refid="shared__memory_8cpp"/>
      </node>
      <node id="2555">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/exchange_manager_demo.cpp</label>
        <link refid="exchange__manager__demo_8cpp"/>
      </node>
      <node id="2538">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="2539" relation="include">
        </childnode>
        <childnode refid="2540" relation="include">
        </childnode>
        <childnode refid="2541" relation="include">
        </childnode>
        <childnode refid="2542" relation="include">
        </childnode>
        <childnode refid="2543" relation="include">
        </childnode>
        <childnode refid="2544" relation="include">
        </childnode>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2546" relation="include">
        </childnode>
        <childnode refid="2547" relation="include">
        </childnode>
        <childnode refid="2548" relation="include">
        </childnode>
        <childnode refid="2552" relation="include">
        </childnode>
        <childnode refid="2559" relation="include">
        </childnode>
        <childnode refid="2563" relation="include">
        </childnode>
        <childnode refid="2572" relation="include">
        </childnode>
        <childnode refid="2573" relation="include">
        </childnode>
        <childnode refid="2574" relation="include">
        </childnode>
      </node>
      <node id="2568">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/condition_variable.hpp</label>
        <link refid="condition__variable_8hpp"/>
        <childnode refid="2564" relation="include">
        </childnode>
        <childnode refid="2565" relation="include">
        </childnode>
        <childnode refid="2566" relation="include">
        </childnode>
        <childnode refid="2569" relation="include">
        </childnode>
        <childnode refid="2562" relation="include">
        </childnode>
      </node>
      <node id="2558">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/exchange_manager_clean.cpp</label>
        <link refid="exchange__manager__clean_8cpp"/>
      </node>
      <node id="2561">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/locked_condition_variable.cpp</label>
        <link refid="locked__condition__variable_8cpp"/>
      </node>
      <node id="2541">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/demo_eigen.cpp</label>
        <link refid="demo__eigen_8cpp"/>
      </node>
      <node id="2542">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/demo_verbose.cpp</label>
        <link refid="demo__verbose_8cpp"/>
      </node>
      <node id="2570">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/lock.cpp</label>
        <link refid="lock_8cpp"/>
      </node>
      <node id="2547">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/set_data.cpp</label>
        <link refid="set__data_8cpp"/>
      </node>
      <node id="2556">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/exchange_manager_producer.cpp</label>
        <link refid="exchange__manager__producer_8cpp"/>
      </node>
      <node id="2539">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_get_api.cpp</label>
        <link refid="stress__get__api_8cpp"/>
      </node>
      <node id="2571">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/mutex.cpp</label>
        <link refid="mutex_8cpp"/>
      </node>
      <node id="2551">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/array.cpp</label>
        <link refid="array_8cpp"/>
      </node>
      <node id="2552">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/internal/exchange_manager_memory.hpp</label>
        <link refid="exchange__manager__memory_8hpp"/>
        <childnode refid="2553" relation="include">
        </childnode>
        <childnode refid="2557" relation="include">
        </childnode>
      </node>
      <node id="2545">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/locked_cond_var_pong.cpp</label>
        <link refid="locked__cond__var__pong_8cpp"/>
      </node>
      <node id="2567">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/lock.hpp</label>
        <link refid="lock_8hpp"/>
        <childnode refid="2564" relation="include">
        </childnode>
        <childnode refid="2565" relation="include">
        </childnode>
        <childnode refid="2566" relation="include">
        </childnode>
        <childnode refid="2568" relation="include">
        </childnode>
        <childnode refid="2570" relation="include">
        </childnode>
        <childnode refid="2562" relation="include">
        </childnode>
      </node>
      <node id="2565">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_pong.cpp</label>
        <link refid="cond__var__pong_8cpp"/>
      </node>
      <node id="2562">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/srcpy/wrappers.cpp</label>
        <link refid="wrappers_8cpp"/>
      </node>
      <node id="2548">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/array.hpp</label>
        <link refid="array_8hpp"/>
        <childnode refid="2549" relation="include">
        </childnode>
        <childnode refid="2550" relation="include">
        </childnode>
        <childnode refid="2551" relation="include">
        </childnode>
      </node>
      <node id="2572">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/serializable_exchange.hpp</label>
        <link refid="serializable__exchange_8hpp"/>
      </node>
      <node id="2569">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/condition_variable.cpp</label>
        <link refid="condition__variable_8cpp"/>
      </node>
      <node id="2557">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exchange_manager_producer.hpp</label>
        <link refid="exchange__manager__producer_8hpp"/>
        <childnode refid="2558" relation="include">
        </childnode>
        <childnode refid="2555" relation="include">
        </childnode>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2566">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp</label>
        <link refid="sm__cond__var__demo_8cpp"/>
      </node>
      <node id="2537">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exceptions.h</label>
        <link refid="exceptions.h"/>
        <childnode refid="2538" relation="include">
        </childnode>
        <childnode refid="2575" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classshared__memory_1_1_allocation__exception" prot="public">shared_memory::Allocation_exception</innerclass>
    <innerclass refid="classshared__memory_1_1_memory__overflow__exception" prot="public">shared_memory::Memory_overflow_exception</innerclass>
    <innerclass refid="classshared__memory_1_1_unexpected__size__exception" prot="public">shared_memory::Unexpected_size_exception</innerclass>
    <innerclass refid="classshared__memory_1_1_not__consumed__exception" prot="public">shared_memory::Not_consumed_exception</innerclass>
    <innerclass refid="classshared__memory_1_1_unexpected__map__key" prot="public">shared_memory::Unexpected_map_key</innerclass>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
<para>Defines debugging exceptions for this package. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz  License BSD-3-Clause </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#ifndef<sp/>SHARED_MEMORY_EXCEPTION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHARED_MEMORY_EXCEPTION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21" refid="classshared__memory_1_1_allocation__exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classshared__memory_1_1_allocation__exception" kindref="compound">Allocation_exception</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_allocation__exception_1ac81ff8567ac6c6cec754fefc5fe79d12" kindref="member">Allocation_exception</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;segment_id,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;object_id);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_allocation__exception_1a3c753547b3509c87dbef42974ef02cb9" kindref="member">~Allocation_exception</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classshared__memory_1_1_allocation__exception_1ac0764146f0a70b242491a990fa448dc3" kindref="member">what</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30" refid="classshared__memory_1_1_allocation__exception_1a57a0e22bd60d77310cd67371a2294028" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1_allocation__exception_1a57a0e22bd60d77310cd67371a2294028" kindref="member">error_message_</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classshared__memory_1_1_memory__overflow__exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classshared__memory_1_1_memory__overflow__exception" kindref="compound">Memory_overflow_exception</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_memory__overflow__exception" kindref="compound">Memory_overflow_exception</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>error_message);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classshared__memory_1_1_memory__overflow__exception" kindref="compound">Memory_overflow_exception</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classshared__memory_1_1_allocation__exception_1ac0764146f0a70b242491a990fa448dc3" kindref="member">what</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41" refid="classshared__memory_1_1_memory__overflow__exception_1ad63afdde056259c8fb0bd3212031783d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1_memory__overflow__exception_1ad63afdde056259c8fb0bd3212031783d" kindref="member">error_message_</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classshared__memory_1_1_unexpected__size__exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classshared__memory_1_1_unexpected__size__exception" kindref="compound">Unexpected_size_exception</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_unexpected__size__exception" kindref="compound">Unexpected_size_exception</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;segment_id,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;object_id,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_size,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_given);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classshared__memory_1_1_unexpected__size__exception" kindref="compound">Unexpected_size_exception</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classshared__memory_1_1_allocation__exception_1ac0764146f0a70b242491a990fa448dc3" kindref="member">what</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55" refid="classshared__memory_1_1_unexpected__size__exception_1a6f22d0e0207e97cafe4f78192c913c55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1_unexpected__size__exception_1a6f22d0e0207e97cafe4f78192c913c55" kindref="member">error_message_</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classshared__memory_1_1_not__consumed__exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classshared__memory_1_1_not__consumed__exception" kindref="compound">Not_consumed_exception</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_not__consumed__exception" kindref="compound">Not_consumed_exception</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>missed_id);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classshared__memory_1_1_not__consumed__exception" kindref="compound">Not_consumed_exception</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classshared__memory_1_1_allocation__exception_1ac0764146f0a70b242491a990fa448dc3" kindref="member">what</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66" refid="classshared__memory_1_1_not__consumed__exception_1af35506334fcf23eae0ccfe101a2fdb9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1_not__consumed__exception_1af35506334fcf23eae0ccfe101a2fdb9c" kindref="member">error_message_</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key&gt;</highlight></codeline>
<codeline lineno="70" refid="classshared__memory_1_1_unexpected__map__key" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classshared__memory_1_1_unexpected__map__key" kindref="compound">Unexpected_map_key</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73" refid="classshared__memory_1_1_unexpected__map__key_1a6b186f98c6978fb264529381b3174c9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_unexpected__map__key_1a6b186f98c6978fb264529381b3174c9d" kindref="member">Unexpected_map_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;segment_id,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;object_id,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key<sp/>&amp;expected_key)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>s;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;shared_memory<sp/>:<sp/>none<sp/>existing<sp/>key<sp/>in<sp/>map<sp/>when<sp/>setting/getting<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>segment_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected_key;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classshared__memory_1_1_allocation__exception_1a57a0e22bd60d77310cd67371a2294028" kindref="member">error_message_</ref><sp/>=<sp/>s.str();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classshared__memory_1_1_unexpected__map__key_1ad89e63ce30f6e7ae1e29a9aa1b6ed358" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_unexpected__map__key_1ad89e63ce30f6e7ae1e29a9aa1b6ed358" kindref="member">~Unexpected_map_key</ref>()<sp/>throw()</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classshared__memory_1_1_unexpected__map__key_1af5cbaa9ae4b6f51f8e201d2984a7d94c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classshared__memory_1_1_unexpected__map__key_1af5cbaa9ae4b6f51f8e201d2984a7d94c" kindref="member">what</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classshared__memory_1_1_allocation__exception_1a57a0e22bd60d77310cd67371a2294028" kindref="member">error_message_</ref>.c_str();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94" refid="classshared__memory_1_1_unexpected__map__key_1a67c2b43bc3b41b5584c7fba92acac5cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1_unexpected__map__key_1a67c2b43bc3b41b5584c7fba92acac5cc" kindref="member">error_message_</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SHARED_MEMORY_EXCEPTION_HPP</highlight></codeline>
    </programlisting>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/exceptions.h"/>
  </compounddef>
</doxygen>
