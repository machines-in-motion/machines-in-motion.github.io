<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="benchmark__common_8hh" kind="file" language="C++">
    <compoundname>benchmark_common.hh</compoundname>
    <includes local="no">signal.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">chrono</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includedby refid="clean__shared__memory_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/clean_shared_memory.cpp</includedby>
    <includedby refid="stress__get__api_8cpp" local="no">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_get_api.cpp</includedby>
    <includedby refid="stress__get__raw__boost__efficient_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_get_raw_boost_efficient.cpp</includedby>
    <includedby refid="stress__get__raw__boost__inefficient_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_get_raw_boost_inefficient.cpp</includedby>
    <includedby refid="stress__set__api_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_set_api.cpp</includedby>
    <includedby refid="stress__set__raw__boost__efficient_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_set_raw_boost_efficient.cpp</includedby>
    <includedby refid="stress__set__raw__boost__inefficient_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_set_raw_boost_inefficient.cpp</includedby>
    <incdepgraph>
      <node id="2463">
        <label>cmath</label>
      </node>
      <node id="2461">
        <label>unistd.h</label>
      </node>
      <node id="2465">
        <label>vector</label>
      </node>
      <node id="2460">
        <label>signal.h</label>
      </node>
      <node id="2464">
        <label>iostream</label>
      </node>
      <node id="2462">
        <label>chrono</label>
      </node>
      <node id="2459">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh</label>
        <link refid="benchmark_common.hh"/>
        <childnode refid="2460" relation="include">
        </childnode>
        <childnode refid="2461" relation="include">
        </childnode>
        <childnode refid="2462" relation="include">
        </childnode>
        <childnode refid="2463" relation="include">
        </childnode>
        <childnode refid="2464" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2469">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_get_raw_boost_efficient.cpp</label>
        <link refid="stress__get__raw__boost__efficient_8cpp"/>
      </node>
      <node id="2472">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_set_raw_boost_efficient.cpp</label>
        <link refid="stress__set__raw__boost__efficient_8cpp"/>
      </node>
      <node id="2471">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_set_api.cpp</label>
        <link refid="stress__set__api_8cpp"/>
      </node>
      <node id="2473">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_set_raw_boost_inefficient.cpp</label>
        <link refid="stress__set__raw__boost__inefficient_8cpp"/>
      </node>
      <node id="2467">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/clean_shared_memory.cpp</label>
        <link refid="clean__shared__memory_8cpp"/>
      </node>
      <node id="2468">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_get_api.cpp</label>
        <link refid="stress__get__api_8cpp"/>
      </node>
      <node id="2470">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/benchmarks/stress_get_raw_boost_inefficient.cpp</label>
        <link refid="stress__get__raw__boost__inefficient_8cpp"/>
      </node>
      <node id="2466">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh</label>
        <link refid="benchmark_common.hh"/>
        <childnode refid="2467" relation="include">
        </childnode>
        <childnode refid="2468" relation="include">
        </childnode>
        <childnode refid="2469" relation="include">
        </childnode>
        <childnode refid="2470" relation="include">
        </childnode>
        <childnode refid="2471" relation="include">
        </childnode>
        <childnode refid="2472" relation="include">
        </childnode>
        <childnode refid="2473" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_measure_time" prot="public">MeasureTime</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="benchmark__common_8hh_1a21a16aec41293c80beb10d71f79ad7a2" prot="public" static="no">
        <name>SHARED_MEMORY_SIZE</name>
        <initializer>65536</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="21" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="benchmark__common_8hh_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="22" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="benchmark__common_8hh_1adf00b55c2043a89ad0ac69b3a2428281" prot="public" static="no">
        <name>NUMBER_OR_MEASURED_ITERATIONS</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="23" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="benchmark__common_8hh_1adc5fa90d9af8c15b5dc4c72697821c36" prot="public" static="no">
        <name>MAX_NUNMBER_OF_ITERATION</name>
        <initializer>10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="24" column="9" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="benchmark__common_8hh_1ac3379ce076aff9d7667b3fc267a87f48" prot="public" static="no">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>typedef std::chrono::high_resolution_clock::time_point TimeType</definition>
        <argsstring></argsstring>
        <name>TimeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="26" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="benchmark__common_8hh_1a383e703fc3e9dd425f075cf463ee4c5b" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool RUNNING</definition>
        <argsstring></argsstring>
        <name>RUNNING</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="29" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="benchmark__common_8hh_1a59c33a6b3ce646e26614a12d0193a2bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>static std::vector&lt;double&gt; DATA</definition>
        <argsstring>(SIZE, 2)</argsstring>
        <name>DATA</name>
        <param>
          <type><ref refid="benchmark__common_8hh_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref></type>
        </param>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a2eab504a26ce27f25dc75a77486f0291" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string SHM_NAME</definition>
        <argsstring>(&quot;stress_test&quot;)</argsstring>
        <name>SHM_NAME</name>
        <param>
          <type>&quot;stress_test&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a7b0c439ad35b06a4ef0180f55a6d005a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string SHM_OBJECT_NAME</definition>
        <argsstring>(&quot;stress_object&quot;)</argsstring>
        <name>SHM_OBJECT_NAME</name>
        <param>
          <type>&quot;stress_object&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a8dd0271b9a992c4b761972f7082052a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MeasureTime &amp;time)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="struct_measure_time" kindref="compound">MeasureTime</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="62" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1aa10d0d36e9613185c60cd04e376e12bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_benchmark</definition>
        <argsstring>()</argsstring>
        <name>init_benchmark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a91d65608f8757f45d8db7c6e58dfe9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void code_to_benchamrk</definition>
        <argsstring>()</argsstring>
        <name>code_to_benchamrk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="benchmark__common_8hh_1a3ae3ecd5464dfa055c802feb243e62d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void end_benchmark</definition>
        <argsstring>()</argsstring>
        <name>end_benchmark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh" line="73" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Common tools for benchmarking. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz  License BSD-3-Clause </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#ifndef<sp/>BENCHMARK_COMMON_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BENCHMARK_COMMON_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="benchmark__common_8hh_1a21a16aec41293c80beb10d71f79ad7a2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHARED_MEMORY_SIZE<sp/>65536</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="benchmark__common_8hh_1a70ed59adcb4159ac551058053e649640" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZE<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="benchmark__common_8hh_1adf00b55c2043a89ad0ac69b3a2428281" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMBER_OR_MEASURED_ITERATIONS<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="benchmark__common_8hh_1adc5fa90d9af8c15b5dc4c72697821c36" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_NUNMBER_OF_ITERATION<sp/>10000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="benchmark__common_8hh_1ac3379ce076aff9d7667b3fc267a87f48" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::chrono::high_resolution_clock::time_point<sp/><ref refid="benchmark__common_8hh_1ac3379ce076aff9d7667b3fc267a87f48" kindref="member">TimeType</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/><ref refid="benchmark__common_8hh_1a59c33a6b3ce646e26614a12d0193a2bd" kindref="member">DATA</ref>(<ref refid="benchmark__common_8hh_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="29" refid="benchmark__common_8hh_1a383e703fc3e9dd425f075cf463ee4c5b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="benchmark__common_8hh_1a383e703fc3e9dd425f075cf463ee4c5b" kindref="member">RUNNING</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="benchmark__common_8hh_1a2eab504a26ce27f25dc75a77486f0291" kindref="member">SHM_NAME</ref>(</highlight><highlight class="stringliteral">&quot;stress_test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="benchmark__common_8hh_1a7b0c439ad35b06a4ef0180f55a6d005a" kindref="member">SHM_OBJECT_NAME</ref>(</highlight><highlight class="stringliteral">&quot;stress_object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="struct_measure_time" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_measure_time" kindref="compound">MeasureTime</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35" refid="struct_measure_time_1a6864d3911248b2473512a0933c103b37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_measure_time_1a6864d3911248b2473512a0933c103b37" kindref="member">MeasureTime</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_measure_time_1a6ca73f3044c7d89271904c43e2f9dc2c" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39" refid="struct_measure_time_1a6ca73f3044c7d89271904c43e2f9dc2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_measure_time_1a6ca73f3044c7d89271904c43e2f9dc2c" kindref="member">start</ref>()</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_measure_time_1a1bfc128b5d3e0f76e99f809acc985ea2" kindref="member">tic_</ref><sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43" refid="struct_measure_time_1a1714eb45e5ed00a6c90ed36f5d88166a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_measure_time_1a1714eb45e5ed00a6c90ed36f5d88166a" kindref="member">update</ref>()</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nanos<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_measure_time_1a1bfc128b5d3e0f76e99f809acc985ea2" kindref="member">tic_</ref><sp/>-<sp/><ref refid="struct_measure_time_1a7a84fdaf6c46c7de792aca6a13ad6382" kindref="member">prev_tic_</ref>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_measure_time_1a5b76f0c97263601aa07d05272e264735" kindref="member">frequency_</ref><sp/>=<sp/>1000.0<sp/>/<sp/>(pow(10.0,<sp/>-9.0)<sp/>*<sp/>nanos);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_measure_time_1a82f4db9bb7b6ae41a8a02d3c25a9a0ff" kindref="member">period_</ref><sp/>=<sp/>1.0<sp/>/<sp/><ref refid="struct_measure_time_1a5b76f0c97263601aa07d05272e264735" kindref="member">frequency_</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_measure_time_1a7a84fdaf6c46c7de792aca6a13ad6382" kindref="member">prev_tic_</ref><sp/>=<sp/><ref refid="struct_measure_time_1a1bfc128b5d3e0f76e99f809acc985ea2" kindref="member">tic_</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_measure_time_1a1bfc128b5d3e0f76e99f809acc985ea2" kindref="member">tic_</ref><sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="struct_measure_time_1a610d259dacbe716701935d50ecba7780" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_measure_time" kindref="compound">MeasureTime</ref>&amp;<sp/>dt);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="struct_measure_time_1a1bfc128b5d3e0f76e99f809acc985ea2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="benchmark__common_8hh_1ac3379ce076aff9d7667b3fc267a87f48" kindref="member">TimeType</ref><sp/><ref refid="struct_measure_time_1a1bfc128b5d3e0f76e99f809acc985ea2" kindref="member">tic_</ref>;</highlight></codeline>
<codeline lineno="57" refid="struct_measure_time_1a7a84fdaf6c46c7de792aca6a13ad6382" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="benchmark__common_8hh_1ac3379ce076aff9d7667b3fc267a87f48" kindref="member">TimeType</ref><sp/><ref refid="struct_measure_time_1a7a84fdaf6c46c7de792aca6a13ad6382" kindref="member">prev_tic_</ref>;</highlight></codeline>
<codeline lineno="58" refid="struct_measure_time_1a5b76f0c97263601aa07d05272e264735" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_measure_time_1a5b76f0c97263601aa07d05272e264735" kindref="member">frequency_</ref>;</highlight></codeline>
<codeline lineno="59" refid="struct_measure_time_1a82f4db9bb7b6ae41a8a02d3c25a9a0ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_measure_time_1a82f4db9bb7b6ae41a8a02d3c25a9a0ff" kindref="member">period_</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="benchmark__common_8hh_1a8dd0271b9a992c4b761972f7082052a0" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="struct_measure_time_1a610d259dacbe716701935d50ecba7780" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_measure_time" kindref="compound">MeasureTime</ref>&amp;<sp/>time)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Frequency<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time.<ref refid="struct_measure_time_1a5b76f0c97263601aa07d05272e264735" kindref="member">frequency_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Period<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time.<ref refid="struct_measure_time_1a82f4db9bb7b6ae41a8a02d3c25a9a0ff" kindref="member">period_</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="benchmark__common_8hh_1aa10d0d36e9613185c60cd04e376e12bc" kindref="member">init_benchmark</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="benchmark__common_8hh_1a91d65608f8757f45d8db7c6e58dfe9f4" kindref="member">code_to_benchamrk</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="benchmark__common_8hh_1a3ae3ecd5464dfa055c802feb243e62d9" kindref="member">end_benchmark</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>BENCHMARK_COMMON_HH</highlight></codeline>
    </programlisting>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/benchmarks/benchmark_common.hh"/>
  </compounddef>
</doxygen>
