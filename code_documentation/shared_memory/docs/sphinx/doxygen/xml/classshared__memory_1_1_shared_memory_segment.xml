<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classshared__memory_1_1_shared_memory_segment" kind="class" language="C++" prot="public">
    <compoundname>shared_memory::SharedMemorySegment</compoundname>
    <includes refid="shared__memory_8hpp" local="no">shared_memory.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classshared__memory_1_1_shared_memory_segment_1a9e72fec52b3c76b9c2b0809b40b4e11d" prot="public" static="no" mutable="no">
        <type>boost::interprocess::interprocess_mutex *</type>
        <definition>boost::interprocess::interprocess_mutex* shared_memory::SharedMemorySegment::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
<para>mutex_ this mutex secure ALL the shared memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="212" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshared__memory_1_1_shared_memory_segment_1af775c0982687b6e9bc9856b21aa1e009" prot="private" static="no" mutable="no">
        <type>boost::interprocess::managed_shared_memory</type>
        <definition>boost::interprocess::managed_shared_memory shared_memory::SharedMemorySegment::segment_manager_</definition>
        <argsstring></argsstring>
        <name>segment_manager_</name>
        <briefdescription>
<para>shm_segment is the boost object that manages the shared memory segment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="285" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1_shared_memory_segment_1a8c4d0eb6f2a620bf7e5b22a57c07380b" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceshared__memory_1ae50b2192256821112a69e47d5314b467" kindref="member">ShmObjects</ref></type>
        <definition>ShmObjects shared_memory::SharedMemorySegment::objects_</definition>
        <argsstring></argsstring>
        <name>objects_</name>
        <briefdescription>
<para>objects_ are all the data stored in the segment. </para>        </briefdescription>
        <detaileddescription>
<para>WARNING here we use void* so the use of the set and get functions is the RESPONSABILITY of the user.</para><para>The user is to use the SAME type when calling set and get using the shared memory </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="295" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1_shared_memory_segment_1a08408dc6b860388eb3b08e493f0188d9" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string shared_memory::SharedMemorySegment::segment_id_</definition>
        <argsstring></argsstring>
        <name>segment_id_</name>
        <briefdescription>
<para>segment_id_ is the name of the segment inside the shared memory </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="300" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshared__memory_1_1_shared_memory_segment_1af50ac70dca284926b15803f86958b220" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shared_memory::SharedMemorySegment::clear_upon_destruction_</definition>
        <argsstring></argsstring>
        <name>clear_upon_destruction_</name>
        <briefdescription>
<para>clear_upon_destruction_ flag decides if the segment should be cleared upon destruction. </para>        </briefdescription>
        <detaileddescription>
<para>Usage: typically only one process should set this flag to true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="308" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="308" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1ae984411227bd175e684f90c9c28c976c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shared_memory::SharedMemorySegment::SharedMemorySegment</definition>
        <argsstring>(std::string segment_id, bool clear_upon_destruction)</argsstring>
        <name>SharedMemorySegment</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clear_upon_destruction</declname>
        </param>
        <briefdescription>
<para><ref refid="classshared__memory_1_1_shared_memory_segment" kindref="compound">SharedMemorySegment</ref> constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="134" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="44" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1a9f02fd9f35950df5f6ce7ceaba5fbb53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shared_memory::SharedMemorySegment::~SharedMemorySegment</definition>
        <argsstring>()</argsstring>
        <name>~SharedMemorySegment</name>
        <briefdescription>
<para><ref refid="classshared__memory_1_1_shared_memory_segment" kindref="compound">SharedMemorySegment</ref> destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="139" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1a0224739cd729dfb249c3d7882463e5eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::SharedMemorySegment::clear_memory</definition>
        <argsstring>()</argsstring>
        <name>clear_memory</name>
        <briefdescription>
<para>clear_memory free the shared memory </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="146" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1ad73b5160f713c9a78e67c4b8590d8729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::SharedMemorySegment::get_object</definition>
        <argsstring>(const std::string &amp;object_id, std::pair&lt; ElemType *, std::size_t &gt; &amp;get_)</argsstring>
        <name>get_object</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>std::pair&lt; ElemType *, std::size_t &gt; &amp;</type>
          <declname>get_</declname>
        </param>
        <briefdescription>
<para>get_object registers the object in the current struc and in the shared memory once only. </para>        </briefdescription>
        <detaileddescription>
<para>And returns the pointer to the object and its size. The size will be 1 for simple type and could greater to one for arrays. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the object in the shared memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="157" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="31" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1a17aa3bfe778e05b543415b1e5137a26b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::SharedMemorySegment::get_object</definition>
        <argsstring>(const std::string &amp;object_id, std::string &amp;get_)</argsstring>
        <name>get_object</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>get_</declname>
        </param>
        <briefdescription>
<para>get_object registers the object in the current struc and in the shared memory once only. </para>        </briefdescription>
        <detaileddescription>
<para>And returns the pointer to the object and its size. The size will be 1 for simple type and could greater to one for arrays. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the object in the shared memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="168" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/shared_memory.cpp" bodystart="66" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1a16e6213d7dd1984799bbd8fbe14225dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::SharedMemorySegment::set_object</definition>
        <argsstring>(const std::string &amp;object_id, const std::pair&lt; const ElemType *, std::size_t &gt; &amp;set_)</argsstring>
        <name>set_object</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const std::pair&lt; const ElemType *, std::size_t &gt; &amp;</type>
          <declname>set_</declname>
        </param>
        <briefdescription>
<para>set_object registers the object in the current struc and in the shared memory once only. </para>        </briefdescription>
        <detaileddescription>
<para>And returns the pointer to the object and its size. The size will be 1 for simple type and could greater to one for arrays. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the object in the shared memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set_</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference to the fetched object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="179" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="62" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1a6987e8225fd20dbab12e5bb3f5305b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool shared_memory::SharedMemorySegment::register_object</definition>
        <argsstring>(const std::string &amp;object_id, const std::pair&lt; ElemType *, std::size_t &gt; &amp;obj_)</argsstring>
        <name>register_object</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const std::pair&lt; ElemType *, std::size_t &gt; &amp;</type>
          <declname>obj_</declname>
        </param>
        <briefdescription>
<para>register_object registers the object in the segment uniquely. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the object to register. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the object to be registered. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true of a new object has been registered </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="189" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="87" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1a830fee375b183642b999f6a64240f280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool shared_memory::SharedMemorySegment::register_object_read_only</definition>
        <argsstring>(const std::string &amp;object_id)</argsstring>
        <name>register_object_read_only</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>register_object_read_only registers the object in the segment uniquely. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the object to register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj_</parametername>
</parameternamelist>
<parameterdescription>
<para>is the object to be registered </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true of a new object has been registered </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="200" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="111" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1abc658e54589c81e89b147f0b3fbd67b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shared_memory::SharedMemorySegment::delete_object</definition>
        <argsstring>(const std::string &amp;object_id)</argsstring>
        <name>delete_object</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>delete_object delete and object from the shared memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the object in the shared memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="207" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hxx" bodystart="137" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1ac8bbbc98968a8a2b3fe35c50e0768d8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::SharedMemorySegment::create_mutex</definition>
        <argsstring>()</argsstring>
        <name>create_mutex</name>
        <briefdescription>
<para>create_mutex small factory that allow to make sure that the mutex is created. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="219" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1a64d69c4965cd448040bc20e4f9009abc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::SharedMemorySegment::destroy_mutex</definition>
        <argsstring>()</argsstring>
        <name>destroy_mutex</name>
        <briefdescription>
<para>destroy_mutex small destructor of the mutext to make sure that it is unlock at critical time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="231" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="231" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1ae7a86bba2f8158917b48c0bd3a7bdf9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shared_memory::SharedMemorySegment::is_object_registered</definition>
        <argsstring>(const std::string &amp;object_id)</argsstring>
        <name>is_object_registered</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>is_object_registered used to check if the object has been registered or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the object in the shared memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if it has been registered </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="244" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1ae2eb51704f44076db6ce79054e9d2572" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shared_memory::SharedMemorySegment::set_clear_upon_destruction</definition>
        <argsstring>(const bool clear_upon_destruction)</argsstring>
        <name>set_clear_upon_destruction</name>
        <param>
          <type>const bool</type>
          <declname>clear_upon_destruction</declname>
        </param>
        <briefdescription>
<para>set_clear_upon_destruction is a standard setter </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">clear_upon_destruction</parametername>
</parameternamelist>
<parameterdescription>
<para>is the value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="254" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1ab7f1f01a94d4e45ed907be9bcdb71a24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; shared_memory::SharedMemorySegment::get_segment_id</definition>
        <argsstring>()</argsstring>
        <name>get_segment_id</name>
        <briefdescription>
<para>get_segment_id is a standard getter </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the segment name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="263" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classshared__memory_1_1_shared_memory_segment_1aa742cf04463a94a51239b96de2da6947" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshared__memory_1_1_segment_info" kindref="compound">SegmentInfo</ref></type>
        <definition>SegmentInfo shared_memory::SharedMemorySegment::get_info</definition>
        <argsstring>()</argsstring>
        <name>get_info</name>
        <briefdescription>
<para>performs introspection on the segment and return related information </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="274" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="274" bodyend="278"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classshared__memory_1_1_shared_memory_segment" kindref="compound">SharedMemorySegment</ref> contains the pointers of the shared objects in on shared memrory segment. </para>    </briefdescription>
    <detaileddescription>
<para>We use unamed mutext (interprocess_mutex) and unamed condition variables (interprocess_condition) to be able to instanciate them with classic pointers </para>    </detaileddescription>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" line="129" column="1" bodyfile="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/shared_memory.hpp" bodystart="128" bodyend="309"/>
    <listofallmembers>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a0224739cd729dfb249c3d7882463e5eb" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>clear_memory</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1af50ac70dca284926b15803f86958b220" prot="private" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>clear_upon_destruction_</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1ac8bbbc98968a8a2b3fe35c50e0768d8f" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>create_mutex</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1abc658e54589c81e89b147f0b3fbd67b8" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>delete_object</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a64d69c4965cd448040bc20e4f9009abc" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>destroy_mutex</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1aa742cf04463a94a51239b96de2da6947" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>get_info</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1ad73b5160f713c9a78e67c4b8590d8729" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>get_object</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a17aa3bfe778e05b543415b1e5137a26b" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>get_object</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1ab7f1f01a94d4e45ed907be9bcdb71a24" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>get_segment_id</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1ae7a86bba2f8158917b48c0bd3a7bdf9b" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>is_object_registered</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a9e72fec52b3c76b9c2b0809b40b4e11d" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>mutex_</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a8c4d0eb6f2a620bf7e5b22a57c07380b" prot="private" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>objects_</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a6987e8225fd20dbab12e5bb3f5305b75" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>register_object</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a830fee375b183642b999f6a64240f280" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>register_object_read_only</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a08408dc6b860388eb3b08e493f0188d9" prot="private" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>segment_id_</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1af775c0982687b6e9bc9856b21aa1e009" prot="private" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>segment_manager_</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1ae2eb51704f44076db6ce79054e9d2572" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>set_clear_upon_destruction</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a16e6213d7dd1984799bbd8fbe14225dc" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>set_object</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1ae984411227bd175e684f90c9c28c976c" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>SharedMemorySegment</name></member>
      <member refid="classshared__memory_1_1_shared_memory_segment_1a9f02fd9f35950df5f6ce7ceaba5fbb53" prot="public" virt="non-virtual"><scope>shared_memory::SharedMemorySegment</scope><name>~SharedMemorySegment</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
