<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="condition__variable_8hpp" kind="file" language="C++">
    <compoundname>condition_variable.hpp</compoundname>
    <includes refid="lock_8hpp" local="yes">shared_memory/lock.hpp</includes>
    <includes local="no">boost/interprocess/sync/named_condition.hpp</includes>
    <includedby refid="cond__var__ping_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp</includedby>
    <includedby refid="cond__var__pong_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_pong.cpp</includedby>
    <includedby refid="sm__cond__var__demo_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp</includedby>
    <includedby refid="condition__variable_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/condition_variable.cpp</includedby>
    <includedby refid="wrappers_8cpp" local="yes">/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/srcpy/wrappers.cpp</includedby>
    <incdepgraph>
      <node id="2501">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx"/>
      </node>
      <node id="2497">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="2496">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="2497" relation="include">
        </childnode>
        <childnode refid="2498" relation="include">
        </childnode>
        <childnode refid="2499" relation="include">
        </childnode>
        <childnode refid="2494" relation="include">
        </childnode>
        <childnode refid="2500" relation="include">
        </childnode>
        <childnode refid="2501" relation="include">
        </childnode>
      </node>
      <node id="2502">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="2480" relation="include">
        </childnode>
      </node>
      <node id="2476">
        <label>boost/interprocess/sync/scoped_lock.hpp</label>
      </node>
      <node id="2477">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp"/>
        <childnode refid="2478" relation="include">
        </childnode>
        <childnode refid="2479" relation="include">
        </childnode>
        <childnode refid="2480" relation="include">
        </childnode>
      </node>
      <node id="2489">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="2484">
        <label>string</label>
      </node>
      <node id="2480">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="2481" relation="include">
        </childnode>
        <childnode refid="2482" relation="include">
        </childnode>
        <childnode refid="2483" relation="include">
        </childnode>
        <childnode refid="2484" relation="include">
        </childnode>
        <childnode refid="2485" relation="include">
        </childnode>
        <childnode refid="2486" relation="include">
        </childnode>
        <childnode refid="2487" relation="include">
        </childnode>
        <childnode refid="2488" relation="include">
        </childnode>
        <childnode refid="2489" relation="include">
        </childnode>
        <childnode refid="2490" relation="include">
        </childnode>
        <childnode refid="2491" relation="include">
        </childnode>
        <childnode refid="2492" relation="include">
        </childnode>
        <childnode refid="2495" relation="include">
        </childnode>
        <childnode refid="2496" relation="include">
        </childnode>
        <childnode refid="2502" relation="include">
        </childnode>
      </node>
      <node id="2482">
        <label>map</label>
      </node>
      <node id="2474">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/condition_variable.hpp</label>
        <link refid="condition_variable.hpp"/>
        <childnode refid="2475" relation="include">
        </childnode>
        <childnode refid="2503" relation="include">
        </childnode>
      </node>
      <node id="2493">
        <label>exception</label>
      </node>
      <node id="2503">
        <label>boost/interprocess/sync/named_condition.hpp</label>
      </node>
      <node id="2495">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp"/>
        <childnode refid="2491" relation="include">
        </childnode>
        <childnode refid="2481" relation="include">
        </childnode>
      </node>
      <node id="2490">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="2478">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="2485">
        <label>vector</label>
      </node>
      <node id="2488">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="2500">
        <label>utility</label>
      </node>
      <node id="2494">
        <label>sstream</label>
      </node>
      <node id="2475">
        <label>shared_memory/lock.hpp</label>
        <link refid="lock_8hpp"/>
        <childnode refid="2476" relation="include">
        </childnode>
        <childnode refid="2477" relation="include">
        </childnode>
      </node>
      <node id="2487">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="2481">
        <label>iostream</label>
      </node>
      <node id="2483">
        <label>mutex</label>
      </node>
      <node id="2486">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="2498">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="2491">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="2499">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="2479">
        <label>memory</label>
      </node>
      <node id="2492">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="2493" relation="include">
        </childnode>
        <childnode refid="2481" relation="include">
        </childnode>
        <childnode refid="2494" relation="include">
        </childnode>
        <childnode refid="2484" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2505">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_ping.cpp</label>
        <link refid="cond__var__ping_8cpp"/>
      </node>
      <node id="2504">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/condition_variable.hpp</label>
        <link refid="condition_variable.hpp"/>
        <childnode refid="2505" relation="include">
        </childnode>
        <childnode refid="2506" relation="include">
        </childnode>
        <childnode refid="2507" relation="include">
        </childnode>
        <childnode refid="2508" relation="include">
        </childnode>
        <childnode refid="2509" relation="include">
        </childnode>
      </node>
      <node id="2506">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/cond_var_pong.cpp</label>
        <link refid="cond__var__pong_8cpp"/>
      </node>
      <node id="2509">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/srcpy/wrappers.cpp</label>
        <link refid="wrappers_8cpp"/>
      </node>
      <node id="2508">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/src/condition_variable.cpp</label>
        <link refid="condition__variable_8cpp"/>
      </node>
      <node id="2507">
        <label>/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/demos/sm_cond_var_demo.cpp</label>
        <link refid="sm__cond__var__demo_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classshared__memory_1_1_condition_variable" prot="public">shared_memory::ConditionVariable</innerclass>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>Max<sp/>Planck<sp/>Gesellschaft<sp/>and<sp/>New<sp/>York<sp/>University</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/>Vincent<sp/>Berenz,<sp/>Maximilien<sp/>Naveau</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lock_8hpp" kindref="compound">shared_memory/lock.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/interprocess/sync/named_condition.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12" refid="namespaceshared__memory_1a98598a317e2364e30dec871c52491d3c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::interprocess::named_condition<sp/><ref refid="namespaceshared__memory_1a98598a317e2364e30dec871c52491d3c" kindref="member">SHMCondition</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classshared__memory_1_1_condition_variable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classshared__memory_1_1_condition_variable" kindref="compound">ConditionVariable</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_condition_variable_1ae4b6accfbe98b2e23f9e20789cea46f7" kindref="member">ConditionVariable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>object_id,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clean_memory_on_destruction);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1_condition_variable_1a84ccb3bcc9255cd145d30b3a91db4e2b" kindref="member">~ConditionVariable</ref>();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_condition_variable_1abc70cd1401f40e23ca4a6afb33f28bb5" kindref="member">notify_all</ref>();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_condition_variable_1a8953b054a1074ab5ef0a9f9b35f58a42" kindref="member">notify_one</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_condition_variable_1af7b1ce584ff9ef9a0925f57cae8e6263" kindref="member">timed_wait</ref>(<ref refid="classshared__memory_1_1_lock" kindref="compound">Lock</ref><sp/>&amp;lock,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>wait_nano_seconds);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_condition_variable_1a8746faccdf81b03dd36c5b405c9ab48d" kindref="member">wait</ref>(<ref refid="classshared__memory_1_1_lock" kindref="compound">Lock</ref><sp/>&amp;lock);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_condition_variable_1adf6a90466c2bf96cbc08f3ba0246274e" kindref="member">clean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>object_id);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="59" refid="classshared__memory_1_1_condition_variable_1a496feeef1a7fec080435b68a79bc163d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1_condition_variable_1a496feeef1a7fec080435b68a79bc163d" kindref="member">condition_id_</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classshared__memory_1_1_condition_variable_1a872a5c9305c0dff22ec085b8c8306a0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1_condition_variable_1a872a5c9305c0dff22ec085b8c8306a0d" kindref="member">clean_memory_on_destruction_</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classshared__memory_1_1_condition_variable_1a37c6e1a6ca44d30c2a29990e4460803b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>SHMCondition<sp/>*<ref refid="classshared__memory_1_1_condition_variable_1a37c6e1a6ca44d30c2a29990e4460803b" kindref="member">condition_variable_</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classshared__memory_1_1_condition_variable_1ab8221877ff8551e608d5d4691d3679ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1_condition_variable_1ab8221877ff8551e608d5d4691d3679ae" kindref="member">mutex_id_</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mnaveau/devel/workspace/src/catkin/core_robotics/shared_memory/include/shared_memory/condition_variable.hpp"/>
  </compounddef>
</doxygen>
