<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="threadsafe__timeseries_8hxx" kind="file" language="C++">
    <compoundname>threadsafe_timeseries.hxx</compoundname>
    <includes local="no">chrono</includes>
    <includes local="no">cmath</includes>
    <includes refid="threadsafe__timeseries_8hpp" local="yes">real_time_tools/threadsafe/threadsafe_timeseries.hpp</includes>
    <includedby refid="threadsafe__timeseries_8hpp" local="yes">include/real_time_tools/threadsafe/threadsafe_timeseries.hpp</includedby>
    <incdepgraph>
      <node id="653">
        <label>real_time_tools/iostream.hpp</label>
        <link refid="iostream_8hpp"/>
        <childnode refid="654" relation="include">
        </childnode>
      </node>
      <node id="643">
        <label>include/real_time_tools/threadsafe/threadsafe_timeseries.hxx</label>
        <link refid="threadsafe_timeseries.hxx"/>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="645" relation="include">
        </childnode>
        <childnode refid="646" relation="include">
        </childnode>
      </node>
      <node id="645">
        <label>cmath</label>
      </node>
      <node id="646">
        <label>real_time_tools/threadsafe/threadsafe_timeseries.hpp</label>
        <link refid="threadsafe__timeseries_8hpp"/>
        <childnode refid="647" relation="include">
        </childnode>
        <childnode refid="648" relation="include">
        </childnode>
        <childnode refid="649" relation="include">
        </childnode>
        <childnode refid="655" relation="include">
        </childnode>
        <childnode refid="656" relation="include">
        </childnode>
        <childnode refid="643" relation="include">
        </childnode>
      </node>
      <node id="650">
        <label>string</label>
      </node>
      <node id="655">
        <label>condition_variable</label>
      </node>
      <node id="652">
        <label>unistd.h</label>
      </node>
      <node id="648">
        <label>vector</label>
      </node>
      <node id="654">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="651">
        <label>deque</label>
      </node>
      <node id="649">
        <label>real_time_tools/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="650" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
        <childnode refid="645" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="653" relation="include">
        </childnode>
      </node>
      <node id="656">
        <label>mutex</label>
      </node>
      <node id="644">
        <label>chrono</label>
      </node>
      <node id="647">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="657">
        <label>include/real_time_tools/threadsafe/threadsafe_timeseries.hxx</label>
        <link refid="threadsafe_timeseries.hxx"/>
        <childnode refid="658" relation="include">
        </childnode>
      </node>
      <node id="658">
        <label>include/real_time_tools/threadsafe/threadsafe_timeseries.hpp</label>
        <link refid="threadsafe__timeseries_8hpp"/>
        <childnode refid="657" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacereal__time__tools">real_time_tools</innernamespace>
    <briefdescription>
<para>This file contains the implementation of the class in <ref refid="threadsafe__timeseries_8hpp" kindref="compound">threadsafe_timeseries.hpp</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Manuel Wuthrich (<ulink url="mailto:manuel.wuthrich@gmail.com">manuel.wuthrich@gmail.com</ulink>) </para></simplesect>
<simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2018-11-27</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2018 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="14"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="threadsafe__timeseries_8hpp" kindref="compound">real_time_tools/threadsafe/threadsafe_timeseries.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacereal__time__tools" kindref="compound">real_time_tools</ref>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="24" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a06769598feb483bda198edb9c88c8de4" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a06769598feb483bda198edb9c88c8de4" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::ThreadsafeTimeseries</ref>(</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_length,<sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref><sp/>start_timeindex)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>start_timeindex_<sp/>=<sp/>start_timeindex;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>oldest_timeindex_<sp/>=<sp/>start_timeindex_;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>newest_timeindex_<sp/>=<sp/>oldest_timeindex_<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>tagged_timeindex_<sp/>=<sp/>newest_timeindex_;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>history_elements_<sp/>=<sp/>std::make_shared&lt;std::vector&lt;Type&gt;&gt;(max_length);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>history_timestamps_<sp/>=<sp/>std::make_shared&lt;std::vector&lt;Timestamp&gt;&gt;(max_length);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>condition_<sp/>=<sp/>std::make_shared&lt;std::condition_variable&gt;();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_<sp/>=<sp/>std::make_shared&lt;std::mutex&gt;();</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="41" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a07a775400d1b9446bded449ad953a8d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a07a775400d1b9446bded449ad953a8d9" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::tag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref>&amp;<sp/>timeindex)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>tagged_timeindex_<sp/>=<sp/>timeindex;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="48" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ab9adfbafe82cd0dae68d1ba3607f5ecb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ab9adfbafe82cd0dae68d1ba3607f5ecb" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::has_changed_since_tag</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="49"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tagged_timeindex_<sp/>!=<sp/>newest_timeindex_;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::Index</ref></highlight></codeline>
<codeline lineno="55" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a6e453d4c31109908fc074dddf8cfa0f4" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a6e453d4c31109908fc074dddf8cfa0f4" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::newest_timeindex</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="56"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newest_timeindex_<sp/>&lt;<sp/>oldest_timeindex_)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition_-&gt;wait(lock);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newest_timeindex_;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::Index</ref></highlight></codeline>
<codeline lineno="68" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1afcf05dc48b7cf190b7aeb11e0352cbd6" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1afcf05dc48b7cf190b7aeb11e0352cbd6" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::count_appended_elements</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="69"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newest_timeindex_<sp/>-<sp/>start_timeindex_<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::Index</ref></highlight></codeline>
<codeline lineno="77" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1af3f4bbdf3f588f6936c8d1f5777dbf6e" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1af3f4bbdf3f588f6936c8d1f5777dbf6e" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::oldest_timeindex</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="78"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newest_timeindex_<sp/>&lt;<sp/>oldest_timeindex_)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition_-&gt;wait(lock);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldest_timeindex_;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/>Type</highlight></codeline>
<codeline lineno="89" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a287dbff07cc90e36a41dde73466314a9" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a287dbff07cc90e36a41dde73466314a9" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::newest_element</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="90"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref><sp/>timeindex<sp/>=<sp/>newest_timeindex();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[timeindex];</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/>Type</highlight></codeline>
<codeline lineno="96" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1aeaeb6428ee3190538a8e82b525ec0f87" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1aeaeb6428ee3190538a8e82b525ec0f87" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref>&amp;<sp/>timeindex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="97"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeindex<sp/>&lt;<sp/>oldest_timeindex_)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;you<sp/>tried<sp/>to<sp/>access<sp/>timeseries<sp/>element<sp/>which<sp/>is<sp/>too<sp/>old.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newest_timeindex_<sp/>&lt;<sp/>timeindex)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition_-&gt;wait(lock);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>Type<sp/>element<sp/>=<sp/>(*history_elements_)[timeindex<sp/>%<sp/>history_elements_-&gt;size()];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a41e36f99889a580ce56491e573fa77b0" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::Timestamp</ref></highlight></codeline>
<codeline lineno="117" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a2014a6970029b85598d8d4b08b501832" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a2014a6970029b85598d8d4b08b501832" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::timestamp_ms</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref>&amp;<sp/>timeindex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="118"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeindex<sp/>&lt;<sp/>oldest_timeindex_)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;you<sp/>tried<sp/>to<sp/>access<sp/>timeseries<sp/>element<sp/>which<sp/>is<sp/>too<sp/>old.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newest_timeindex_<sp/>&lt;<sp/>timeindex)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition_-&gt;wait(lock);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a41e36f99889a580ce56491e573fa77b0" kindref="member">Timestamp</ref><sp/>timestamp</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(*history_timestamps_)[timeindex<sp/>%<sp/>history_timestamps_-&gt;size()];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timestamp;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a41e36f99889a580ce56491e573fa77b0" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::Timestamp</ref></highlight></codeline>
<codeline lineno="139" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1adec397db4b4568f6b3369105122cc919" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1adec397db4b4568f6b3369105122cc919" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::timestamp_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref>&amp;<sp/>timeindex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="140"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timestamp_ms(timeindex)<sp/>/<sp/>1000.;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ac6cee8cdf659da4a25de6a269648cf4e" refkind="member"><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ac6cee8cdf659da4a25de6a269648cf4e" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::wait_for_timeindex</ref>(</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref>&amp;<sp/>timeindex,<sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>max_duration_s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="149"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeindex<sp/>&lt;<sp/>oldest_timeindex_)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;you<sp/>tried<sp/>to<sp/>access<sp/>timeseries<sp/>element<sp/>which<sp/>is<sp/>too<sp/>old.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newest_timeindex_<sp/>&lt;<sp/>timeindex)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::isfinite(max_duration_s))</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>chrono_duration(max_duration_s);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cv_status<sp/>status<sp/>=<sp/>condition_-&gt;wait_for(lock,<sp/>chrono_duration);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>std::cv_status::timeout)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition_-&gt;wait(lock);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="178" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ae0a782bf3b1a483647d5d342a994335c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ae0a782bf3b1a483647d5d342a994335c" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>element)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newest_timeindex_++;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newest_timeindex_<sp/>-<sp/>oldest_timeindex_<sp/>+<sp/>1<sp/>&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;long&gt;(history_elements_-&gt;size()))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldest_timeindex_++;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref><sp/>history_index<sp/>=<sp/>newest_timeindex_<sp/>%<sp/>history_elements_-&gt;size();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*history_elements_)[history_index]<sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*history_timestamps_)[history_index]<sp/>=<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1Timer_1aa89f45d2228eb343418c71afb5eaf9b5" kindref="member">real_time_tools::Timer::get_current_time_ms</ref>();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>condition_-&gt;notify_all();</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="197" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a7ed15c2faf8b304f8f6ef97e9cd31020" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a7ed15c2faf8b304f8f6ef97e9cd31020" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::length</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="198"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newest_timeindex_<sp/>-<sp/>oldest_timeindex_<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="204" refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a4d1fd7d17f1c896a81ea62923591dbc4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a4d1fd7d17f1c896a81ea62923591dbc4" kindref="member">ThreadsafeTimeseries&lt;Type&gt;::max_length</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="205"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(*mutex_);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>history_elements_-&gt;size();</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}<sp/></highlight><highlight class="comment">//namespace<sp/>blmc_drivers</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx"/>
  </compounddef>
</doxygen>
