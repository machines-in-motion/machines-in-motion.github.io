<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classreal__time__tools_1_1CheckpointTimer" kind="class" language="C++" prot="public">
    <compoundname>real_time_tools::CheckpointTimer</compoundname>
    <includes refid="checkpoint__timer_8hpp" local="no">checkpoint_timer.hpp</includes>
    <templateparamlist>
      <param>
        <type>size_t</type>
        <declname>NUM_CHECKPOINTS</declname>
        <defname>NUM_CHECKPOINTS</defname>
      </param>
      <param>
        <type>bool</type>
        <declname>ENABLED</declname>
        <defname>ENABLED</defname>
        <defval>true</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classreal__time__tools_1_1CheckpointTimer_1a0abbead69aaf780b649f6af01f50cc62" prot="private" static="no" mutable="no">
        <type>std::array&lt; <ref refid="classreal__time__tools_1_1Timer" kindref="compound">real_time_tools::Timer</ref>, NUM_CHECKPOINTS+1 &gt;</type>
        <definition>std::array&lt;real_time_tools::Timer, NUM_CHECKPOINTS + 1&gt; real_time_tools::CheckpointTimer&lt; NUM_CHECKPOINTS, ENABLED &gt;::timers_</definition>
        <argsstring></argsstring>
        <name>timers_</name>
        <briefdescription>
<para>Timers used for the different checkpoints. </para>        </briefdescription>
        <detaileddescription>
<para>Index 0 is used for the total duration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/checkpoint_timer.hpp" line="63" column="1" bodyfile="include/real_time_tools/checkpoint_timer.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1CheckpointTimer_1afbb3abc9e62174d6046f6abb294a120f" prot="private" static="no" mutable="no">
        <type>std::array&lt; std::string, NUM_CHECKPOINTS+1 &gt;</type>
        <definition>std::array&lt;std::string, NUM_CHECKPOINTS + 1&gt; real_time_tools::CheckpointTimer&lt; NUM_CHECKPOINTS, ENABLED &gt;::checkpoint_names_</definition>
        <argsstring></argsstring>
        <name>checkpoint_names_</name>
        <briefdescription>
<para>Names of the checkpoints. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/checkpoint_timer.hpp" line="65" column="1" bodyfile="include/real_time_tools/checkpoint_timer.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1CheckpointTimer_1a07ae61ac85e755629625cc32416f2631" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t real_time_tools::CheckpointTimer&lt; NUM_CHECKPOINTS, ENABLED &gt;::current_checkpoint_</definition>
        <argsstring></argsstring>
        <name>current_checkpoint_</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Index of the current checkpoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/checkpoint_timer.hpp" line="67" column="1" bodyfile="include/real_time_tools/checkpoint_timer.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classreal__time__tools_1_1CheckpointTimer_1a0db0cad1676b37b951f2090ed81e1b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CheckpointTimer::CheckpointTimer</definition>
        <argsstring>()</argsstring>
        <name>CheckpointTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/checkpoint_timer.hpp" line="42" column="1" bodyfile="include/real_time_tools/checkpoint_timer.hpp" bodystart="12" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1CheckpointTimer_1ad93a12cb74103528c8db4e7b1745eae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CheckpointTimer::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
<para>Start timer iteration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/checkpoint_timer.hpp" line="45" column="1" bodyfile="include/real_time_tools/checkpoint_timer.hpp" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1CheckpointTimer_1a6e91b61b72c433a220b1bddb7a634bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CheckpointTimer::checkpoint</definition>
        <argsstring>(const std::string &amp;checkpoint_name)</argsstring>
        <name>checkpoint</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>checkpoint_name</declname>
        </param>
        <briefdescription>
<para>Set checkpoint for time measurement. </para>        </briefdescription>
        <detaileddescription>
<para>Measures time from the last call of <ref refid="classreal__time__tools_1_1CheckpointTimer_1ad93a12cb74103528c8db4e7b1745eae6" kindref="member">start()</ref> or <ref refid="classreal__time__tools_1_1CheckpointTimer_1a6e91b61b72c433a220b1bddb7a634bf5" kindref="member">checkpoint()</ref> until this call. The given name is used when printing the results.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>checkpoint_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the checkpoint (used for printing results) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/checkpoint_timer.hpp" line="55" column="1" bodyfile="include/real_time_tools/checkpoint_timer.hpp" bodystart="31" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1CheckpointTimer_1acce8c21123fe6f450c8f22de575cfef8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CheckpointTimer::print_statistics</definition>
        <argsstring>() const </argsstring>
        <name>print_statistics</name>
        <briefdescription>
<para>Print results of time measurements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/checkpoint_timer.hpp" line="58" column="1" bodyfile="include/real_time_tools/checkpoint_timer.hpp" bodystart="58" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classreal__time__tools_1_1Timer" kindref="compound">Timer</ref> to measure code execution time with &quot;checkpoints&quot;. </para>    </briefdescription>
    <detaileddescription>
<para>This timer is meant to be used for measuring execution time of a loop. It measures time between calls of the <computeroutput>start</computeroutput> method, so by calling this at the beginning of the loop, you get the execution time of the full iteration. Further, you can define &quot;checkpoints&quot; within the loop to measure time of separate steps in the loop. Call the <computeroutput>checkpoint</computeroutput> method after the code that is associated with it. For each checkpoint, the time elapsed since the last checkpoint is measured (<computeroutput>start</computeroutput> counts as a checkpoint in this regard).</para><para>Example: <programlisting><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>second<sp/>template<sp/>argument<sp/>to<sp/>false<sp/>to<sp/>disable<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1CheckpointTimer" kindref="compound">real_time_tools::CheckpointTimer&lt;3, true&gt;</ref><sp/>timer;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1000;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.<ref refid="classreal__time__tools_1_1CheckpointTimer_1ad93a12cb74103528c8db4e7b1745eae6" kindref="member">start</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="demo__checkpoint__timer_8cpp_1a02fd73d861ef2e4aabb38c0c9ff82947" kindref="member">init</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.<ref refid="classreal__time__tools_1_1CheckpointTimer_1a6e91b61b72c433a220b1bddb7a634bf5" kindref="member">checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;initialize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="demo__checkpoint__timer_8cpp_1acb546a895e868f1a8fb9cb4b5a210f42" kindref="member">do_some_stuff</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.<ref refid="classreal__time__tools_1_1CheckpointTimer_1a6e91b61b72c433a220b1bddb7a634bf5" kindref="member">checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;do<sp/>some<sp/>stuff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="demo__checkpoint__timer_8cpp_1a609e6537df0c7eb15c1f5b4e02fbe0ed" kindref="member">write_log</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.<ref refid="classreal__time__tools_1_1CheckpointTimer_1a6e91b61b72c433a220b1bddb7a634bf5" kindref="member">checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;logging&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>timing<sp/>results<sp/>every<sp/>100<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>100<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.<ref refid="classreal__time__tools_1_1CheckpointTimer_1acce8c21123fe6f450c8f22de575cfef8" kindref="member">print_statistics</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NUM_CHECKPOINTS</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of checkpoints. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ENABLED</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to false, to disable timer. Method calls will have no effect (and should hopefully be optimized away by the compiler). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="include/real_time_tools/checkpoint_timer.hpp" line="40" column="1" bodyfile="include/real_time_tools/checkpoint_timer.hpp" bodystart="39" bodyend="68"/>
    <listofallmembers>
      <member refid="classreal__time__tools_1_1CheckpointTimer_1a6e91b61b72c433a220b1bddb7a634bf5" prot="public" virt="non-virtual"><scope>real_time_tools::CheckpointTimer</scope><name>checkpoint</name></member>
      <member refid="classreal__time__tools_1_1CheckpointTimer_1afbb3abc9e62174d6046f6abb294a120f" prot="private" virt="non-virtual"><scope>real_time_tools::CheckpointTimer</scope><name>checkpoint_names_</name></member>
      <member refid="classreal__time__tools_1_1CheckpointTimer_1a0db0cad1676b37b951f2090ed81e1b98" prot="public" virt="non-virtual"><scope>real_time_tools::CheckpointTimer</scope><name>CheckpointTimer</name></member>
      <member refid="classreal__time__tools_1_1CheckpointTimer_1a07ae61ac85e755629625cc32416f2631" prot="private" virt="non-virtual"><scope>real_time_tools::CheckpointTimer</scope><name>current_checkpoint_</name></member>
      <member refid="classreal__time__tools_1_1CheckpointTimer_1acce8c21123fe6f450c8f22de575cfef8" prot="public" virt="non-virtual"><scope>real_time_tools::CheckpointTimer</scope><name>print_statistics</name></member>
      <member refid="classreal__time__tools_1_1CheckpointTimer_1ad93a12cb74103528c8db4e7b1745eae6" prot="public" virt="non-virtual"><scope>real_time_tools::CheckpointTimer</scope><name>start</name></member>
      <member refid="classreal__time__tools_1_1CheckpointTimer_1a0abbead69aaf780b649f6af01f50cc62" prot="private" virt="non-virtual"><scope>real_time_tools::CheckpointTimer</scope><name>timers_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
