<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classreal__time__tools_1_1ThreadsafeTimeseries" kind="class" language="C++" prot="public">
    <compoundname>real_time_tools::ThreadsafeTimeseries</compoundname>
    <includes refid="threadsafe__timeseries_8hpp" local="no">threadsafe_timeseries.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Type</declname>
        <defname>Type</defname>
        <defval>int</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" prot="public" static="no">
        <type>long int</type>
        <definition>typedef long int real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::Index</definition>
        <argsstring></argsstring>
        <name>Index</name>
        <briefdescription>
<para>Alias for the index type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="42" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a41e36f99889a580ce56491e573fa77b0" prot="public" static="no">
        <type>long double</type>
        <definition>typedef long double real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::Timestamp</definition>
        <argsstring></argsstring>
        <name>Timestamp</name>
        <briefdescription>
<para>alias for the Timestamp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="47" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classreal__time__tools_1_1ThreadsafeTimeseries_1ac23cd95c9d5f6344e20db8d318f23005" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; Type &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;Type&gt; &gt; real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::history_elements_</definition>
        <argsstring></argsstring>
        <name>history_elements_</name>
        <briefdescription>
<para>History of the values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="134" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a7f90089325fee66a71a413e68f8ab02c" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; <ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a41e36f99889a580ce56491e573fa77b0" kindref="member">Timestamp</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;Timestamp&gt; &gt; real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::history_timestamps_</definition>
        <argsstring></argsstring>
        <name>history_timestamps_</name>
        <briefdescription>
<para>History of the headers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="136" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1ThreadsafeTimeseries_1aa05382a6a6288769cade6f02a25d5d11" prot="private" static="no" mutable="no">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref></type>
        <definition>Index real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::start_timeindex_</definition>
        <argsstring></argsstring>
        <name>start_timeindex_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="138" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a07285b5905c1b4c73830a4f69dbd306b" prot="private" static="no" mutable="no">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref></type>
        <definition>Index real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::oldest_timeindex_</definition>
        <argsstring></argsstring>
        <name>oldest_timeindex_</name>
        <briefdescription>
<para>Oldest time index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="140" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a7fd574dac314ee5d72ffdb5d578c13ac" prot="private" static="no" mutable="no">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref></type>
        <definition>Index real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::newest_timeindex_</definition>
        <argsstring></argsstring>
        <name>newest_timeindex_</name>
        <briefdescription>
<para>Newest time index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="142" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a8ccddbf7eda7ac6ac257eaef39d9cbc4" prot="private" static="no" mutable="no">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref></type>
        <definition>Index real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::tagged_timeindex_</definition>
        <argsstring></argsstring>
        <name>tagged_timeindex_</name>
        <briefdescription>
<para>Tagged time index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="144" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a46423f0837bcde91a274d49e9d8a32ee" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; std::condition_variable &gt;</type>
        <definition>std::shared_ptr&lt;std::condition_variable&gt; real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::condition_</definition>
        <argsstring></argsstring>
        <name>condition_</name>
        <briefdescription>
<para>A condition variable that protect the data during copy and reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="150" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a755bd4c399df29f2f9b9d2ed748dfae5" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; std::mutex &gt;</type>
        <definition>std::shared_ptr&lt;std::mutex&gt; real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
<para>A mutex variable that protect the data during copy and reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="155" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a06769598feb483bda198edb9c88c8de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::ThreadsafeTimeseries</definition>
        <argsstring>(size_t max_length, Index start_timeindex=0)</argsstring>
        <name>ThreadsafeTimeseries</name>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref></type>
          <declname>start_timeindex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>initializes to an empty timeseries with the given <formula id="7">$ maxlength $</formula>. when the first element will be inserted, it will have index start_timeindex. </para>        </briefdescription>
        <detaileddescription>
<para>this means that this timeseries contains no elements yet, hence <formula id="2">$ newest $</formula> and <formula id="8">$ oldest $</formula> are not defined after construction, there exist no elements and <formula id="5">$length$</formula> is zero </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="57" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="24" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a6e453d4c31109908fc074dddf8cfa0f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref></type>
        <definition>ThreadsafeTimeseries&lt; Type &gt;::Index real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::newest_timeindex</definition>
        <argsstring>() const </argsstring>
        <name>newest_timeindex</name>
        <briefdescription>
<para>returns <formula id="2">$ newest $</formula>. waits if the timeseries is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="62" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="55" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1afcf05dc48b7cf190b7aeb11e0352cbd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref></type>
        <definition>ThreadsafeTimeseries&lt; Type &gt;::Index real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::count_appended_elements</definition>
        <argsstring>() const </argsstring>
        <name>count_appended_elements</name>
        <briefdescription>
<para>returns the number of element contained in the queue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="66" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1af3f4bbdf3f588f6936c8d1f5777dbf6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref></type>
        <definition>ThreadsafeTimeseries&lt; Type &gt;::Index real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::oldest_timeindex</definition>
        <argsstring>() const </argsstring>
        <name>oldest_timeindex</name>
        <briefdescription>
<para>returns <formula id="8">$ oldest $</formula>. waits if the timeseries is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="70" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a287dbff07cc90e36a41dde73466314a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Type</type>
        <definition>Type real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::newest_element</definition>
        <argsstring>() const </argsstring>
        <name>newest_element</name>
        <briefdescription>
<para>returns <formula id="9">$ X_{newest} $</formula>. waits if the timeseries is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="74" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1aeaeb6428ee3190538a8e82b525ec0f87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Type</type>
        <definition>Type real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::operator[]</definition>
        <argsstring>(const Index &amp;timeindex) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref> &amp;</type>
          <declname>timeindex</declname>
        </param>
        <briefdescription>
<para>returns <formula id="10">$ X_{timeindex} $</formula>. waits if the timeseries is empty or if <formula id="11">$timeindex &gt; newest $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="79" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="96" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a2014a6970029b85598d8d4b08b501832" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a41e36f99889a580ce56491e573fa77b0" kindref="member">Timestamp</ref></type>
        <definition>ThreadsafeTimeseries&lt; Type &gt;::Timestamp real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::timestamp_ms</definition>
        <argsstring>(const Index &amp;timeindex) const </argsstring>
        <name>timestamp_ms</name>
        <param>
          <type>const <ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref> &amp;</type>
          <declname>timeindex</declname>
        </param>
        <briefdescription>
<para>returns the time in miliseconds when <formula id="10">$ X_{timeindex} $</formula> was appended. Waits if the timeseries is empty or if <formula id="11">$timeindex &gt; newest $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="85" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="117" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1adec397db4b4568f6b3369105122cc919" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a41e36f99889a580ce56491e573fa77b0" kindref="member">Timestamp</ref></type>
        <definition>ThreadsafeTimeseries&lt; Type &gt;::Timestamp real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::timestamp_s</definition>
        <argsstring>(const Index &amp;timeindex) const </argsstring>
        <name>timestamp_s</name>
        <param>
          <type>const <ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref> &amp;</type>
          <declname>timeindex</declname>
        </param>
        <briefdescription>
<para>returns the time in seconds when <formula id="10">$ X_{timeindex} $</formula> was appended. Waits if the timeseries is empty or if <formula id="11">$timeindex &gt; newest $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="91" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1ac6cee8cdf659da4a25de6a269648cf4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::wait_for_timeindex</definition>
        <argsstring>(const Index &amp;timeindex, const double &amp;max_duration_s=std::numeric_limits&lt; double &gt;::quiet_NaN()) const </argsstring>
        <name>wait_for_timeindex</name>
        <param>
          <type>const <ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref> &amp;</type>
          <declname>timeindex</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>max_duration_s</declname>
          <defval>std::numeric_limits&lt; double &gt;::quiet_NaN()</defval>
        </param>
        <briefdescription>
<para>Wait until the defined time index is reached. If the input time is below the oldest time index that have been registered read an exception is return. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="98" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="146" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a7ed15c2faf8b304f8f6ef97e9cd31020" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::length</definition>
        <argsstring>() const </argsstring>
        <name>length</name>
        <briefdescription>
<para>returns the length of the timeseries, i.e. <formula id="12">$0$</formula> if it is empty, otherwise <formula id="13">$newest - oldest +1 $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="105" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a4d1fd7d17f1c896a81ea62923591dbc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::max_length</definition>
        <argsstring>() const </argsstring>
        <name>max_length</name>
        <briefdescription>
<para>returns the maximum length of the time serie. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="110" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1ab9adfbafe82cd0dae68d1ba3607f5ecb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::has_changed_since_tag</definition>
        <argsstring>() const </argsstring>
        <name>has_changed_since_tag</name>
        <briefdescription>
<para>returns boolean indicating whether new elements have been appended since the last time the <ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a07a775400d1b9446bded449ad953a8d9" kindref="member">tag()</ref> function was called. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="115" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1a07a775400d1b9446bded449ad953a8d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::tag</definition>
        <argsstring>(const Index &amp;timeindex)</argsstring>
        <name>tag</name>
        <param>
          <type>const <ref refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" kindref="member">Index</ref> &amp;</type>
          <declname>timeindex</declname>
        </param>
        <briefdescription>
<para>tags the current timeseries, can later be used to check whether new elements have been added </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="121" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeTimeseries_1ae0a782bf3b1a483647d5d342a994335c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void real_time_tools::ThreadsafeTimeseries&lt; Type &gt;::append</definition>
        <argsstring>(const Type &amp;element)</argsstring>
        <name>append</name>
        <param>
          <type>const Type &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>appends a new element to the timeseries, e.g. we go from <formula id="14">$ X_{1:10} $</formula> to <formula id="15">$ X_{1:11} $</formula> (where <formula id="16">$ X_{11}=$</formula> element). if the timeseries length is already equal to its max_length, then the oldest element is discarded, e.g. for a max_length = 10 we would go from <formula id="14">$ X_{1:10} $</formula> to <formula id="17">$ X_{2:11} $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="130" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hxx" bodystart="178" bodyend="194"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>implements a timeseries <formula id="0">$ X_{{oldest}:{newest}} $</formula> which can safely be accessed from multiple threads. </para>    </briefdescription>
    <detaileddescription>
<para>this object has the following properties:<itemizedlist>
<listitem><para>an oldest timeindex <formula id="1">$ oldest$</formula>,</para></listitem><listitem><para>a newest timeindex <formula id="2">$ newest $</formula>,</para></listitem><listitem><para>a value <formula id="3">$ X_i $</formula> for each <formula id="4">$ i \in \{oldest, oldest + 1 , ..., newest\} $</formula>,</para></listitem><listitem><para>a length <formula id="5">$length$</formula></para></listitem><listitem><para>and a maximum length <formula id="6">$maxlength$</formula> </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" line="37" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_timeseries.hpp" bodystart="37" bodyend="156"/>
    <listofallmembers>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ae0a782bf3b1a483647d5d342a994335c" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>append</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a46423f0837bcde91a274d49e9d8a32ee" prot="private" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>condition_</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1afcf05dc48b7cf190b7aeb11e0352cbd6" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>count_appended_elements</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ab9adfbafe82cd0dae68d1ba3607f5ecb" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>has_changed_since_tag</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ac23cd95c9d5f6344e20db8d318f23005" prot="private" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>history_elements_</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a7f90089325fee66a71a413e68f8ab02c" prot="private" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>history_timestamps_</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a9364696c534468d7ad927883b16ca981" prot="public" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>Index</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a7ed15c2faf8b304f8f6ef97e9cd31020" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>length</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a4d1fd7d17f1c896a81ea62923591dbc4" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>max_length</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a755bd4c399df29f2f9b9d2ed748dfae5" prot="private" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>mutex_</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a287dbff07cc90e36a41dde73466314a9" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>newest_element</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a6e453d4c31109908fc074dddf8cfa0f4" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>newest_timeindex</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a7fd574dac314ee5d72ffdb5d578c13ac" prot="private" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>newest_timeindex_</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1af3f4bbdf3f588f6936c8d1f5777dbf6e" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>oldest_timeindex</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a07285b5905c1b4c73830a4f69dbd306b" prot="private" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>oldest_timeindex_</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1aeaeb6428ee3190538a8e82b525ec0f87" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>operator[]</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1aa05382a6a6288769cade6f02a25d5d11" prot="private" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>start_timeindex_</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a07a775400d1b9446bded449ad953a8d9" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>tag</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a8ccddbf7eda7ac6ac257eaef39d9cbc4" prot="private" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>tagged_timeindex_</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a06769598feb483bda198edb9c88c8de4" prot="public" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>ThreadsafeTimeseries</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a41e36f99889a580ce56491e573fa77b0" prot="public" virt="non-virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>Timestamp</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1a2014a6970029b85598d8d4b08b501832" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>timestamp_ms</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1adec397db4b4568f6b3369105122cc919" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>timestamp_s</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeTimeseries_1ac6cee8cdf659da4a25de6a269648cf4e" prot="public" virt="virtual"><scope>real_time_tools::ThreadsafeTimeseries</scope><name>wait_for_timeindex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
