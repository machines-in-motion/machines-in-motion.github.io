<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="realtime__test__display_8cpp" kind="file" language="C++">
    <compoundname>realtime_test_display.cpp</compoundname>
    <includes local="yes">real_time_tools/realtime_test.hpp</includes>
    <includes local="yes">shared_memory/shared_memory.hpp</includes>
    <includes refid="spinner_8hpp" local="yes">real_time_tools/spinner.hpp</includes>
    <includes local="no">signal.h</includes>
    <incdepgraph>
      <node id="716">
        <label>real_time_tools/realtime_test.hpp</label>
      </node>
      <node id="717">
        <label>shared_memory/shared_memory.hpp</label>
      </node>
      <node id="715">
        <label>src/bin/realtime_test_display.cpp</label>
        <link refid="realtime_test_display.cpp"/>
        <childnode refid="716" relation="include">
        </childnode>
        <childnode refid="717" relation="include">
        </childnode>
        <childnode refid="718" relation="include">
        </childnode>
        <childnode refid="721" relation="include">
        </childnode>
      </node>
      <node id="718">
        <label>real_time_tools/spinner.hpp</label>
        <link refid="spinner_8hpp"/>
        <childnode refid="719" relation="include">
        </childnode>
        <childnode refid="720" relation="include">
        </childnode>
      </node>
      <node id="720">
        <label>unistd.h</label>
      </node>
      <node id="721">
        <label>signal.h</label>
      </node>
      <node id="719">
        <label>chrono</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="realtime__test__display_8cpp_1a36f7b6be7108281af77939ceaec42fd6" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool running</definition>
        <argsstring></argsstring>
        <name>running</name>
        <briefdescription>
<para>Global boolean to manage the thread loop stop on ctrl+c. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test_display.cpp" line="17" column="1" bodyfile="src/bin/realtime_test_display.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="realtime__test__display_8cpp_1aba399b0a6a6e3bd37af95bd04e8def6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stop</definition>
        <argsstring>(int)</argsstring>
        <name>stop</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Method run upon ctrl+c. </para>        </briefdescription>
        <detaileddescription>
<para>Stops the loop. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test_display.cpp" line="20" column="1" bodyfile="src/bin/realtime_test_display.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="realtime__test__display_8cpp_1a2c3f6775325c30275d11c6abee2db6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int, char **)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>char **</type>
        </param>
        <briefdescription>
<para>This program analyze the data computed by the real_time_test executable. </para>        </briefdescription>
        <detaileddescription>
<para>Both processes communicate throw a shared memeory.</para><para><simplesect kind="return"><para>int 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test_display.cpp" line="30" column="1" bodyfile="src/bin/realtime_test_display.cpp" bodystart="30" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Display results of the real time test. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) license License BSD-3-Clause </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#include<sp/>&quot;real_time_tools/realtime_test.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/shared_memory.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spinner_8hpp" kindref="compound">real_time_tools/spinner.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="realtime__test__display_8cpp_1a36f7b6be7108281af77939ceaec42fd6" kindref="member">running</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="realtime__test__display_8cpp_1aba399b0a6a6e3bd37af95bd04e8def6f" kindref="member">stop</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="realtime__test__display_8cpp_1a36f7b6be7108281af77939ceaec42fd6" kindref="member">running</ref>=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="realtime__test__display_8cpp_1a2c3f6775325c30275d11c6abee2db6a0" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exit<sp/>on<sp/>ctrl+c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>stopping;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>stopping.sa_handler<sp/>=<sp/><ref refid="realtime__test__display_8cpp_1aba399b0a6a6e3bd37af95bd04e8def6f" kindref="member">stop</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>sigemptyset(&amp;stopping.sa_mask);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>stopping.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>sigaction(SIGINT,<sp/>&amp;stopping,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1Spinner" kindref="compound">real_time_tools::Spinner</ref><sp/>spinner;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>spinner.<ref refid="classreal__time__tools_1_1Spinner_1afa4e24e5dbbbfa2e0d694ef2e3fa3bb8" kindref="member">set_frequency</ref>(2.0);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="realtime__test__display_8cpp_1a36f7b6be7108281af77939ceaec42fd6" kindref="member">running</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shared[7];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="realtime__test__display_8cpp_1a36f7b6be7108281af77939ceaec42fd6" kindref="member">running</ref>){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::get(REALTIME_TEST_SEGMENT_ID,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REALTIME_TEST_OBJECT_ID,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared,7);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ticks<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shared[0]);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>switchs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shared[1]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_frequency<sp/>=<sp/>shared[2];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>switch_frequency<sp/>=<sp/>shared[3];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average_frequency<sp/>=<sp/>shared[4];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_frequency<sp/>=<sp/>shared[5];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>worse_frequency<sp/>=<sp/>shared[6];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nb<sp/>ticks:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ticks<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nb<sp/>switchs:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>switchs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;frequencies:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\ttarget:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>target_frequency<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tprovokes<sp/>switch:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>switch_frequency<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\taverage:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>average_frequency<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tcurrent:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>current_frequency<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tworse:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>worse_frequency<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>spinner.<ref refid="classreal__time__tools_1_1Spinner_1aa07d4fa32ead44008daa73663508139d" kindref="member">spin</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/bin/realtime_test_display.cpp"/>
  </compounddef>
</doxygen>
