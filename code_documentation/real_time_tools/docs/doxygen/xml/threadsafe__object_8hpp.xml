<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="threadsafe__object_8hpp" kind="file" language="C++">
    <compoundname>threadsafe_object.hpp</compoundname>
    <includes local="no">array</includes>
    <includes local="no">tuple</includes>
    <includes local="no">memory</includes>
    <includes local="no">map</includes>
    <includes local="no">vector</includes>
    <includes refid="timer_8hpp" local="yes">real_time_tools/timer.hpp</includes>
    <includes local="no">mutex</includes>
    <includes local="no">condition_variable</includes>
    <includes refid="threadsafe__object_8hxx" local="yes">real_time_tools/threadsafe/threadsafe_object.hxx</includes>
    <incdepgraph>
      <node id="610">
        <label>real_time_tools/iostream.hpp</label>
        <link refid="iostream_8hpp"/>
        <childnode refid="611" relation="include">
        </childnode>
      </node>
      <node id="614">
        <label>real_time_tools/threadsafe/threadsafe_object.hxx</label>
        <link refid="threadsafe__object_8hxx"/>
        <childnode refid="604" relation="include">
        </childnode>
      </node>
      <node id="608">
        <label>cmath</label>
      </node>
      <node id="598">
        <label>include/real_time_tools/threadsafe/threadsafe_object.hpp</label>
        <link refid="threadsafe_object.hpp"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="600" relation="include">
        </childnode>
        <childnode refid="601" relation="include">
        </childnode>
        <childnode refid="602" relation="include">
        </childnode>
        <childnode refid="603" relation="include">
        </childnode>
        <childnode refid="604" relation="include">
        </childnode>
        <childnode refid="612" relation="include">
        </childnode>
        <childnode refid="613" relation="include">
        </childnode>
        <childnode refid="614" relation="include">
        </childnode>
      </node>
      <node id="606">
        <label>string</label>
      </node>
      <node id="602">
        <label>map</label>
      </node>
      <node id="613">
        <label>condition_variable</label>
      </node>
      <node id="600">
        <label>tuple</label>
      </node>
      <node id="609">
        <label>unistd.h</label>
      </node>
      <node id="603">
        <label>vector</label>
      </node>
      <node id="611">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="599">
        <label>array</label>
      </node>
      <node id="607">
        <label>deque</label>
      </node>
      <node id="604">
        <label>real_time_tools/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="606" relation="include">
        </childnode>
        <childnode refid="607" relation="include">
        </childnode>
        <childnode refid="608" relation="include">
        </childnode>
        <childnode refid="609" relation="include">
        </childnode>
        <childnode refid="610" relation="include">
        </childnode>
      </node>
      <node id="612">
        <label>mutex</label>
      </node>
      <node id="605">
        <label>chrono</label>
      </node>
      <node id="601">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classreal__time__tools_1_1ThreadsafeHistoryInterface" prot="public">real_time_tools::ThreadsafeHistoryInterface</innerclass>
    <innerclass refid="classreal__time__tools_1_1SingletypeThreadsafeObject" prot="public">real_time_tools::SingletypeThreadsafeObject</innerclass>
    <innerclass refid="classreal__time__tools_1_1ThreadsafeObject" prot="public">real_time_tools::ThreadsafeObject</innerclass>
    <innernamespace refid="namespacereal__time__tools">real_time_tools</innernamespace>
    <briefdescription>
<para>This file declares templated container for data buffering. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Manuel Wuthrich (<ulink url="mailto:manuel.wuthrich@gmail.com">manuel.wuthrich@gmail.com</ulink>) </para></simplesect>
<simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2018-11-27</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2018 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timer_8hpp" kindref="compound">real_time_tools/timer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacereal__time__tools" kindref="compound">real_time_tools</ref>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="37" refid="classreal__time__tools_1_1ThreadsafeHistoryInterface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeHistoryInterface" kindref="compound">ThreadsafeHistoryInterface</ref></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46" refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1added71aaeb7d083fc12289814da69d1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Type<sp/><ref refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1added71aaeb7d083fc12289814da69d1c" kindref="member">get_next</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="47"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(get_next_id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_next_id(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a8a10fa5abcb83d54fa33339e8800db6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Type<sp/><ref refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a8a10fa5abcb83d54fa33339e8800db6c" kindref="member">get_newest</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="58"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(<ref refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a3455ddd9e556045b17ab05307f4d3f51" kindref="member">get_newest_id</ref>());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a3455ddd9e556045b17ab05307f4d3f51" kindref="member">get_newest_id</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Type<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>id)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a3304dfddbf562b835745be3ff363ab17" kindref="member">add</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE&gt;</highlight></codeline>
<codeline lineno="92" refid="classreal__time__tools_1_1SingletypeThreadsafeObject" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject" kindref="compound">SingletypeThreadsafeObject</ref></highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject" kindref="compound">SingletypeThreadsafeObject</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject" kindref="compound">SingletypeThreadsafeObject</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>names);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wait_for_update(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a222e0fbdabcdccd95e9d66663e849a58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a222e0fbdabcdccd95e9d66663e849a58" kindref="member">wait_for_update</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="120"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_for_update(name_to_index_.at(name));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wait_for_update()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1af09735c0e632800487bc50e4f2f7f512" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1af09735c0e632800487bc50e4f2f7f512" kindref="member">size</ref>()</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIZE;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1adb4e58f3057002b931e570374cb8604e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Type<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>index<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock((*data_mutexes_)[index]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*data_)[index];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a72ed3358cc661ea9d5681ee359aed2e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Type<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(name_to_index_.at(name));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a08d539478b86e0243de5fe2fa1680c06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INDEX=0&gt;<sp/>Type<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(INDEX);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>datum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>index<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a1f852a4b68d3a0ff112cb9c5d7c6b33e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INDEX=0&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(Type<sp/>datum)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(datum,<sp/>INDEX);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1ab5776496cf4fa4a015101c81811eb9fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>datum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(datum,<sp/>name_to_index_.at(name));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="222" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1abb449516269c85f927246182abee83ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;std::array&lt;Type,<sp/>SIZE&gt;<sp/>&gt;<sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1abb449516269c85f927246182abee83ff" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="227" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a7b242bedc7cd23b419d7928e661fdc10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;std::array&lt;size_t,<sp/>SIZE&gt;&gt;<sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a7b242bedc7cd23b419d7928e661fdc10" kindref="member">modification_counts_</ref>;</highlight></codeline>
<codeline lineno="233" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a3475e1d35b7af07acdbf74c0170ed45d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;size_t&gt;<sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a3475e1d35b7af07acdbf74c0170ed45d" kindref="member">total_modification_count_</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a1a27e1934ed7df5119e0e91ca228ac73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>size_t&gt;<sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a1a27e1934ed7df5119e0e91ca228ac73" kindref="member">name_to_index_</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a628a0eb20c8a683a95607468653c7b2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;std::condition_variable&gt;<sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a628a0eb20c8a683a95607468653c7b2e" kindref="member">condition_</ref>;</highlight></codeline>
<codeline lineno="248" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1aa0bbdbc03580868de0a04e5be234408d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;std::mutex&gt;<sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1aa0bbdbc03580868de0a04e5be234408d" kindref="member">condition_mutex_</ref>;</highlight></codeline>
<codeline lineno="253" refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a55f7e015fa4915ea1c3af34757c2f671" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;std::array&lt;std::mutex,<sp/>SIZE&gt;&gt;<sp/><ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a55f7e015fa4915ea1c3af34757c2f671" kindref="member">data_mutexes_</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">};</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Types&gt;</highlight></codeline>
<codeline lineno="263" refid="classreal__time__tools_1_1ThreadsafeObject" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classreal__time__tools_1_1ThreadsafeObject" kindref="compound">ThreadsafeObject</ref></highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INDEX&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1aa40f755aebba0692a345e2b807d781ed" kindref="member">Type</ref></highlight></codeline>
<codeline lineno="272" refid="classreal__time__tools_1_1ThreadsafeObject_1aa40f755aebba0692a345e2b807d781ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;INDEX,<sp/>std::tuple&lt;Types...&gt;&gt;::type;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="classreal__time__tools_1_1ThreadsafeObject_1af05c02b66f0b75ea12cde9274bc2a97d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>SIZE<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Types);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject" kindref="compound">ThreadsafeObject</ref>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wait_for_update(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="classreal__time__tools_1_1ThreadsafeObject_1aa072c55b6b539550a53d21f60464d058" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>INDEX=0&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1aa072c55b6b539550a53d21f60464d058" kindref="member">wait_for_update</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="297"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_for_update(INDEX);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wait_for_update()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INDEX=0&gt;<sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1aa40f755aebba0692a345e2b807d781ed" kindref="member">Type&lt;INDEX&gt;</ref><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INDEX=0&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(<ref refid="classreal__time__tools_1_1ThreadsafeObject_1aa40f755aebba0692a345e2b807d781ed" kindref="member">Type&lt;INDEX&gt;</ref><sp/>datum);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="338" refid="classreal__time__tools_1_1ThreadsafeObject_1a2e73d9d8db2fd54768adfd2f67df68fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;std::tuple&lt;Types<sp/>...&gt;<sp/>&gt;<sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1a2e73d9d8db2fd54768adfd2f67df68fb" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="343" refid="classreal__time__tools_1_1ThreadsafeObject_1a0f39feab7508852adab81ad4318f47e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;std::condition_variable&gt;<sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1a0f39feab7508852adab81ad4318f47e6" kindref="member">condition_</ref>;</highlight></codeline>
<codeline lineno="347" refid="classreal__time__tools_1_1ThreadsafeObject_1a202a8fd66fe64138bc0cfa35a8dd745e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;std::mutex&gt;<sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1a202a8fd66fe64138bc0cfa35a8dd745e" kindref="member">condition_mutex_</ref>;</highlight></codeline>
<codeline lineno="352" refid="classreal__time__tools_1_1ThreadsafeObject_1a20e108057d1da31ebc416d5b3577ac21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;std::array&lt;size_t,<sp/>SIZE&gt;&gt;<sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1a20e108057d1da31ebc416d5b3577ac21" kindref="member">modification_counts_</ref>;</highlight></codeline>
<codeline lineno="358" refid="classreal__time__tools_1_1ThreadsafeObject_1a12f866f5a2f955aa3b55b03623033fca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;size_t&gt;<sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1a12f866f5a2f955aa3b55b03623033fca" kindref="member">total_modification_count_</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="363" refid="classreal__time__tools_1_1ThreadsafeObject_1a8a4e122257d25cf42a389c56daf41cb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;std::array&lt;std::mutex,<sp/>SIZE&gt;&gt;<sp/><ref refid="classreal__time__tools_1_1ThreadsafeObject_1a8a4e122257d25cf42a389c56daf41cb7" kindref="member">data_mutexes_</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="threadsafe__object_8hxx" kindref="compound">real_time_tools/threadsafe/threadsafe_object.hxx</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp"/>
  </compounddef>
</doxygen>
