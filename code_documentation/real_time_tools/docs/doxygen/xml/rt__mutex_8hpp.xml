<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="rt__mutex_8hpp" kind="file" language="C++">
    <compoundname>rt_mutex.hpp</compoundname>
    <includes local="no">pthread.h</includes>
    <includes local="no">sys/time.h</includes>
    <incdepgraph>
      <node id="573">
        <label>pthread.h</label>
      </node>
      <node id="574">
        <label>sys/time.h</label>
      </node>
      <node id="572">
        <label>include/real_time_tools/rt_mutex.hpp</label>
        <link refid="rt_mutex.hpp"/>
        <childnode refid="573" relation="include">
        </childnode>
        <childnode refid="574" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" prot="public" static="no">
        <type>pthread_mutex_t</type>
        <definition>typedef pthread_mutex_t rt_mutex</definition>
        <argsstring></argsstring>
        <name>rt_mutex</name>
        <briefdescription>
<para>Alias for the real time mutex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/rt_mutex.hpp" line="26" column="1" bodyfile="include/real_time_tools/rt_mutex.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rt__mutex_8hpp_1a668d08f0241c505774e0fac47a16befe" prot="public" static="no">
        <type>pthread_cond_t</type>
        <definition>typedef pthread_cond_t rt_cond</definition>
        <argsstring></argsstring>
        <name>rt_cond</name>
        <briefdescription>
<para>Alias for the real time condition variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/rt_mutex.hpp" line="28" column="1" bodyfile="include/real_time_tools/rt_mutex.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rt__mutex_8hpp_1a4d314f52e912dc6b62aae06083f657f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rt_mutex_init</definition>
        <argsstring>(rt_mutex *mutex)</argsstring>
        <name>rt_mutex_init</name>
        <param>
          <type><ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Initialize the mutex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/rt_mutex.hpp" line="32" column="1" bodyfile="include/real_time_tools/rt_mutex.hpp" bodystart="41" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="rt__mutex_8hpp_1ac16c36f2796d1d2e1707ef29c2e59882" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rt_mutex_destroy</definition>
        <argsstring>(rt_mutex *mutex)</argsstring>
        <name>rt_mutex_destroy</name>
        <param>
          <type><ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Destroy the mutex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/rt_mutex.hpp" line="34" column="1" bodyfile="include/real_time_tools/rt_mutex.hpp" bodystart="52" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="rt__mutex_8hpp_1aeb86d0934fa6ede664749a79b47e8a03" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rt_mutex_lock</definition>
        <argsstring>(rt_mutex *mutex)</argsstring>
        <name>rt_mutex_lock</name>
        <param>
          <type><ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Lock the mutex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/rt_mutex.hpp" line="36" column="1" bodyfile="include/real_time_tools/rt_mutex.hpp" bodystart="63" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="rt__mutex_8hpp_1abd0f53c90d881554715d2474beedf997" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rt_mutex_unlock</definition>
        <argsstring>(rt_mutex *mutex)</argsstring>
        <name>rt_mutex_unlock</name>
        <param>
          <type><ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Unlock the mutex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/rt_mutex.hpp" line="38" column="1" bodyfile="include/real_time_tools/rt_mutex.hpp" bodystart="74" bodyend="83"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Expose real time OSs mutex through a common API. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) license License BSD-3-Clause </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#include<sp/>&lt;native/mutex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#include<sp/>&lt;native/cond.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#include<sp/>&lt;native/timer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RT_MUTEX<sp/><ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RT_COND<sp/><ref refid="rt__mutex_8hpp_1a668d08f0241c505774e0fac47a16befe" kindref="member">rt_cond</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_mutex_t<sp/><ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>;</highlight></codeline>
<codeline lineno="28" refid="rt__mutex_8hpp_1a668d08f0241c505774e0fac47a16befe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_cond_t<sp/><ref refid="rt__mutex_8hpp_1a668d08f0241c505774e0fac47a16befe" kindref="member">rt_cond</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rt__mutex_8hpp_1a4d314f52e912dc6b62aae06083f657f0" kindref="member">rt_mutex_init</ref>(<ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>*<sp/>mutex);</highlight></codeline>
<codeline lineno="34"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rt__mutex_8hpp_1ac16c36f2796d1d2e1707ef29c2e59882" kindref="member">rt_mutex_destroy</ref>(<ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>*<sp/>mutex);</highlight></codeline>
<codeline lineno="36"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rt__mutex_8hpp_1aeb86d0934fa6ede664749a79b47e8a03" kindref="member">rt_mutex_lock</ref>(<ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>*<sp/>mutex);</highlight></codeline>
<codeline lineno="38"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rt__mutex_8hpp_1abd0f53c90d881554715d2474beedf997" kindref="member">rt_mutex_unlock</ref>(<ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>*<sp/>mutex);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="rt__mutex_8hpp_1a4d314f52e912dc6b62aae06083f657f0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rt__mutex_8hpp_1a4d314f52e912dc6b62aae06083f657f0" kindref="member">rt_mutex_init</ref>(<ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>*<sp/>mutex)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>rt_mutex_create(mutex,<sp/>NULL);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SL_RT_MUTEX_WARNINGS<sp/>&amp;&amp;<sp/>res)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>sl_rt_warning(</highlight><highlight class="stringliteral">&quot;rt_mutex_create&quot;</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pthread_mutex_init(mutex,<sp/>NULL);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="rt__mutex_8hpp_1ac16c36f2796d1d2e1707ef29c2e59882" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rt__mutex_8hpp_1ac16c36f2796d1d2e1707ef29c2e59882" kindref="member">rt_mutex_destroy</ref>(<ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>*<sp/>mutex)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>rt_mutex_delete(mutex);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SL_RT_MUTEX_WARNINGS<sp/>&amp;&amp;<sp/>res)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>sl_rt_warning(</highlight><highlight class="stringliteral">&quot;rt_mutex_delete&quot;</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pthread_mutex_destroy(mutex);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="rt__mutex_8hpp_1aeb86d0934fa6ede664749a79b47e8a03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rt__mutex_8hpp_1aeb86d0934fa6ede664749a79b47e8a03" kindref="member">rt_mutex_lock</ref>(<ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>*<sp/>mutex)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>rt_mutex_acquire(mutex,<sp/>TM_INFINITE);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SL_RT_MUTEX_WARNINGS<sp/>&amp;&amp;<sp/>res)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>sl_rt_warning(</highlight><highlight class="stringliteral">&quot;rt_mutex_acquire&quot;</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pthread_mutex_lock(mutex);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="rt__mutex_8hpp_1abd0f53c90d881554715d2474beedf997" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rt__mutex_8hpp_1abd0f53c90d881554715d2474beedf997" kindref="member">rt_mutex_unlock</ref>(<ref refid="rt__mutex_8hpp_1a645c5f8185139f4e3332271edb8690e5" kindref="member">rt_mutex</ref>*<sp/>mutex)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__XENO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>rt_mutex_release(mutex);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SL_RT_MUTEX_WARNINGS<sp/>&amp;&amp;<sp/>res)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>sl_rt_warning(</highlight><highlight class="stringliteral">&quot;rt_mutex_unlock&quot;</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pthread_mutex_unlock(mutex);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/real_time_tools/rt_mutex.hpp"/>
  </compounddef>
</doxygen>
