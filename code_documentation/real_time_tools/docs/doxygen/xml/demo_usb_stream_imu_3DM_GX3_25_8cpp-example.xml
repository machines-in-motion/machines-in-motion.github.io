<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="demo_usb_stream_imu_3DM_GX3_25_8cpp-example" kind="example">
    <compoundname>demo_usb_stream_imu_3DM_GX3_25.cpp</compoundname>
    <detaileddescription>
<para>In order to use this Demo one must have an IMU 3DM-GX3-25 from micro-strain plug in one of the usb port of the computer.https://atlas.is.localnet/confluence/display/AMDW/Microstrain+3DM+IMUs?preview=/8979810/17761244/3DM-GX3-Data-Communications-Protocol.pdf</para><para>This demos present the use of the usb socket use using the real_time_tools API.</para><para>One need to create a <ref refid="classreal__time__tools_1_1UsbStream" kindref="compound">real_time_tools::UsbStream</ref>. This class allows you to open a device, which means that the class connects this process to a usb communication socket.One can initialize the socket parameters through the <ref refid="classreal__time__tools_1_1PortConfig" kindref="compound">real_time_tools::PortConfig</ref> structure. Once open one can simply use the communication protocole of the hardware to send and receive messages. <programlisting><codeline></codeline>
<codeline><highlight class="preprocessor">#include<sp/>&quot;real_time_tools/usb_stream.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timer_8hpp" kindref="compound">real_time_tools/timer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__usb__stream__imu__3DM__GX3__25_8cpp_1af411ef352aef0f8d040d8d60c49eac7a" kindref="member">continuous_mode_on</ref>(<ref refid="classreal__time__tools_1_1UsbStream" kindref="compound">real_time_tools::UsbStream</ref>&amp;<sp/>usb_stream,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stream_mode)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>reply;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>command;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command.resize(4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[0]<sp/>=<sp/>0xc4;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>continuous<sp/>mode<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[1]<sp/>=<sp/>0xc1;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>confirmation<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[2]<sp/>=<sp/>0x29;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>confirmation<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[3]<sp/>=<sp/>0xc2;<sp/></highlight><highlight class="comment">//<sp/>Acceleration<sp/>and<sp/>angular<sp/>rate<sp/>continuously<sp/>broadcasted</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reply.resize(8,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>answer<sp/>in<sp/>8<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;The<sp/>IMU<sp/>will<sp/>blink<sp/>fast\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<sp/>(reply[0]<sp/>==<sp/>0xC4<sp/>&amp;&amp;<sp/>reply[1]<sp/>==<sp/>0xc2)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1aa9fdd0d43fbf0cddbffb65538af60321" kindref="member">write_device</ref>(command);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1a028f39fcd8c97c49aacf48fdaa8302c8" kindref="member">read_device</ref>(reply,<sp/>stream_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;Device<sp/>answer<sp/>is:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1UsbStream_1ac98f3cad23dbc85f47405c3809a22198" kindref="member">real_time_tools::UsbStream::msg_debug_string</ref>(reply).c_str());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;The<sp/>IMU<sp/>should<sp/>blink<sp/>fast\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="demo__usb__stream__imu__3DM__GX3__25_8cpp_1a8a096d7f567dad6d28f0fd870ba6bb43" kindref="member">is_continuous_mode_on</ref>(<ref refid="classreal__time__tools_1_1UsbStream" kindref="compound">real_time_tools::UsbStream</ref>&amp;<sp/>usb_stream,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stream_mode)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>reply;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>command;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command.resize(4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[0]<sp/>=<sp/>0xd4;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>continuous<sp/>mode<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[1]<sp/>=<sp/>0xa3;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>confirmation<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[2]<sp/>=<sp/>0x47;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>confirmation<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[3]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>request<sp/>continuous<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reply.resize(4,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>answer<sp/>in<sp/>8<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1aa9fdd0d43fbf0cddbffb65538af60321" kindref="member">write_device</ref>(command);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>success<sp/>=<sp/>success<sp/>&amp;&amp;<sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1a028f39fcd8c97c49aacf48fdaa8302c8" kindref="member">read_device</ref>(reply,<sp/>stream_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;is<sp/>continuous<sp/>mode<sp/>reply:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1UsbStream_1ac98f3cad23dbc85f47405c3809a22198" kindref="member">real_time_tools::UsbStream::msg_debug_string</ref>(reply).c_str());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success<sp/>&amp;&amp;<sp/>(reply[1]<sp/>&gt;<sp/>0)<sp/>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__usb__stream__imu__3DM__GX3__25_8cpp_1a1d00f7ae49ec05ecaf8ecd4d76129573" kindref="member">continuous_mode_off</ref>(<ref refid="classreal__time__tools_1_1UsbStream" kindref="compound">real_time_tools::UsbStream</ref>&amp;<sp/>usb_stream,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stream_mode)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>reply;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>command;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command.resize(4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[0]<sp/>=<sp/>0xc4;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>continuous<sp/>mode<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[1]<sp/>=<sp/>0xc1;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>confirmation<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[2]<sp/>=<sp/>0x29;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>confirmation<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[3]<sp/>=<sp/>0x00;<sp/></highlight><highlight class="comment">//<sp/>Acceleration<sp/>and<sp/>angular<sp/>rate<sp/>continuously<sp/>broadcasted</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reply.resize(8,<sp/>0xFF);<sp/></highlight><highlight class="comment">//<sp/>answer<sp/>in<sp/>8<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;The<sp/>IMU<sp/>will<sp/>blink<sp/>slowly\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<sp/>(reply[0]<sp/>==<sp/>0xC4<sp/>&amp;&amp;<sp/>reply[1]<sp/>==<sp/>0x00)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1aa9fdd0d43fbf0cddbffb65538af60321" kindref="member">write_device</ref>(command);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1a028f39fcd8c97c49aacf48fdaa8302c8" kindref="member">read_device</ref>(reply,<sp/>stream_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;Device<sp/>answer<sp/>is:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1UsbStream_1ac98f3cad23dbc85f47405c3809a22198" kindref="member">real_time_tools::UsbStream::msg_debug_string</ref>(reply).c_str());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;The<sp/>IMU<sp/>should<sp/>blink<sp/>slowly\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__usb__stream__imu__3DM__GX3__25_8cpp_1af04ed9328c659fc57f91d74cdeedda72" kindref="member">reset</ref>(<ref refid="classreal__time__tools_1_1UsbStream" kindref="compound">real_time_tools::UsbStream</ref>&amp;<sp/>usb_stream,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stream_mode)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>reply;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>command;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command.resize(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[0]<sp/>=<sp/>0xfe;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[1]<sp/>=<sp/>0x9e;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>confirmation<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command[2]<sp/>=<sp/>0x3a;<sp/></highlight><highlight class="comment">//<sp/>user<sp/>confirmation<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reply.resize(0,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>answer<sp/>in<sp/>8<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;The<sp/>IMU<sp/>is<sp/>resetting\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1aa9fdd0d43fbf0cddbffb65538af60321" kindref="member">write_device</ref>(command);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1a028f39fcd8c97c49aacf48fdaa8302c8" kindref="member">read_device</ref>(reply,<sp/>stream_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;Device<sp/>answer<sp/>is:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1UsbStream_1ac98f3cad23dbc85f47405c3809a22198" kindref="member">real_time_tools::UsbStream::msg_debug_string</ref>(reply).c_str());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;The<sp/>IMU<sp/>is<sp/>reset\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1Timer_1a0a0df8a3baef34e820203e5579afda38" kindref="member">real_time_tools::Timer::sleep_sec</ref>(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="demo__checkpoint__timer_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>!=<sp/>2){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;usage:<sp/>demo_device_stream<sp/>&lt;device&gt;\ne.g.<sp/>%s<sp/>/dev/tty0\n&quot;</highlight><highlight class="normal">,<sp/>argv[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>us<sp/>acquire<sp/>the<sp/>device<sp/>path<sp/>from<sp/>the<sp/>application<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/>device<sp/>=<sp/>std::string(argv[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1UsbStream" kindref="compound">real_time_tools::UsbStream</ref><sp/>usb_stream;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1a1f6915c42d9742ced10e99d2edf7d8b1" kindref="member">open_device</ref>(device))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1PortConfig" kindref="compound">real_time_tools::PortConfig</ref><sp/>port_config;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>port_config.<ref refid="classreal__time__tools_1_1PortConfig_1ad89a20459faf7718a63ea8c00ddc5e34" kindref="member">rts_cts_enabled_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>port_config.<ref refid="classreal__time__tools_1_1PortConfig_1afdc811c6c73ada4b21dab246bf086506" kindref="member">parity_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>port_config.<ref refid="classreal__time__tools_1_1PortConfig_1a3303d793237edbfa0b3c28f3f01c3837" kindref="member">stop_bits_</ref><sp/>=<sp/>real_time_tools::PortConfig::StopBits::one;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>port_config.<ref refid="classreal__time__tools_1_1PortConfig_1a6c1dbeb3cf3c772c9c1b4df71b8befd6" kindref="member">prepare_size_definition_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>port_config.<ref refid="classreal__time__tools_1_1PortConfig_1af80f9991e3811392385208a9baf9c6fd" kindref="member">data_bits_</ref><sp/>=<sp/>real_time_tools::PortConfig::cs8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>port_config.<ref refid="classreal__time__tools_1_1PortConfig_1aa0be2d74f3ac70e9f43d36fc0c70901a" kindref="member">baude_rate_</ref><sp/>=<sp/>115200;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1adb0c41dc7a9603022a0a1e19c9ab8292" kindref="member">set_port_config</ref>(port_config);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1a1c61741541acfca7ecf6deaf0b8ad1fc" kindref="member">set_poll_mode_timeout</ref>(0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>mode<sp/>of<sp/>the<sp/>usb<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stream_mode<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1Timer_1a0a0df8a3baef34e820203e5579afda38" kindref="member">real_time_tools::Timer::sleep_sec</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="demo__usb__stream__imu__3DM__GX3__25_8cpp_1af411ef352aef0f8d040d8d60c49eac7a" kindref="member">continuous_mode_on</ref>(usb_stream,<sp/>stream_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1Timer_1a0a0df8a3baef34e820203e5579afda38" kindref="member">real_time_tools::Timer::sleep_sec</ref>(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1a0bc5fb5783f1833341d55b9b013be6c6" kindref="member">flush</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="demo__usb__stream__imu__3DM__GX3__25_8cpp_1a1d00f7ae49ec05ecaf8ecd4d76129573" kindref="member">continuous_mode_off</ref>(usb_stream,stream_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1a0bc5fb5783f1833341d55b9b013be6c6" kindref="member">flush</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;Close<sp/>port\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>usb_stream.<ref refid="classreal__time__tools_1_1UsbStream_1acea75055bb37f2a7f351300dbaf28d9e" kindref="member">close_device</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;Stop<sp/>program\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
