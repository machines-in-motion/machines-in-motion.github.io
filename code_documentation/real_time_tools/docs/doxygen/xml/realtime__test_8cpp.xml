<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="realtime__test_8cpp" kind="file" language="C++">
    <compoundname>realtime_test.cpp</compoundname>
    <includes local="yes">real_time_tools/realtime_test.hpp</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">memory</includes>
    <includes refid="realtime__check_8hpp" local="yes">real_time_tools/realtime_check.hpp</includes>
    <includes refid="spinner_8hpp" local="yes">real_time_tools/spinner.hpp</includes>
    <includes refid="thread_8hpp" local="yes">real_time_tools/thread.hpp</includes>
    <includes local="yes">shared_memory/shared_memory.hpp</includes>
    <incdepgraph>
      <node id="699">
        <label>atomic</label>
      </node>
      <node id="697">
        <label>real_time_tools/realtime_test.hpp</label>
      </node>
      <node id="712">
        <label>functional</label>
      </node>
      <node id="704">
        <label>limits</label>
      </node>
      <node id="713">
        <label>shared_memory/shared_memory.hpp</label>
      </node>
      <node id="710">
        <label>string</label>
      </node>
      <node id="707">
        <label>real_time_tools/spinner.hpp</label>
        <link refid="spinner_8hpp"/>
        <childnode refid="703" relation="include">
        </childnode>
        <childnode refid="708" relation="include">
        </childnode>
      </node>
      <node id="701">
        <label>real_time_tools/realtime_check.hpp</label>
        <link refid="realtime__check_8hpp"/>
        <childnode refid="702" relation="include">
        </childnode>
        <childnode refid="703" relation="include">
        </childnode>
        <childnode refid="704" relation="include">
        </childnode>
        <childnode refid="705" relation="include">
        </childnode>
        <childnode refid="706" relation="include">
        </childnode>
      </node>
      <node id="709">
        <label>real_time_tools/thread.hpp</label>
        <link refid="thread_8hpp"/>
        <childnode refid="710" relation="include">
        </childnode>
        <childnode refid="711" relation="include">
        </childnode>
        <childnode refid="700" relation="include">
        </childnode>
        <childnode refid="712" relation="include">
        </childnode>
      </node>
      <node id="708">
        <label>unistd.h</label>
      </node>
      <node id="711">
        <label>vector</label>
      </node>
      <node id="698">
        <label>signal.h</label>
      </node>
      <node id="705">
        <label>math.h</label>
      </node>
      <node id="702">
        <label>iostream</label>
      </node>
      <node id="706">
        <label>mutex</label>
      </node>
      <node id="703">
        <label>chrono</label>
      </node>
      <node id="696">
        <label>src/bin/realtime_test.cpp</label>
        <link refid="realtime_test.cpp"/>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="698" relation="include">
        </childnode>
        <childnode refid="699" relation="include">
        </childnode>
        <childnode refid="700" relation="include">
        </childnode>
        <childnode refid="701" relation="include">
        </childnode>
        <childnode refid="707" relation="include">
        </childnode>
        <childnode refid="709" relation="include">
        </childnode>
        <childnode refid="713" relation="include">
        </childnode>
      </node>
      <node id="700">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classConfiguration" prot="public">Configuration</innerclass>
    <innerclass refid="classComputation" prot="public">Computation</innerclass>
    <innerclass refid="classMatrix__computation__no__eigen" prot="public">Matrix_computation_no_eigen</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="realtime__test_8cpp_1aa25458bfbc45f5dca35aa414759acafd" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int MATRIX_COMPUTATION_NO_EIGEN_64</definition>
        <argsstring></argsstring>
        <name>MATRIX_COMPUTATION_NO_EIGEN_64</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>valid modes, creating subclasses of <ref refid="classComputation" kindref="compound">Computation</ref> to add new ones (see below) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test.cpp" line="23" column="1" bodyfile="src/bin/realtime_test.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="realtime__test_8cpp_1a5a5fc9f109f74c744e4e8739c6cae510" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; RUNNING</definition>
        <argsstring></argsstring>
        <name>RUNNING</name>
        <briefdescription>
<para>Is the thread running? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test.cpp" line="26" column="1" bodyfile="src/bin/realtime_test.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="realtime__test_8cpp_1a54b1343eb90254009bd964c44996761b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* thread_function</definition>
        <argsstring>(void *v)</argsstring>
        <name>thread_function</name>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>This is the real time thread that perform the check and the computations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test.cpp" line="116" column="1" bodyfile="src/bin/realtime_test.cpp" bodystart="116" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="realtime__test_8cpp_1ae5ad5cbeccaedc03a48d3c7eaa803e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_usage</definition>
        <argsstring>()</argsstring>
        <name>print_usage</name>
        <briefdescription>
<para>Display the usage in case of a miss-use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test.cpp" line="170" column="1" bodyfile="src/bin/realtime_test.cpp" bodystart="170" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="realtime__test_8cpp_1acbd189ad2c6253bfe6cd5a3a2e20d117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool set_config</definition>
        <argsstring>(int nb_args, char **args, Configuration &amp;config)</argsstring>
        <name>set_config</name>
        <param>
          <type>int</type>
          <declname>nb_args</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="classConfiguration" kindref="compound">Configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>parse the input argument and configure which conputation should be done </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test.cpp" line="179" column="1" bodyfile="src/bin/realtime_test.cpp" bodystart="179" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="realtime__test_8cpp_1ae7878b49a48dc0ca3bcb00390121cf5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clean_memory</definition>
        <argsstring>()</argsstring>
        <name>clean_memory</name>
        <briefdescription>
<para>Delete the shared memeory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test.cpp" line="199" column="1" bodyfile="src/bin/realtime_test.cpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="realtime__test_8cpp_1aba399b0a6a6e3bd37af95bd04e8def6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stop</definition>
        <argsstring>(int)</argsstring>
        <name>stop</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>stop the current thread. </para>        </briefdescription>
        <detaileddescription>
<para>This method is called throw a &quot;ctrl+c&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test.cpp" line="205" column="1" bodyfile="src/bin/realtime_test.cpp" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="realtime__test_8cpp_1af4978f2751bdb780c0a97d67d65dd405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int nb_args, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>nb_args</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>This program evaulate the quality of the frequency tracking by a real time thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/bin/realtime_test.cpp" line="209" column="1" bodyfile="src/bin/realtime_test.cpp" bodystart="209" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Program: test the real time capabilities of a machine. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) license License BSD-3-Clause </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#include<sp/>&quot;real_time_tools/realtime_test.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="realtime__check_8hpp" kindref="compound">real_time_tools/realtime_check.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spinner_8hpp" kindref="compound">real_time_tools/spinner.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="thread_8hpp" kindref="compound">real_time_tools/thread.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/shared_memory.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="realtime__test_8cpp_1aa25458bfbc45f5dca35aa414759acafd" kindref="member">MATRIX_COMPUTATION_NO_EIGEN_64</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">std::atomic&lt;bool&gt;<sp/><ref refid="realtime__test_8cpp_1a5a5fc9f109f74c744e4e8739c6cae510" kindref="member">RUNNING</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classConfiguration" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classConfiguration" kindref="compound">Configuration</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classConfiguration_1a7d5f2036941892a92f343c50a1606b4d" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classConfiguration_1ac6f09be53002bfb5404a241b3ce5486e" kindref="member">frequency</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classConfiguration_1abeda8dee257cb5a21afa2d1f6fab758c" kindref="member">switch_frequency</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classComputation" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classComputation" kindref="compound">Computation</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classMatrix__computation__no__eigen" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMatrix__computation__no__eigen" kindref="compound">Matrix_computation_no_eigen</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classComputation" kindref="compound">Computation</ref><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="classMatrix__computation__no__eigen" kindref="compound">Matrix_computation_no_eigen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>:<sp/>size(size)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*[size];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*[size];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>m3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*[size];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m1[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[size];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m2[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[size];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m3[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[size];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[i][j]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2[i][j]<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m3[i][j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>~<ref refid="classMatrix__computation__no__eigen" kindref="compound">Matrix_computation_no_eigen</ref>()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m1[i];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m2[i];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m3[i];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m2;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m3;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>compute(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size;<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>m1[i][index]<sp/>*<sp/>m2[index][j];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m3[i][j]<sp/>=<sp/>compute(i,<sp/>j);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>m1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>m2;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>m3;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="realtime__test_8cpp_1a54b1343eb90254009bd964c44996761b" kindref="member">thread_function</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="classConfiguration" kindref="compound">Configuration</ref>*<sp/>config<sp/>=<sp/>(<ref refid="classConfiguration" kindref="compound">Configuration</ref>*)(v);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Computation&gt;<sp/>computation;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;<ref refid="classConfiguration_1a7d5f2036941892a92f343c50a1606b4d" kindref="member">mode</ref><sp/>==<sp/><ref refid="realtime__test_8cpp_1aa25458bfbc45f5dca35aa414759acafd" kindref="member">MATRIX_COMPUTATION_NO_EIGEN_64</ref>)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>computation.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classMatrix__computation__no__eigen" kindref="compound">Matrix_computation_no_eigen</ref>(64));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1Spinner" kindref="compound">real_time_tools::Spinner</ref><sp/>spinner;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>spinner.<ref refid="classreal__time__tools_1_1Spinner_1afa4e24e5dbbbfa2e0d694ef2e3fa3bb8" kindref="member">set_frequency</ref>(config-&gt;<ref refid="classConfiguration_1ac6f09be53002bfb5404a241b3ce5486e" kindref="member">frequency</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeCheck" kindref="compound">real_time_tools::RealTimeCheck</ref><sp/>checker(config-&gt;<ref refid="classConfiguration_1ac6f09be53002bfb5404a241b3ce5486e" kindref="member">frequency</ref>,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;<ref refid="classConfiguration_1abeda8dee257cb5a21afa2d1f6fab758c" kindref="member">switch_frequency</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="realtime__test_8cpp_1a5a5fc9f109f74c744e4e8739c6cae510" kindref="member">RUNNING</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ticks,<sp/>switchs;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_frequency,<sp/><ref refid="classConfiguration_1abeda8dee257cb5a21afa2d1f6fab758c" kindref="member">switch_frequency</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average_frequency,<sp/>current_frequency,<sp/>worse_frequency;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shared[7];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>7;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>shared[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="realtime__test_8cpp_1a5a5fc9f109f74c744e4e8739c6cae510" kindref="member">RUNNING</ref>.load())<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>computation-&gt;compute();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computing<sp/>current<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>checker.<ref refid="classreal__time__tools_1_1RealTimeCheck_1a83fdf97352d36aa20e482d7dfae442d5" kindref="member">tick</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>getting<sp/>observed<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>checker.<ref refid="classreal__time__tools_1_1RealTimeCheck_1a4d9614b08d2b4bf7162e14c473b7d491" kindref="member">get_statistics</ref>(ticks,<sp/>switchs,<sp/>target_frequency,<sp/>switch_frequency,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>average_frequency,<sp/>current_frequency,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worse_frequency);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>putting<sp/>observed<sp/>frequency<sp/>in<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>shared[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ticks);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>shared[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(switchs);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>shared[2]<sp/>=<sp/>target_frequency;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>shared[3]<sp/>=<sp/><ref refid="classConfiguration_1abeda8dee257cb5a21afa2d1f6fab758c" kindref="member">switch_frequency</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>shared[4]<sp/>=<sp/>average_frequency;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>shared[5]<sp/>=<sp/>current_frequency;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>shared[6]<sp/>=<sp/>worse_frequency;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::set(REALTIME_TEST_SEGMENT_ID,<sp/>REALTIME_TEST_OBJECT_ID,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared,<sp/>7);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>run<sp/>at<sp/>desired<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>spinner.<ref refid="classreal__time__tools_1_1Spinner_1aa07d4fa32ead44008daa73663508139d" kindref="member">spin</ref>();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="realtime__test_8cpp_1ae5ad5cbeccaedc03a48d3c7eaa803e79" kindref="member">print_usage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;usage:<sp/>realtime_test<sp/>mode<sp/>target_frequency<sp/>switch_frequency&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tvalid<sp/>modes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="realtime__test_8cpp_1aa25458bfbc45f5dca35aa414759acafd" kindref="member">MATRIX_COMPUTATION_NO_EIGEN_64</ref></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(matrix<sp/>multiplication<sp/>no<sp/>eigen)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="realtime__test_8cpp_1acbd189ad2c6253bfe6cd5a3a2e20d117" kindref="member">set_config</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_args,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>args,<sp/><ref refid="classConfiguration" kindref="compound">Configuration</ref>&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb_args<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="realtime__test_8cpp_1ae5ad5cbeccaedc03a48d3c7eaa803e79" kindref="member">print_usage</ref>();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>config.<ref refid="classConfiguration_1a7d5f2036941892a92f343c50a1606b4d" kindref="member">mode</ref><sp/>=<sp/>atoi(args[1]);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>config.<ref refid="classConfiguration_1ac6f09be53002bfb5404a241b3ce5486e" kindref="member">frequency</ref><sp/>=<sp/>atof(args[2]);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>config.<ref refid="classConfiguration_1abeda8dee257cb5a21afa2d1f6fab758c" kindref="member">switch_frequency</ref><sp/>=<sp/>atof(args[3]);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.<ref refid="classConfiguration_1a7d5f2036941892a92f343c50a1606b4d" kindref="member">mode</ref><sp/>!=<sp/><ref refid="realtime__test_8cpp_1aa25458bfbc45f5dca35aa414759acafd" kindref="member">MATRIX_COMPUTATION_NO_EIGEN_64</ref>)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>mode:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>config.<ref refid="classConfiguration_1a7d5f2036941892a92f343c50a1606b4d" kindref="member">mode</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="realtime__test_8cpp_1ae5ad5cbeccaedc03a48d3c7eaa803e79" kindref="member">print_usage</ref>();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="realtime__test_8cpp_1ae7878b49a48dc0ca3bcb00390121cf5f" kindref="member">clean_memory</ref>()<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>shared_memory::delete_segment(REALTIME_TEST_SEGMENT_ID);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>shared_memory::clear_shared_memory(REALTIME_TEST_OBJECT_ID);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="realtime__test_8cpp_1aba399b0a6a6e3bd37af95bd04e8def6f" kindref="member">stop</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="realtime__test_8cpp_1a5a5fc9f109f74c744e4e8739c6cae510" kindref="member">RUNNING</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="realtime__test_8cpp_1af4978f2751bdb780c0a97d67d65dd405" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_args,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>not<sp/>correctly<sp/>cleaned<sp/>during<sp/>previous<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="realtime__test_8cpp_1ae7878b49a48dc0ca3bcb00390121cf5f" kindref="member">clean_memory</ref>();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exit<sp/>on<sp/>ctrl+c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>stopping;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>stopping.sa_handler<sp/>=<sp/><ref refid="realtime__test_8cpp_1aba399b0a6a6e3bd37af95bd04e8def6f" kindref="member">stop</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>sigemptyset(&amp;stopping.sa_mask);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>stopping.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>sigaction(SIGINT,<sp/>&amp;stopping,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>creating<sp/>configuration<sp/>based<sp/>on<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="classConfiguration" kindref="compound">Configuration</ref><sp/>config;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="realtime__test_8cpp_1acbd189ad2c6253bfe6cd5a3a2e20d117" kindref="member">set_config</ref>(nb_args,<sp/>argv,<sp/>config);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\nctrl-c<sp/>for<sp/>exiting\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;run<sp/>realtime_test_display<sp/>to<sp/>see<sp/>stats\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeThread" kindref="compound">real_time_tools::RealTimeThread</ref><sp/>thread;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>real_time_tools::block_memory();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>real_time_tools::create_realtime_thread(thread,<sp/><ref refid="realtime__test_8cpp_1a54b1343eb90254009bd964c44996761b" kindref="member">thread_function</ref>,<sp/>&amp;config);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>real_time_tools::join_thread(thread);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="realtime__test_8cpp_1ae7878b49a48dc0ca3bcb00390121cf5f" kindref="member">clean_memory</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/bin/realtime_test.cpp"/>
  </compounddef>
</doxygen>
