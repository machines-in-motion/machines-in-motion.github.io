<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classreal__time__tools_1_1ThreadsafeHistoryInterface" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>real_time_tools::ThreadsafeHistoryInterface</compoundname>
    <includes refid="threadsafe__object_8hpp" local="no">threadsafe_object.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Type</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeHistoryInterface_1added71aaeb7d083fc12289814da69d1c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Type</type>
        <definition>virtual Type real_time_tools::ThreadsafeHistoryInterface&lt; Type &gt;::get_next</definition>
        <argsstring>(size_t id) const </argsstring>
        <name>get_next</name>
        <param>
          <type>size_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the element after the one with the given id. </para>        </briefdescription>
        <detaileddescription>
<para>if there is no newer element, then wait until one arrives.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>is the index of the element in the buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type the next element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="46" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a8b2e92985bb4799f557f55550c7783dd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t real_time_tools::ThreadsafeHistoryInterface&lt; Type &gt;::get_next_id</definition>
        <argsstring>(size_t id) const =0</argsstring>
        <name>get_next_id</name>
        <param>
          <type>size_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a8a10fa5abcb83d54fa33339e8800db6c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Type</type>
        <definition>virtual Type real_time_tools::ThreadsafeHistoryInterface&lt; Type &gt;::get_newest</definition>
        <argsstring>() const </argsstring>
        <name>get_newest</name>
        <briefdescription>
<para>Get the newest value, this function waits if it is empty. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Type the newest element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="57" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a3455ddd9e556045b17ab05307f4d3f51" prot="private" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t real_time_tools::ThreadsafeHistoryInterface&lt; Type &gt;::get_newest_id</definition>
        <argsstring>() const =0</argsstring>
        <name>get_newest_id</name>
        <briefdescription>
<para>get_newest_id </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a34424c202bd02b70bb2178f506a67602" prot="private" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Type</type>
        <definition>virtual Type real_time_tools::ThreadsafeHistoryInterface&lt; Type &gt;::get</definition>
        <argsstring>(size_t id) const =0</argsstring>
        <name>get</name>
        <param>
          <type>size_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the value whith a specific id. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a3304dfddbf562b835745be3ff363ab17" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void real_time_tools::ThreadsafeHistoryInterface&lt; Type &gt;::add</definition>
        <argsstring>()=0</argsstring>
        <name>add</name>
        <briefdescription>
<para>I guess this is to add a value but with no argument? </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Manuel, could you delete this class or provide an implementation? </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="81" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a template abstract interface class that define a data history. </para>    </briefdescription>
    <detaileddescription>
<para>This re-writting of the vector style class is thread safe. So it allows the user to use the object without having to deal with mutexes nor condition variables. This class is not used so far.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>is the type of the data to store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="38" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="37" bodyend="82"/>
    <listofallmembers>
      <member refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a3304dfddbf562b835745be3ff363ab17" prot="private" virt="pure-virtual"><scope>real_time_tools::ThreadsafeHistoryInterface</scope><name>add</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a34424c202bd02b70bb2178f506a67602" prot="private" virt="pure-virtual"><scope>real_time_tools::ThreadsafeHistoryInterface</scope><name>get</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a8a10fa5abcb83d54fa33339e8800db6c" prot="private" virt="virtual"><scope>real_time_tools::ThreadsafeHistoryInterface</scope><name>get_newest</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a3455ddd9e556045b17ab05307f4d3f51" prot="private" virt="pure-virtual"><scope>real_time_tools::ThreadsafeHistoryInterface</scope><name>get_newest_id</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1added71aaeb7d083fc12289814da69d1c" prot="private" virt="virtual"><scope>real_time_tools::ThreadsafeHistoryInterface</scope><name>get_next</name></member>
      <member refid="classreal__time__tools_1_1ThreadsafeHistoryInterface_1a8b2e92985bb4799f557f55550c7783dd" prot="private" virt="pure-virtual"><scope>real_time_tools::ThreadsafeHistoryInterface</scope><name>get_next_id</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
