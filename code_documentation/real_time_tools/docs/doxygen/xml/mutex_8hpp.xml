<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="mutex_8hpp" kind="file" language="C++">
    <compoundname>mutex.hpp</compoundname>
    <includes local="no">string</includes>
    <includes local="no">mutex</includes>
    <includes local="no">condition_variable</includes>
    <incdepgraph>
      <node id="550">
        <label>string</label>
      </node>
      <node id="552">
        <label>condition_variable</label>
      </node>
      <node id="549">
        <label>include/real_time_tools/mutex.hpp</label>
        <link refid="mutex.hpp"/>
        <childnode refid="550" relation="include">
        </childnode>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
      </node>
      <node id="551">
        <label>mutex</label>
      </node>
    </incdepgraph>
    <innerclass refid="classreal__time__tools_1_1RealTimeMutex" prot="public">real_time_tools::RealTimeMutex</innerclass>
    <innernamespace refid="namespacereal__time__tools">real_time_tools</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="mutex_8hpp_1a1acf1ce04ab7fe3a5972c0618adcbbac" prot="public" static="no">
        <name>rt_printf</name>
        <initializer>printf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/mutex.hpp" line="27" column="17" bodyfile="include/real_time_tools/mutex.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file implements a real time safe mutex with the dedicated libraries. The API tries to fit the std API as much as possible. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Maximilien Naveau license License BSD-3-Clause </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-11-19 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#ifndef<sp/>MUTEX_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUTEX_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XENOMAI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;native/mutex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;native/cond.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;native/timer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RT_PREEMPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>rt_printf<sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>defined(NON_REAL_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>rt_printf<sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacereal__time__tools" kindref="compound">real_time_tools</ref>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XENOMAI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RT_MUTEX<sp/><ref refid="mutex_8hpp_1a1ddc3c11c7ede92bbf52bafb61009ba2" kindref="member">RealTimeMutex_t</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RT_COND<sp/><ref refid="rt__mutex_8hpp_1a668d08f0241c505774e0fac47a16befe" kindref="member">rt_cond</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RT_PREEMPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_mutex_t*<sp/>RealTimeMutex_t;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_cond_t<sp/><ref refid="rt__mutex_8hpp_1a668d08f0241c505774e0fac47a16befe" kindref="member">rt_cond</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="mutex_8hpp_1a1ddc3c11c7ede92bbf52bafb61009ba2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::mutex*<sp/>RealTimeMutex_t;</highlight></codeline>
<codeline lineno="46" refid="mutex_8hpp_1a8a363a3ca3b0f37f2fd06ae393e871bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::condition_variable<sp/><ref refid="rt__mutex_8hpp_1a668d08f0241c505774e0fac47a16befe" kindref="member">rt_cond</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classreal__time__tools_1_1RealTimeMutex" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classreal__time__tools_1_1RealTimeMutex" kindref="compound">RealTimeMutex</ref>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58" refid="classreal__time__tools_1_1RealTimeMutex_1aef1777e27f3f2802ebcc7cb6db101df0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1aef1777e27f3f2802ebcc7cb6db101df0" kindref="member">RealTimeMutex</ref>(std::string<sp/>mutex_id=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a42edb13b07a983e48d9348bb20465962" kindref="member">mutex_id_</ref><sp/>=<sp/>mutex_id;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XENOMAI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>rt_mutex_create(&amp;<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>,<sp/>mutex_id.c_str());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RT_PREEMPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pthread_mutex_t();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>pthread_mutex_init(mutex_,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>defined(NON_REAL_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::mutex();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;RealTimeMutex::RealTimeMutex():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>while<sp/>creating<sp/>mutex<sp/>with<sp/>code<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82" refid="classreal__time__tools_1_1RealTimeMutex_1a86c9ab73fb02cf4a954735d56f4f23ed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a86c9ab73fb02cf4a954735d56f4f23ed" kindref="member">~RealTimeMutex</ref>()</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XENOMAI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>rt_mutex_delete(&amp;<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RT_PREEMPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>pthread_mutex_destroy(<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>defined(NON_REAL_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;RealTimeMutex::~RealTimeMutex():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>while<sp/>destroying<sp/>mutex<sp/>with<sp/>code<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XENOMAI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107" refid="classreal__time__tools_1_1RealTimeMutex_1a38d84501c3929f8dbb3c884299cfcb9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a38d84501c3929f8dbb3c884299cfcb9c" kindref="member">lock</ref>()</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XENOMAI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>rt_mutex_acquire(&amp;<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>,<sp/>TM_INFINITE);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RT_PREEMPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>pthread_mutex_lock(<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>defined(NON_REAL_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>-&gt;lock();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;RealTimeMutex::lock():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>while<sp/>locking<sp/>mutex<sp/>with<sp/>code<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126" refid="classreal__time__tools_1_1RealTimeMutex_1a9b85b1aa898c22197dffc3958e0ec60c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a9b85b1aa898c22197dffc3958e0ec60c" kindref="member">unlock</ref>()</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XENOMAI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>rt_mutex_release(&amp;<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RT_PREEMPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>pthread_mutex_unlock(<ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>defined(NON_REAL_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>-&gt;unlock();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;RealTimeMutex::unlock():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>while<sp/>locking<sp/>mutex<sp/>with<sp/>code<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>res);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148" refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" refkind="member"><highlight class="normal"><sp/><sp/>RealTimeMutex_t<sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a21e60b2fffe69eba625590fa3201404b" kindref="member">mutex_</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="classreal__time__tools_1_1RealTimeMutex_1a42edb13b07a983e48d9348bb20465962" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classreal__time__tools_1_1RealTimeMutex_1a42edb13b07a983e48d9348bb20465962" kindref="member">mutex_id_</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>Header<sp/>protection</highlight></codeline>
    </programlisting>
    <location file="include/real_time_tools/mutex.hpp"/>
  </compounddef>
</doxygen>
