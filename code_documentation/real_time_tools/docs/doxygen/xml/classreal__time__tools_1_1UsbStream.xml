<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classreal__time__tools_1_1UsbStream" kind="class" language="C++" prot="public">
    <compoundname>real_time_tools::UsbStream</compoundname>
    <includes refid="usb__stream_8hpp" local="no">usb_stream.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classreal__time__tools_1_1UsbStream_1ac8d1e2727668e9549dda2038248943d5" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string real_time_tools::UsbStream::file_name_</definition>
        <argsstring></argsstring>
        <name>file_name_</name>
        <briefdescription>
<para>Private methods. </para>        </briefdescription>
        <detaileddescription>
<para>Attributes This is the path tot the device file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="201" column="1" bodyfile="include/real_time_tools/usb_stream.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1UsbStream_1a52bf9e29fde33e865daef464a01738af" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int real_time_tools::UsbStream::file_id_</definition>
        <argsstring></argsstring>
        <name>file_id_</name>
        <briefdescription>
<para>This is the port id. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="205" column="1" bodyfile="include/real_time_tools/usb_stream.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1UsbStream_1a272dd207ec047d29b00e099bff188ac6" prot="private" static="no" mutable="no">
        <type>ssize_t</type>
        <definition>ssize_t real_time_tools::UsbStream::return_value_</definition>
        <argsstring></argsstring>
        <name>return_value_</name>
        <briefdescription>
<para>This is the return value of the different POSIX/Xenomai methods. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="209" column="1" bodyfile="include/real_time_tools/usb_stream.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1UsbStream_1a76378aaeca606027408ebd5c7f06e97e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::timeout_set_</definition>
        <argsstring></argsstring>
        <name>timeout_set_</name>
        <briefdescription>
<para>Verify that the timeout value has been set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="213" column="1" bodyfile="include/real_time_tools/usb_stream.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1UsbStream_1afa70d692f2715d9a42e1a2d3a91f876a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double real_time_tools::UsbStream::timeout_</definition>
        <argsstring></argsstring>
        <name>timeout_</name>
        <briefdescription>
<para>The timeout for the poll mode in seconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="217" column="1" bodyfile="include/real_time_tools/usb_stream.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1UsbStream_1ae5a19cde3cc21a0c878be3fe4cb54f2d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; real_time_tools::UsbStream::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <briefdescription>
<para>Internal buffer that is supposed to be much bigger than the message sent or received to avoid memory problems. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="244" column="1" bodyfile="include/real_time_tools/usb_stream.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1aaed92c7077a7eefb866a05990ab3e25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>real_time_tools::UsbStream::UsbStream</definition>
        <argsstring>()</argsstring>
        <name>UsbStream</name>
        <briefdescription>
<para>Construct a new fstream object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="92" column="1" bodyfile="src/usb_stream.cpp" bodystart="18" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1a4b82b48b6a15abfe115ab831c537df0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>real_time_tools::UsbStream::~UsbStream</definition>
        <argsstring>()</argsstring>
        <name>~UsbStream</name>
        <briefdescription>
<para>Destroy the fstream object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="97" column="1" bodyfile="src/usb_stream.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1a1f6915c42d9742ced10e99d2edf7d8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::open_device</definition>
        <argsstring>(const std::string &amp;file_name)</argsstring>
        <name>open_device</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>This method allows you to open a port or a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="104" column="1" bodyfile="src/usb_stream.cpp" bodystart="44" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1adb0c41dc7a9603022a0a1e19c9ab8292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::set_port_config</definition>
        <argsstring>(const PortConfig &amp;user_config)</argsstring>
        <name>set_port_config</name>
        <param>
          <type>const <ref refid="classreal__time__tools_1_1PortConfig" kindref="compound">PortConfig</ref> &amp;</type>
          <declname>user_config</declname>
        </param>
        <briefdescription>
<para>Set the _port_config object parametrize the port configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_config</parametername>
</parameternamelist>
<parameterdescription>
<para>is the configuration of the port. (see struct <ref refid="classreal__time__tools_1_1PortConfig" kindref="compound">PortConfig</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="113" column="1" bodyfile="src/usb_stream.cpp" bodystart="75" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1acea75055bb37f2a7f351300dbaf28d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::close_device</definition>
        <argsstring>()</argsstring>
        <name>close_device</name>
        <briefdescription>
<para>Stop the device communication. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true success </para></simplesect>
<simplesect kind="return"><para>false problem occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="121" column="1" bodyfile="src/usb_stream.cpp" bodystart="309" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1a028f39fcd8c97c49aacf48fdaa8302c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::read_device</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; &amp;msg, const bool stream_on=true)</argsstring>
        <name>read_device</name>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>stream_on</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Read the port or the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the command sent before this command was executed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream_on</parametername>
</parameternamelist>
<parameterdescription>
<para>define if we just read on the fly or we wait until we get the correct amount of data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Check the potential error:</para><para><itemizedlist>
<listitem><para>First we check if the port could be read at all.</para></listitem><listitem><para>Then we check if the port was read before the timeout</para></listitem><listitem><para>Then we check the validity of the message</para></listitem></itemizedlist>
</para>        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="132" column="1" bodyfile="src/usb_stream.cpp" bodystart="336" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1aa9fdd0d43fbf0cddbffb65538af60321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::write_device</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;msg)</argsstring>
        <name>write_device</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Write msg in the port or the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true success </para></simplesect>
<simplesect kind="return"><para>false problem occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="140" column="1" bodyfile="src/usb_stream.cpp" bodystart="436" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1a6e13bacd3b24a8e60b27cbcefefdb3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::activate_stream_mode</definition>
        <argsstring>()</argsstring>
        <name>activate_stream_mode</name>
        <briefdescription>
<para>Activate the stream mode. </para>        </briefdescription>
        <detaileddescription>
<para>The read method is not blocking.</para><para><simplesect kind="return"><para>true success </para></simplesect>
<simplesect kind="return"><para>false problem occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1a1c61741541acfca7ecf6deaf0b8ad1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::set_poll_mode_timeout</definition>
        <argsstring>(double timeout_in_second)</argsstring>
        <name>set_poll_mode_timeout</name>
        <param>
          <type>double</type>
          <declname>timeout_in_second</declname>
        </param>
        <briefdescription>
<para>Set the poll mode timeout. </para>        </briefdescription>
        <detaileddescription>
<para>The read_device method is blocking until timeout.</para><para><simplesect kind="return"><para>true success </para></simplesect>
<simplesect kind="return"><para>false problem occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="157" column="1" bodyfile="src/usb_stream.cpp" bodystart="476" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1a0bc5fb5783f1833341d55b9b013be6c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::flush</definition>
        <argsstring>(int duration_ms=150)</argsstring>
        <name>flush</name>
        <param>
          <type>int</type>
          <declname>duration_ms</declname>
          <defval>150</defval>
        </param>
        <briefdescription>
<para>Flush the current port. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="165" column="1" bodyfile="src/usb_stream.cpp" bodystart="535" bodyend="561"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1ac98f3cad23dbc85f47405c3809a22198" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string real_time_tools::UsbStream::msg_debug_string</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;msg, long int until=-1)</argsstring>
        <name>msg_debug_string</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>until</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Display the uint8_t message in hexadecimal format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the message to be displayed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>until</parametername>
</parameternamelist>
<parameterdescription>
<para>is a bound on the number of displayed bytes. &quot;-1&quot; means display all. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string the debug string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="175" column="1" bodyfile="src/usb_stream.cpp" bodystart="504" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1UsbStream_1ae3e565f6ea54fb5c4666b98745e9f87f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool real_time_tools::UsbStream::test_msg_equal</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;msg1, const std::vector&lt; uint8_t &gt; &amp;msg2)</argsstring>
        <name>test_msg_equal</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>msg1</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>msg2</declname>
        </param>
        <briefdescription>
<para>Test if two message are the same or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/usb_stream.hpp" line="186" column="1" bodyfile="src/usb_stream.cpp" bodystart="520" bodyend="533"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class has for purpose to interact with devices and files alike as the linux philosophie does. </para>    </briefdescription>
    <detaileddescription>
<para>Depending on the current Operating system it uses the available real time APIs. </para>    </detaileddescription>
    <location file="include/real_time_tools/usb_stream.hpp" line="85" column="1" bodyfile="include/real_time_tools/usb_stream.hpp" bodystart="85" bodyend="246"/>
    <listofallmembers>
      <member refid="classreal__time__tools_1_1UsbStream_1a6e13bacd3b24a8e60b27cbcefefdb3f4" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>activate_stream_mode</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1ae5a19cde3cc21a0c878be3fe4cb54f2d" prot="private" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>buffer_</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1acea75055bb37f2a7f351300dbaf28d9e" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>close_device</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1a52bf9e29fde33e865daef464a01738af" prot="private" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>file_id_</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1ac8d1e2727668e9549dda2038248943d5" prot="private" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>file_name_</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1a0bc5fb5783f1833341d55b9b013be6c6" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>flush</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1ac98f3cad23dbc85f47405c3809a22198" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>msg_debug_string</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1a1f6915c42d9742ced10e99d2edf7d8b1" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>open_device</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1a028f39fcd8c97c49aacf48fdaa8302c8" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>read_device</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1a272dd207ec047d29b00e099bff188ac6" prot="private" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>return_value_</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1a1c61741541acfca7ecf6deaf0b8ad1fc" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>set_poll_mode_timeout</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1adb0c41dc7a9603022a0a1e19c9ab8292" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>set_port_config</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1ae3e565f6ea54fb5c4666b98745e9f87f" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>test_msg_equal</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1afa70d692f2715d9a42e1a2d3a91f876a" prot="private" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>timeout_</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1a76378aaeca606027408ebd5c7f06e97e" prot="private" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>timeout_set_</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1aaed92c7077a7eefb866a05990ab3e25c" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>UsbStream</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1aa9fdd0d43fbf0cddbffb65538af60321" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>write_device</name></member>
      <member refid="classreal__time__tools_1_1UsbStream_1a4b82b48b6a15abfe115ab831c537df0a" prot="public" virt="non-virtual"><scope>real_time_tools::UsbStream</scope><name>~UsbStream</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
