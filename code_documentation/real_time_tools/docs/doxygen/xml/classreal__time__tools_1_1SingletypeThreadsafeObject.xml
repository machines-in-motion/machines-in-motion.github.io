<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classreal__time__tools_1_1SingletypeThreadsafeObject" kind="class" language="C++" prot="public">
    <compoundname>real_time_tools::SingletypeThreadsafeObject</compoundname>
    <includes refid="threadsafe__object_8hpp" local="no">threadsafe_object.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Type</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>SIZE</declname>
        <defname>SIZE</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1abb449516269c85f927246182abee83ff" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::array&lt; Type, SIZE &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::array&lt;Type, SIZE&gt; &gt; real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
<para>This is the data buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="222" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a7b242bedc7cd23b419d7928e661fdc10" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::array&lt; size_t, SIZE &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::array&lt;size_t, SIZE&gt; &gt; real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::modification_counts_</definition>
        <argsstring></argsstring>
        <name>modification_counts_</name>
        <briefdescription>
<para>This is counting the data modification occurences for each individual buffers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="227" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a3475e1d35b7af07acdbf74c0170ed45d" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; size_t &gt;</type>
        <definition>std::shared_ptr&lt;size_t&gt; real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::total_modification_count_</definition>
        <argsstring></argsstring>
        <name>total_modification_count_</name>
        <briefdescription>
<para>This is counting the all data modification occurences for all buffer. </para>        </briefdescription>
        <detaileddescription>
<para>/todo Can&apos;t we just some the modification_counts_ array whenever needed? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="233" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a1a27e1934ed7df5119e0e91ca228ac73" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, size_t &gt;</type>
        <definition>std::map&lt;std::string, size_t&gt; real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::name_to_index_</definition>
        <argsstring></argsstring>
        <name>name_to_index_</name>
        <briefdescription>
<para>This is the map that allow to deal with data by their names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="238" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a628a0eb20c8a683a95607468653c7b2e" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; std::condition_variable &gt;</type>
        <definition>std::shared_ptr&lt;std::condition_variable&gt; real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::condition_</definition>
        <argsstring></argsstring>
        <name>condition_</name>
        <briefdescription>
<para>This condition variable is used to wait untils any data has been changed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="244" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1aa0bbdbc03580868de0a04e5be234408d" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; std::mutex &gt;</type>
        <definition>std::shared_ptr&lt;std::mutex&gt; real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::condition_mutex_</definition>
        <argsstring></argsstring>
        <name>condition_mutex_</name>
        <briefdescription>
<para>This is the mutex of the condition varaible. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="248" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a55f7e015fa4915ea1c3af34757c2f671" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; std::array&lt; std::mutex, SIZE &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::array&lt;std::mutex, SIZE&gt; &gt; real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::data_mutexes_</definition>
        <argsstring></argsstring>
        <name>data_mutexes_</name>
        <briefdescription>
<para>These are the individual mutexes of each data upon setting and getting. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="253" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a00771da99b515b82cd0b10a431b4ccb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::SingletypeThreadsafeObject</definition>
        <argsstring>()</argsstring>
        <name>SingletypeThreadsafeObject</name>
        <briefdescription>
<para>Construct a new <ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject" kindref="compound">SingletypeThreadsafeObject</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="98" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hxx" bodystart="20" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1ad33b8afc1581cc7adea5881c9d775128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::SingletypeThreadsafeObject</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>SingletypeThreadsafeObject</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject" kindref="compound">SingletypeThreadsafeObject</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="105" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hxx" bodystart="39" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1ace9ae42bea412eadcd251097089c30cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::wait_for_update</definition>
        <argsstring>(const size_t &amp;index) const </argsstring>
        <name>wait_for_update</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Wait until the data at the given index is modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="112" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hxx" bodystart="83" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a222e0fbdabcdccd95e9d66663e849a58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::wait_for_update</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>wait_for_update</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Wait until the data at the given name is modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="119" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1ad86f983aa4366695415ca3816002a3fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::wait_for_update</definition>
        <argsstring>() const </argsstring>
        <name>wait_for_update</name>
        <briefdescription>
<para>Wait unitl any data has been changed and return its index. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="129" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hxx" bodystart="107" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1af09735c0e632800487bc50e4f2f7f512" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Getters. </para>        </briefdescription>
        <detaileddescription>
<para>get size.</para><para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="140" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1adb4e58f3057002b931e570374cb8604e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::get</definition>
        <argsstring>(const size_t &amp;index=0) const </argsstring>
        <name>get</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the data by its index in the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="151" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a72ed3358cc661ea9d5681ee359aed2e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::get</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the data by its name in the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="163" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a08d539478b86e0243de5fe2fa1680c06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>INDEX</declname>
            <defname>INDEX</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Type</type>
        <definition>Type real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
<para>Get the data by its index in the buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Index is solved during compile time</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>INDEX=0</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="175" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a6d09deb1c28dcddee0a3986184af7bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::set</definition>
        <argsstring>(const Type &amp;datum, const size_t &amp;index=0)</argsstring>
        <name>set</name>
        <param>
          <type>const Type &amp;</type>
          <declname>datum</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Setters. </para>        </briefdescription>
        <detaileddescription>
<para>Set one element at a designated index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datum</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="190" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hxx" bodystart="60" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1a1f852a4b68d3a0ff112cb9c5d7c6b33e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>INDEX</declname>
            <defname>INDEX</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::set</definition>
        <argsstring>(Type datum)</argsstring>
        <name>set</name>
        <param>
          <type>Type</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
<para>Set one element at a designated index. </para>        </briefdescription>
        <detaileddescription>
<para>Warning the index is resolved at compile time. This is used for backward comaptibility. <xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>&quot;This is used for backward comaptibility.&quot;, Manuel Which bakward?</para></xrefdescription></xrefsect></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>INDEX=0</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datum</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="201" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classreal__time__tools_1_1SingletypeThreadsafeObject_1ab5776496cf4fa4a015101c81811eb9fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void real_time_tools::SingletypeThreadsafeObject&lt; Type, SIZE &gt;::set</definition>
        <argsstring>(const Type &amp;datum, const std::string &amp;name)</argsstring>
        <name>set</name>
        <param>
          <type>const Type &amp;</type>
          <declname>datum</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set one element using at a designated name. </para>        </briefdescription>
        <detaileddescription>
<para>Internally this name is map to an index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datum</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="213" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="213" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classreal__time__tools_1_1SingletypeThreadsafeObject" kindref="compound">SingletypeThreadsafeObject</ref> is a thread safe object. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>is the data type to store in the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>is the size of the buffer. It is better to know it at compile time to be 100% real time safe. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="include/real_time_tools/threadsafe/threadsafe_object.hpp" line="93" column="1" bodyfile="include/real_time_tools/threadsafe/threadsafe_object.hpp" bodystart="92" bodyend="254"/>
    <listofallmembers>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a628a0eb20c8a683a95607468653c7b2e" prot="private" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>condition_</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1aa0bbdbc03580868de0a04e5be234408d" prot="private" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>condition_mutex_</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1abb449516269c85f927246182abee83ff" prot="private" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>data_</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a55f7e015fa4915ea1c3af34757c2f671" prot="private" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>data_mutexes_</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1adb4e58f3057002b931e570374cb8604e" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>get</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a72ed3358cc661ea9d5681ee359aed2e4" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>get</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a08d539478b86e0243de5fe2fa1680c06" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>get</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a7b242bedc7cd23b419d7928e661fdc10" prot="private" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>modification_counts_</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a1a27e1934ed7df5119e0e91ca228ac73" prot="private" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>name_to_index_</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a6d09deb1c28dcddee0a3986184af7bd5" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>set</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a1f852a4b68d3a0ff112cb9c5d7c6b33e" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>set</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1ab5776496cf4fa4a015101c81811eb9fc" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>set</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a00771da99b515b82cd0b10a431b4ccb1" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>SingletypeThreadsafeObject</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1ad33b8afc1581cc7adea5881c9d775128" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>SingletypeThreadsafeObject</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1af09735c0e632800487bc50e4f2f7f512" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>size</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a3475e1d35b7af07acdbf74c0170ed45d" prot="private" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>total_modification_count_</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1ace9ae42bea412eadcd251097089c30cc" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>wait_for_update</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1a222e0fbdabcdccd95e9d66663e849a58" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>wait_for_update</name></member>
      <member refid="classreal__time__tools_1_1SingletypeThreadsafeObject_1ad86f983aa4366695415ca3816002a3fd" prot="public" virt="non-virtual"><scope>real_time_tools::SingletypeThreadsafeObject</scope><name>wait_for_update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
