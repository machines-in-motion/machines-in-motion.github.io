<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="demo__multiprocess__read_8cpp" kind="file" language="C++">
    <compoundname>demo_multiprocess_read.cpp</compoundname>
    <includes local="yes">shared_memory/demos/item.hpp</includes>
    <includes refid="multiprocess__time__series_8hpp" local="yes">time_series/multiprocess_time_series.hpp</includes>
    <incdepgraph>
      <node id="95">
        <label>time_series/internal/base.hpp</label>
        <link refid="base_8hpp_source"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>limits</label>
      </node>
      <node id="90">
        <label>shared_memory/demos/item.hpp</label>
      </node>
      <node id="104">
        <label>shared_memory/lock.hpp</label>
      </node>
      <node id="106">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="107">
        <label>base.hxx</label>
        <link refid="base_8hxx_source"/>
      </node>
      <node id="89">
        <label>demos/demo_multiprocess_read.cpp</label>
        <link refid="demo_multiprocess_read.cpp"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>shared_memory/mutex.hpp</label>
      </node>
      <node id="97">
        <label>cmath</label>
      </node>
      <node id="92">
        <label>time_series/interface.hpp</label>
        <link refid="interface_8hpp"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>time_series/internal/specialized_classes.hpp</label>
        <link refid="specialized__classes_8hpp_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>condition_variable</label>
      </node>
      <node id="91">
        <label>time_series/multiprocess_time_series.hpp</label>
        <link refid="multiprocess__time__series_8hpp_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>vector</label>
      </node>
      <node id="103">
        <label>shared_memory/condition_variable.hpp</label>
      </node>
      <node id="93">
        <label>cstddef</label>
      </node>
      <node id="100">
        <label>mutex</label>
      </node>
      <node id="96">
        <label>chrono</label>
      </node>
      <node id="102">
        <label>shared_memory/array.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="demo__multiprocess__read_8cpp_1aa2341624eba49f3cdec3d9656b97cd79" prot="public" static="no">
        <name>SEGMENT_ID</name>
        <initializer>&quot;demo_time_series_multiprocess&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_read.cpp" line="15" column="9" bodyfile="demos/demo_multiprocess_read.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="demo__multiprocess__read_8cpp_1ad279f2fa0f02868c901c0d29d41af6d6" prot="public" static="no">
        <name>TIMESERIES_SIZE</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_read.cpp" line="16" column="9" bodyfile="demos/demo_multiprocess_read.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="demo__multiprocess__read_8cpp_1a80d365cd1fbfb7d75ecfab72e362b360" prot="public" static="no">
        <type><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">time_series::MultiprocessTimeSeries</ref>&lt; shared_memory::Item&lt; 10 &gt; &gt;</type>
        <definition>typedef time_series::MultiprocessTimeSeries&lt;shared_memory::Item&lt;10&gt; &gt; TimeSeries</definition>
        <argsstring></argsstring>
        <name>TimeSeries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_read.cpp" line="18" column="1" bodyfile="demos/demo_multiprocess_read.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__multiprocess__read_8cpp_1a13a43e6d814de94978c515cb084873b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para>read (and print) items written by demo_multiprocess_write </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_read.cpp" line="23" column="1" bodyfile="demos/demo_multiprocess_read.cpp" bodystart="23" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="demo__multiprocess__read_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_read.cpp" line="44" column="1" bodyfile="demos/demo_multiprocess_read.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Read data from a shared timed series. This demo does nothing until demo_multiprocess_write is started. ctrl+c for exit. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, Max Planck Gesellschaft. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#include<sp/>&quot;shared_memory/demos/item.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;time_series/multiprocess_time_series.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEGMENT_ID<sp/>&quot;demo_time_series_multiprocess&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIMESERIES_SIZE<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">time_series::MultiprocessTimeSeries&lt;shared_memory::Item&lt;10&gt;</ref>&gt;<sp/><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">TimeSeries</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__multiprocess__read_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run</ref>()</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>previous<sp/>run<sp/>did<sp/>not<sp/>exit<sp/>cleanly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>time_series::clear_memory(SEGMENT_ID);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>warning:<sp/>any<sp/>&quot;demo_multiprocess_write&quot;<sp/>demo<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>hang<sp/>or<sp/>crash<sp/>when<sp/>this<sp/>process<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clean_on_destruction<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">TimeSeries</ref><sp/>ts(SEGMENT_ID,<sp/>TIMESERIES_SIZE,<sp/>clean_on_destruction);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_series::Index<sp/>index<sp/>=<sp/>ts.newest_timeindex();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::Item&lt;10&gt;<sp/>item<sp/>=<sp/>ts[index];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.compact_print();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts.wait_for_timeindex(index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="demo__multiprocess__read_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_multiprocess_read.cpp"/>
  </compounddef>
</doxygen>
