<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtime__series_1_1TimeSeriesInterface" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>time_series::TimeSeriesInterface</compoundname>
    <derivedcompoundref refid="classtime__series_1_1internal_1_1TimeSeriesBase" prot="public" virt="non-virtual">time_series::internal::TimeSeriesBase&lt; P, T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtime__series_1_1internal_1_1TimeSeriesBase" prot="public" virt="non-virtual">time_series::internal::TimeSeriesBase&lt; internal::MultiProcesses, T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtime__series_1_1internal_1_1TimeSeriesBase" prot="public" virt="non-virtual">time_series::internal::TimeSeriesBase&lt; internal::SingleProcess, T &gt;</derivedcompoundref>
    <includes refid="interface_8hpp" local="no">interface.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1a3f15f770cc9620d11ec1e7a123977cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Index</type>
        <definition>virtual Index time_series::TimeSeriesInterface&lt; T &gt;::newest_timeindex</definition>
        <argsstring>()=0</argsstring>
        <name>newest_timeindex</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aac02c35ae67fad14a3567dd01565d058">newest_timeindex</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aac02c35ae67fad14a3567dd01565d058">newest_timeindex</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aac02c35ae67fad14a3567dd01565d058">newest_timeindex</reimplementedby>
        <briefdescription>
<para>returns <formula id="2">$ newest $</formula>. waits if the time_series is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1a46cf7fc73adfcc400fbf40c22aa7268f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Index</type>
        <definition>virtual Index time_series::TimeSeriesInterface&lt; T &gt;::count_appended_elements</definition>
        <argsstring>()=0</argsstring>
        <name>count_appended_elements</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a1e384606bee9664d05803f33235a0d60">count_appended_elements</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a1e384606bee9664d05803f33235a0d60">count_appended_elements</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a1e384606bee9664d05803f33235a0d60">count_appended_elements</reimplementedby>
        <briefdescription>
<para>returns the number of element that has been contained in the queue, i.e. the number of elements that have been added from the start. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1a96635723dc065cebb65d63de4f54b4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Index</type>
        <definition>virtual Index time_series::TimeSeriesInterface&lt; T &gt;::oldest_timeindex</definition>
        <argsstring>()=0</argsstring>
        <name>oldest_timeindex</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ace0e19f7ce8e25e50cb704ba58a80d35">oldest_timeindex</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ace0e19f7ce8e25e50cb704ba58a80d35">oldest_timeindex</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ace0e19f7ce8e25e50cb704ba58a80d35">oldest_timeindex</reimplementedby>
        <briefdescription>
<para>returns <formula id="7">$ oldest $</formula>. waits if the time_series is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1ad3b66b6b5f0f763d440731c50e41b4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>T</type>
        <definition>virtual T time_series::TimeSeriesInterface&lt; T &gt;::newest_element</definition>
        <argsstring>()=0</argsstring>
        <name>newest_element</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a12bd405933d326fd8396fb2bc1267223">newest_element</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a12bd405933d326fd8396fb2bc1267223">newest_element</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a12bd405933d326fd8396fb2bc1267223">newest_element</reimplementedby>
        <briefdescription>
<para>returns <formula id="8">$ X_{newest} $</formula>. waits if the time_series is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1a3149f64961e08315eb06798d0f075333" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>T</type>
        <definition>virtual T time_series::TimeSeriesInterface&lt; T &gt;::operator[]</definition>
        <argsstring>(const Index &amp;timeindex)=0</argsstring>
        <name>operator[]</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aa7267458e4fadff7314037a4bd1d53bb">operator[]</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aa7267458e4fadff7314037a4bd1d53bb">operator[]</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aa7267458e4fadff7314037a4bd1d53bb">operator[]</reimplementedby>
        <param>
          <type>const Index &amp;</type>
          <declname>timeindex</declname>
        </param>
        <briefdescription>
<para>returns <formula id="9">$ X_{timeindex} $</formula>. waits if the time_series is empty or if <formula id="10">$timeindex &gt; newest $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1aaeb745c8c13170a645b25170f0b035f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Timestamp</type>
        <definition>virtual Timestamp time_series::TimeSeriesInterface&lt; T &gt;::timestamp_ms</definition>
        <argsstring>(const Index &amp;timeindex)=0</argsstring>
        <name>timestamp_ms</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a1e4c7ca710bb14e7dce57a1dd9c4f929">timestamp_ms</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a1e4c7ca710bb14e7dce57a1dd9c4f929">timestamp_ms</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a1e4c7ca710bb14e7dce57a1dd9c4f929">timestamp_ms</reimplementedby>
        <param>
          <type>const Index &amp;</type>
          <declname>timeindex</declname>
        </param>
        <briefdescription>
<para>returns the time in miliseconds when <formula id="9">$ X_{timeindex} $</formula> was appended. Waits if the time_series is empty or if <formula id="10">$timeindex &gt; newest $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1acfb468e6e1766fe4b566189d3b888e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Timestamp</type>
        <definition>virtual Timestamp time_series::TimeSeriesInterface&lt; T &gt;::timestamp_s</definition>
        <argsstring>(const Index &amp;timeindex)=0</argsstring>
        <name>timestamp_s</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aacca694af4c53fa4ae9cd3593c12bf58">timestamp_s</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aacca694af4c53fa4ae9cd3593c12bf58">timestamp_s</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aacca694af4c53fa4ae9cd3593c12bf58">timestamp_s</reimplementedby>
        <param>
          <type>const Index &amp;</type>
          <declname>timeindex</declname>
        </param>
        <briefdescription>
<para>returns the time in seconds when <formula id="9">$ X_{timeindex} $</formula> was appended. Waits if the time_series is empty or if <formula id="10">$timeindex &gt; newest $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1aa09c55259a1f34491b5ecdd1505ffdbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool time_series::TimeSeriesInterface&lt; T &gt;::wait_for_timeindex</definition>
        <argsstring>(const Index &amp;timeindex, const double &amp;max_duration_s=std::numeric_limits&lt; double &gt;::quiet_NaN())=0</argsstring>
        <name>wait_for_timeindex</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a5651e522492514408e38a5b99e144a06">wait_for_timeindex</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a5651e522492514408e38a5b99e144a06">wait_for_timeindex</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a5651e522492514408e38a5b99e144a06">wait_for_timeindex</reimplementedby>
        <param>
          <type>const Index &amp;</type>
          <declname>timeindex</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>max_duration_s</declname>
          <defval>std::numeric_limits&lt; double &gt;::quiet_NaN()</defval>
        </param>
        <briefdescription>
<para>Wait until the defined time index is reached. If the input time is below the oldest time index that have been registered read an exception is return. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1a90f6ed15d82006dbc7ef7783d9f6ff7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t time_series::TimeSeriesInterface&lt; T &gt;::length</definition>
        <argsstring>()=0</argsstring>
        <name>length</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ae6da9bd31ca06b30413f2073bc2e48e6">length</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ae6da9bd31ca06b30413f2073bc2e48e6">length</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ae6da9bd31ca06b30413f2073bc2e48e6">length</reimplementedby>
        <briefdescription>
<para>returns the length of the time_series, i.e. <formula id="11">$0$</formula> if it is empty, otherwise <formula id="12">$newest - oldest +1 $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1aded8927e82c060aa3367f17dfd59a8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t time_series::TimeSeriesInterface&lt; T &gt;::max_length</definition>
        <argsstring>()=0</argsstring>
        <name>max_length</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aee1bf636a094a3068f9de731688c3972">max_length</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aee1bf636a094a3068f9de731688c3972">max_length</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1aee1bf636a094a3068f9de731688c3972">max_length</reimplementedby>
        <briefdescription>
<para>returns the maximum length of the time serie. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1a2758b463ea41393a24ea37ccd0f5feb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool time_series::TimeSeriesInterface&lt; T &gt;::has_changed_since_tag</definition>
        <argsstring>()=0</argsstring>
        <name>has_changed_since_tag</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a38511cb227e3e423922eaaea626a15ee">has_changed_since_tag</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a38511cb227e3e423922eaaea626a15ee">has_changed_since_tag</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a38511cb227e3e423922eaaea626a15ee">has_changed_since_tag</reimplementedby>
        <briefdescription>
<para>returns boolean indicating whether new elements have been appended since the last time the <ref refid="classtime__series_1_1TimeSeriesInterface_1a34e881c9496901127baf1d907d7399ac" kindref="member">tag()</ref> function was called. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1a34e881c9496901127baf1d907d7399ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void time_series::TimeSeriesInterface&lt; T &gt;::tag</definition>
        <argsstring>(const Index &amp;timeindex)=0</argsstring>
        <name>tag</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ad20c1f90dd2f9016f32132caa3f976f7">tag</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ad20c1f90dd2f9016f32132caa3f976f7">tag</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1ad20c1f90dd2f9016f32132caa3f976f7">tag</reimplementedby>
        <param>
          <type>const Index &amp;</type>
          <declname>timeindex</declname>
        </param>
        <briefdescription>
<para>tags the current time_series, can later be used to check whether new elements have been added </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1aa71ab509ac29c5da681aee9dbf65f2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Index</type>
        <definition>virtual Index time_series::TimeSeriesInterface&lt; T &gt;::tagged_timeindex</definition>
        <argsstring>()=0</argsstring>
        <name>tagged_timeindex</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1adadeeff6e42776853e26aa5f74264909">tagged_timeindex</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1adadeeff6e42776853e26aa5f74264909">tagged_timeindex</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1adadeeff6e42776853e26aa5f74264909">tagged_timeindex</reimplementedby>
        <briefdescription>
<para>returns the index at which the time series has been tagged. Returns the newest timeindex if the time series has never been tagged. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1TimeSeriesInterface_1a0782c522287cf041fc253529b61041f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void time_series::TimeSeriesInterface&lt; T &gt;::append</definition>
        <argsstring>(const T &amp;element)=0</argsstring>
        <name>append</name>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a09293ae95cdc492e7de78729b0e0e398">append</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a09293ae95cdc492e7de78729b0e0e398">append</reimplementedby>
        <reimplementedby refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a09293ae95cdc492e7de78729b0e0e398">append</reimplementedby>
        <param>
          <type>const T &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>appends a new element to the time_series, e.g. we go from <formula id="13">$ X_{1:10} $</formula> to <formula id="14">$ X_{1:11} $</formula> (where <formula id="15">$ X_{11}=$</formula> element). if the time_series length is already equal to its max_length, then the oldest element is discarded, e.g. for a max_length = 10 we would go from <formula id="13">$ X_{1:10} $</formula> to <formula id="16">$ X_{2:11} $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/interface.hpp" line="111" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for time series. </para>    </briefdescription>
    <detaileddescription>
<para>A time_series implements <formula id="0">$ X_{{oldest}:{newest}} $</formula> which can safely be accessed from either multiple threads or multiple processes.</para><para>this object has the following properties:<itemizedlist>
<listitem><para>an oldest timeindex <formula id="1">$ oldest$</formula>,</para></listitem><listitem><para>a newest timeindex <formula id="2">$ newest $</formula>,</para></listitem><listitem><para>a value <formula id="3">$ X_i $</formula> for each <formula id="4">$ i \in \{oldest, oldest + 1 , ..., newest\} $</formula>,</para></listitem><listitem><para>a length <formula id="5">$length$</formula></para></listitem><listitem><para>and a maximum length <formula id="6">$maxlength$</formula> </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="81">
        <label>time_series::TimeSeriesInterface&lt; T &gt;</label>
        <link refid="classtime__series_1_1TimeSeriesInterface"/>
      </node>
      <node id="85">
        <label>TimeSeriesBase&lt; internal::SingleProcess, T &gt;</label>
        <link refid="classtime__series_1_1internal_1_1TimeSeriesBase"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>time_series::MultiprocessTimeSeries&lt; T &gt;</label>
        <link refid="classtime__series_1_1MultiprocessTimeSeries"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>TimeSeriesBase&lt; internal::MultiProcesses, T &gt;</label>
        <link refid="classtime__series_1_1internal_1_1TimeSeriesBase"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
      </node>
      <node id="86">
        <label>time_series::TimeSeries&lt; T &gt;</label>
        <link refid="classtime__series_1_1TimeSeries"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>time_series::internal::TimeSeriesBase&lt; T &gt;</label>
        <link refid="classtime__series_1_1internal_1_1TimeSeriesBase"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/time_series/interface.hpp" line="33" column="1" bodyfile="include/time_series/interface.hpp" bodystart="32" bodyend="112"/>
    <listofallmembers>
      <member refid="classtime__series_1_1TimeSeriesInterface_1a0782c522287cf041fc253529b61041f9" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>append</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1a46cf7fc73adfcc400fbf40c22aa7268f" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>count_appended_elements</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1a2758b463ea41393a24ea37ccd0f5feb4" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>has_changed_since_tag</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1a90f6ed15d82006dbc7ef7783d9f6ff7a" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>length</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1aded8927e82c060aa3367f17dfd59a8ec" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>max_length</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1ad3b66b6b5f0f763d440731c50e41b4cb" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>newest_element</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1a3f15f770cc9620d11ec1e7a123977cf3" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>newest_timeindex</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1a96635723dc065cebb65d63de4f54b4a9" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>oldest_timeindex</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1a3149f64961e08315eb06798d0f075333" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>operator[]</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1a34e881c9496901127baf1d907d7399ac" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>tag</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1aa71ab509ac29c5da681aee9dbf65f2d8" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>tagged_timeindex</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1aaeb745c8c13170a645b25170f0b035f1" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>timestamp_ms</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1acfb468e6e1766fe4b566189d3b888e4d" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>timestamp_s</name></member>
      <member refid="classtime__series_1_1TimeSeriesInterface_1aa09c55259a1f34491b5ecdd1505ffdbf" prot="public" virt="pure-virtual"><scope>time_series::TimeSeriesInterface</scope><name>wait_for_timeindex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
