<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="demo__multiprocess__write_8cpp" kind="file" language="C++">
    <compoundname>demo_multiprocess_write.cpp</compoundname>
    <includes local="yes">shared_memory/demos/item.hpp</includes>
    <includes refid="multiprocess__time__series_8hpp" local="yes">time_series/multiprocess_time_series.hpp</includes>
    <incdepgraph>
      <node id="115">
        <label>time_series/internal/base.hpp</label>
        <link refid="base_8hpp_source"/>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>limits</label>
      </node>
      <node id="110">
        <label>shared_memory/demos/item.hpp</label>
      </node>
      <node id="124">
        <label>shared_memory/lock.hpp</label>
      </node>
      <node id="126">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="109">
        <label>demos/demo_multiprocess_write.cpp</label>
        <link refid="demo_multiprocess_write.cpp"/>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>base.hxx</label>
        <link refid="base_8hxx_source"/>
      </node>
      <node id="125">
        <label>shared_memory/mutex.hpp</label>
      </node>
      <node id="117">
        <label>cmath</label>
      </node>
      <node id="112">
        <label>time_series/interface.hpp</label>
        <link refid="interface_8hpp"/>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>time_series/internal/specialized_classes.hpp</label>
        <link refid="specialized__classes_8hpp_source"/>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
      </node>
      <node id="119">
        <label>condition_variable</label>
      </node>
      <node id="111">
        <label>time_series/multiprocess_time_series.hpp</label>
        <link refid="multiprocess__time__series_8hpp_source"/>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>vector</label>
      </node>
      <node id="123">
        <label>shared_memory/condition_variable.hpp</label>
      </node>
      <node id="113">
        <label>cstddef</label>
      </node>
      <node id="120">
        <label>mutex</label>
      </node>
      <node id="116">
        <label>chrono</label>
      </node>
      <node id="122">
        <label>shared_memory/array.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="demo__multiprocess__write_8cpp_1aa2341624eba49f3cdec3d9656b97cd79" prot="public" static="no">
        <name>SEGMENT_ID</name>
        <initializer>&quot;demo_time_series_multiprocess&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_write.cpp" line="15" column="9" bodyfile="demos/demo_multiprocess_write.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="demo__multiprocess__write_8cpp_1ad279f2fa0f02868c901c0d29d41af6d6" prot="public" static="no">
        <name>TIMESERIES_SIZE</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_write.cpp" line="16" column="9" bodyfile="demos/demo_multiprocess_write.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="demo__multiprocess__write_8cpp_1a6663308ba00701256d3afe22992c48cf" prot="public" static="no">
        <type><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">time_series::MultiprocessTimeSeries</ref>&lt; shared_memory::Item&lt; 10 &gt; &gt;</type>
        <definition>typedef time_series::MultiprocessTimeSeries&lt;shared_memory::Item&lt;10&gt; &gt; TIMESERIES</definition>
        <argsstring></argsstring>
        <name>TIMESERIES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_write.cpp" line="18" column="1" bodyfile="demos/demo_multiprocess_write.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__multiprocess__write_8cpp_1a13a43e6d814de94978c515cb084873b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_write.cpp" line="20" column="1" bodyfile="demos/demo_multiprocess_write.cpp" bodystart="20" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="demo__multiprocess__write_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_multiprocess_write.cpp" line="40" column="1" bodyfile="demos/demo_multiprocess_write.cpp" bodystart="40" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Write data into a shared timed series. The demo demo_multiprocess_read is expected to be already running when this demo is started. Infinite hanging may occur otherwhise. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, Max Planck Gesellschaft. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#include<sp/>&quot;shared_memory/demos/item.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;time_series/multiprocess_time_series.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEGMENT_ID<sp/>&quot;demo_time_series_multiprocess&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIMESERIES_SIZE<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">time_series::MultiprocessTimeSeries&lt;shared_memory::Item&lt;10&gt;</ref>&gt;<sp/><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">TIMESERIES</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__multiprocess__read_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run</ref>()</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>the<sp/>instance<sp/>created<sp/>by<sp/>demo_process_read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>do<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clean_on_destruction<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">TIMESERIES</ref><sp/>ts(SEGMENT_ID,<sp/>TIMESERIES_SIZE,<sp/>clean_on_destruction);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Item<sp/>implements<sp/>a<sp/>serialize<sp/>function,<sp/>which<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>usage<sp/>of<sp/>multiprocess<sp/>time<sp/>series.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::Item&lt;10&gt;<sp/>item(i);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.compact_print();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts.append(item);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_time_tools::Timer::sleep_ms(400);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="demo__multiprocess__read_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run</ref>();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_multiprocess_write.cpp"/>
  </compounddef>
</doxygen>
