<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="multiprocess__time__series_8hpp" kind="file" language="C++">
    <compoundname>multiprocess_time_series.hpp</compoundname>
    <includes refid="interface_8hpp" local="yes">time_series/interface.hpp</includes>
    <includes refid="base_8hpp" local="yes">time_series/internal/base.hpp</includes>
    <includes refid="specialized__classes_8hpp" local="yes">time_series/internal/specialized_classes.hpp</includes>
    <includedby refid="demo__multiprocess__read_8cpp" local="yes">demos/demo_multiprocess_read.cpp</includedby>
    <includedby refid="demo__multiprocess__write_8cpp" local="yes">demos/demo_multiprocess_write.cpp</includedby>
    <includedby refid="multiprocess__time__series_8cpp" local="yes">src/multiprocess_time_series.cpp</includedby>
    <incdepgraph>
      <node id="208">
        <label>time_series/internal/base.hpp</label>
        <link refid="base_8hpp_source"/>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
      </node>
      <node id="207">
        <label>limits</label>
      </node>
      <node id="217">
        <label>shared_memory/lock.hpp</label>
      </node>
      <node id="219">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="220">
        <label>base.hxx</label>
        <link refid="base_8hxx_source"/>
      </node>
      <node id="218">
        <label>shared_memory/mutex.hpp</label>
      </node>
      <node id="210">
        <label>cmath</label>
      </node>
      <node id="205">
        <label>time_series/interface.hpp</label>
        <link refid="interface_8hpp"/>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="211">
        <label>time_series/internal/specialized_classes.hpp</label>
        <link refid="specialized__classes_8hpp_source"/>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
      </node>
      <node id="212">
        <label>condition_variable</label>
      </node>
      <node id="204">
        <label>include/time_series/multiprocess_time_series.hpp</label>
        <link refid="multiprocess_time_series.hpp"/>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
      </node>
      <node id="214">
        <label>vector</label>
      </node>
      <node id="216">
        <label>shared_memory/condition_variable.hpp</label>
      </node>
      <node id="206">
        <label>cstddef</label>
      </node>
      <node id="213">
        <label>mutex</label>
      </node>
      <node id="209">
        <label>chrono</label>
      </node>
      <node id="215">
        <label>shared_memory/array.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="223">
        <label>demos/demo_multiprocess_write.cpp</label>
        <link refid="demo__multiprocess__write_8cpp"/>
      </node>
      <node id="222">
        <label>demos/demo_multiprocess_read.cpp</label>
        <link refid="demo__multiprocess__read_8cpp"/>
      </node>
      <node id="221">
        <label>include/time_series/multiprocess_time_series.hpp</label>
        <link refid="multiprocess_time_series.hpp"/>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classtime__series_1_1MultiprocessTimeSeries" prot="public">time_series::MultiprocessTimeSeries</innerclass>
    <innernamespace refid="namespacetime__series">time_series</innernamespace>
    <innernamespace refid="namespacetime__series_1_1internal">time_series::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>virtual<sp/>class<sp/>specifying<sp/>all<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>time_series<sp/>class<sp/>should<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>also<sp/>Index<sp/>and<sp/>Timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interface_8hpp" kindref="compound">time_series/interface.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>common<sp/>code<sp/>to<sp/>TimeSeries<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>multiprocesses<sp/>TimeSeries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;time_series/internal/base.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mutex,<sp/>ConditionVariable,<sp/>Lock<sp/>and<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>different<sp/>implementation<sp/>for<sp/>TimeSeries<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MultiprocessTimeSeries.<sp/>Those<sp/>are<sp/>defined<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;time_series/internal/specialized_classes.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetime__series" kindref="compound">time_series</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>various<sp/>shared<sp/>memory<sp/>segments<sp/>are<sp/>created<sp/>based<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>segment_id<sp/>provided<sp/>by<sp/>the<sp/>user.<sp/>Here<sp/>are<sp/>the<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suffixes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>shm_indexes(</highlight><highlight class="stringliteral">&quot;_indexes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>shm_elements(</highlight><highlight class="stringliteral">&quot;_elements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>shm_timestamps(</highlight><highlight class="stringliteral">&quot;_timestamps&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>shm_mutex(</highlight><highlight class="stringliteral">&quot;_mutex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>shm_condition_variable(</highlight><highlight class="stringliteral">&quot;_condition_variable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="45" refid="classtime__series_1_1MultiprocessTimeSeries" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">MultiprocessTimeSeries</ref></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtime__series_1_1internal_1_1TimeSeriesBase" kindref="compound">internal::TimeSeriesBase</ref>&lt;internal::MultiProcesses,<sp/>T&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61" refid="classtime__series_1_1MultiprocessTimeSeries_1a118890497b42365a56221c66edbb478e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtime__series_1_1MultiprocessTimeSeries_1a118890497b42365a56221c66edbb478e" kindref="member">MultiprocessTimeSeries</ref>(std::string<sp/>segment_id,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_length,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>leader<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>start_timeindex<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>internal::TimeSeriesBase&lt;internal::MultiProcesses,<sp/>T&gt;(</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_timeindex),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_(segment_id<sp/>+<sp/>internal::shm_indexes,<sp/>4,<sp/>leader,<sp/>false)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;mutex_ptr_<sp/>=</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;internal::Mutex&lt;internal::MultiProcesses&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_id<sp/>+<sp/>internal::shm_mutex,<sp/>leader);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;condition_ptr_<sp/>=<sp/>std::make_shared&lt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtime__series_1_1internal_1_1ConditionVariable" kindref="compound">internal::ConditionVariable&lt;internal::MultiProcesses&gt;</ref><sp/>&gt;(</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_id<sp/>+<sp/>internal::shm_condition_variable,<sp/>leader);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;history_elements_ptr_<sp/>=</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;internal::Vector&lt;internal::MultiProcesses,<sp/>T&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_length,<sp/>segment_id<sp/>+<sp/>internal::shm_elements,<sp/>leader);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;history_timestamps_ptr_<sp/>=<sp/>std::make_shared&lt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtime__series_1_1internal_1_1Vector" kindref="compound">internal::Vector&lt;internal::MultiProcesses, Timestamp&gt;</ref><sp/>&gt;(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_length,<sp/>segment_id<sp/>+<sp/>internal::shm_timestamps,<sp/>leader);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leader)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_indexes();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read_indexes()</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_.get(0,<sp/>this-&gt;start_timeindex_);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_.get(1,<sp/>this-&gt;oldest_timeindex_);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_.get(2,<sp/>this-&gt;newest_timeindex_);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_.get(3,<sp/>this-&gt;tagged_timeindex_);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_indexes()</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_.set(0,<sp/>this-&gt;start_timeindex_);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_.set(1,<sp/>this-&gt;oldest_timeindex_);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_.set(2,<sp/>this-&gt;newest_timeindex_);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes_.set(3,<sp/>this-&gt;tagged_timeindex_);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::array&lt;Index&gt;<sp/>indexes_;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_memory(std::string<sp/>segment_id);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/time_series/multiprocess_time_series.hpp"/>
  </compounddef>
</doxygen>
