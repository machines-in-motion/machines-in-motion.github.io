<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="demo__time__series_8cpp" kind="file" language="C++">
    <compoundname>demo_time_series.cpp</compoundname>
    <includes local="yes">real_time_tools/thread.hpp</includes>
    <includes refid="time__series_8hpp" local="yes">time_series/time_series.hpp</includes>
    <incdepgraph>
      <node id="138">
        <label>time_series/internal/base.hpp</label>
        <link refid="base_8hpp_source"/>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>limits</label>
      </node>
      <node id="145">
        <label>shared_memory/lock.hpp</label>
      </node>
      <node id="134">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="147">
        <label>base.hxx</label>
        <link refid="base_8hxx_source"/>
      </node>
      <node id="146">
        <label>shared_memory/mutex.hpp</label>
      </node>
      <node id="133">
        <label>cmath</label>
      </node>
      <node id="130">
        <label>real_time_tools/thread.hpp</label>
      </node>
      <node id="135">
        <label>time_series/interface.hpp</label>
        <link refid="interface_8hpp"/>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>time_series/internal/specialized_classes.hpp</label>
        <link refid="specialized__classes_8hpp_source"/>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>condition_variable</label>
      </node>
      <node id="131">
        <label>time_series/time_series.hpp</label>
        <link refid="time__series_8hpp"/>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>vector</label>
      </node>
      <node id="144">
        <label>shared_memory/condition_variable.hpp</label>
      </node>
      <node id="129">
        <label>demos/demo_time_series.cpp</label>
        <link refid="demo_time_series.cpp"/>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
      <node id="136">
        <label>cstddef</label>
      </node>
      <node id="141">
        <label>mutex</label>
      </node>
      <node id="132">
        <label>chrono</label>
      </node>
      <node id="143">
        <label>shared_memory/array.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="demo__time__series_8cpp_1a82d33897ce200eadf132e93031f0e595" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_running</definition>
        <argsstring></argsstring>
        <name>g_running</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_time_series.cpp" line="13" column="1" bodyfile="demos/demo_time_series.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__time__series_8cpp_1a518842da1ba4ef4ba8c7f57fd9731cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* producer</definition>
        <argsstring>(void *args)</argsstring>
        <name>producer</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Write values to the time series. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_time_series.cpp" line="18" column="1" bodyfile="demos/demo_time_series.cpp" bodystart="18" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="demo__time__series_8cpp_1a13a43e6d814de94978c515cb084873b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para>Read and display the values from the time series. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_time_series.cpp" line="34" column="1" bodyfile="demos/demo_time_series.cpp" bodystart="34" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="demo__time__series_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_time_series.cpp" line="50" column="1" bodyfile="demos/demo_time_series.cpp" bodystart="50" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>basic usage of time series </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, Max Planck Gesellschaft. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&quot;real_time_tools/thread.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="time__series_8hpp" kindref="compound">time_series/time_series.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_running<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="demo__time__series_8cpp_1a518842da1ba4ef4ba8c7f57fd9731cfc" kindref="member">producer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtime__series_1_1TimeSeries" kindref="compound">time_series::TimeSeries&lt;int&gt;</ref><sp/>&amp;ts<sp/>=</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtime__series_1_1TimeSeries" kindref="compound">time_series::TimeSeries&lt;int&gt;</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts.<ref refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a09293ae95cdc492e7de78729b0e0e398" kindref="member">append</ref>(i);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_time_tools::Timer::sleep_ms(100);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>g_running<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__time__series_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run</ref>()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtime__series_1_1TimeSeries" kindref="compound">time_series::TimeSeries&lt;int&gt;</ref><sp/>ts(100);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>real_time_tools::RealTimeThread<sp/>thread;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.create_realtime_thread(&amp;<ref refid="demo__time__series_8cpp_1a518842da1ba4ef4ba8c7f57fd9731cfc" kindref="member">producer</ref>,<sp/>&amp;ts);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(g_running)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>ts.<ref refid="classtime__series_1_1internal_1_1TimeSeriesBase_1a12bd405933d326fd8396fb2bc1267223" kindref="member">newest_element</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.join();</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="demo__time__series_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_time_series.cpp"/>
  </compounddef>
</doxygen>
