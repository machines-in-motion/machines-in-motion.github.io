<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="optimal__jump_8py" kind="file" language="Python">
    <compoundname>optimal_jump.py</compoundname>
    <innernamespace refid="namespaceoptimal__jump">optimal_jump</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">###<sp/>This<sp/>file<sp/>contains<sp/>functions<sp/>and<sp/>plots<sp/>to<sp/>generate<sp/>optimal<sp/>jump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">###<sp/>Author<sp/>:<sp/>Avadesh<sp/>meduri</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">###<sp/>Date:<sp/><sp/>17th<sp/>April</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.optimize<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>linprog</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>matplotlib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pyplot<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>plt</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">tau_max<sp/>=<sp/>[3.5,<sp/>3.5]</highlight></codeline>
<codeline lineno="12"><highlight class="normal">l1<sp/>=<sp/>0.16</highlight></codeline>
<codeline lineno="13"><highlight class="normal">l2<sp/>=<sp/>0.16</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">compute_jac(theta_1,<sp/>theta_2):</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>-l1*(np.sin(theta_1))</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>-l2*(np.sin(theta_1<sp/>+<sp/>theta_2))</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>k3<sp/>=<sp/>l1*(np.cos(theta_1))</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>k4<sp/>=<sp/>l2*(np.cos(theta_1<sp/>+<sp/>theta_2))</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>jacT<sp/>=<sp/>np.matrix([[k1<sp/>+<sp/>k2,<sp/>k3+k4],<sp/>[k2,<sp/>k4]])</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jacT</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">create_constrains(theta_1,<sp/>theta_2):</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>-l1*(np.sin(theta_1))</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>-l2*(np.sin(theta_1<sp/>+<sp/>theta_2))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>k3<sp/>=<sp/>l1*(np.cos(theta_1))</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>k4<sp/>=<sp/>l2*(np.cos(theta_1<sp/>+<sp/>theta_2))</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>[[k3+k4],[k4]]</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>[[tau_max[0]],<sp/>[tau_max[1]]]</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A,<sp/>b</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">inv_kin(x,<sp/>z):</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>np.sqrt(z)<sp/>+<sp/>np.sqrt(x)<sp/>-<sp/>np.sqrt(l1)<sp/>-<sp/>np.sqrt(l2)/2*l1*l2</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>theta_2<sp/>=<sp/>-np.arccos(k1)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>l2*np.sin(theta_2)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>k3<sp/>=<sp/>l1<sp/>+<sp/>l2*np.cos(theta_2)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>theta_1<sp/>=<sp/>np.arctan(z/x)<sp/>+<sp/>np.arctan(k2/k3)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theta_1,<sp/>theta_2</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">des_l<sp/>=<sp/>np.arange(0.01,0.31,<sp/>0.001)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">#####<sp/>optimization<sp/>#######################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">optimal_tau<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="55"><highlight class="normal">c<sp/>=<sp/>[-1]</highlight></codeline>
<codeline lineno="56"><highlight class="normal">max_f<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>l<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>des_l:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>theta_1,<sp/>theta_2<sp/>=<sp/>inv_kin(0,<sp/>l)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>A,b<sp/>=<sp/>create_constrains(theta_1,<sp/>theta_2)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>linprog(c,<sp/>A_ub=A,<sp/>b_ub=b)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>max_f.append(res.x[0])</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>jact<sp/>=<sp/>compute_jac(theta_1,<sp/>theta_2)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>[[0],[res.x[0]]]</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>optimal_tau.append(np.matmul(jact,<sp/>f))</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">optimal_tau<sp/>=<sp/>np.asarray(optimal_tau)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">#<sp/>print(optimal_tau)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">#<sp/>print(max_f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">fig1,<sp/>ax1<sp/>=<sp/>plt.subplots(2,1,<sp/>sharex<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">ax1[0].plot(des_l,<sp/>optimal_tau[:,<sp/>0],<sp/>color<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal">,<sp/>label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;optimal_hip_tau&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">ax1[0].plot(des_l,<sp/>optimal_tau[:,<sp/>1],<sp/>color<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;optimal_knee_tau&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">ax1[0].legend()</highlight></codeline>
<codeline lineno="82"><highlight class="normal">ax1[0].set_xlabel(</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">ax1[0].set_ylabel(</highlight><highlight class="stringliteral">&quot;nm&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">ax1[0].grid()</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">ax1[1].plot(des_l,<sp/>max_f)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">ax1[1].set_xlabel(</highlight><highlight class="stringliteral">&quot;leg_length<sp/>in<sp/>meters&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">ax1[1].set_ylabel(</highlight><highlight class="stringliteral">&quot;max_force<sp/>in<sp/>Newtons&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">ax1[1].grid()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">plt.show()</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">#<sp/>plt.plot(des_l,<sp/>optimal_tau[:,0])</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="python/dg_blmc_robots/teststand/plot_teststand/optimal_jump.py"/>
  </compounddef>
</doxygen>
