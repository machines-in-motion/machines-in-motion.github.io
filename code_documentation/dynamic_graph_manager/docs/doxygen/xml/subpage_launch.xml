<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="subpage_launch" kind="page">
    <compoundname>subpage_launch</compoundname>
    <title>3/ Start a Dynamic Graph Manager Executable</title>
    <detaileddescription>
<para>This tutorial is only here to show how the launch of the <ref refid="namespacedynamic__graph__manager" kindref="compound">dynamic_graph_manager</ref> executable is done.</para><para>For further instruction on how to implement and load controller please read the next documentation pages.</para><para>Spawn 4 terminal with the catkin workspace are sourced.<orderedlist>
<listitem><para>Launch roscore (if not running yet): <programlisting><codeline><highlight class="normal">roscore</highlight></codeline>
</programlisting></para></listitem><listitem><para>Launch the entry/main() executable:<orderedlist>
<listitem><para>Run the executable: <programlisting><codeline><highlight class="normal">rosrun<sp/>&lt;package<sp/>of<sp/>your<sp/>robot&gt;<sp/>&lt;name<sp/>of<sp/>executable<sp/>file&gt;</highlight></codeline>
</programlisting> For instance: <programlisting><codeline><highlight class="normal">rosrun<sp/>dynamic_graph_manager<sp/>demo_dynamic_graph_manager</highlight></codeline>
</programlisting></para></listitem></orderedlist>
</para></listitem><listitem><para>In another terminal, connect to the python interpreter via ROS:<orderedlist>
<listitem><para>Startup Dynamic Graph Python client <programlisting><codeline><highlight class="normal">rosrun<sp/>dynamic_graph_manager<sp/>run_command<sp/>&lt;python-file&gt;</highlight></codeline>
</programlisting> or <programlisting><codeline><highlight class="normal">rosrun<sp/>dynamic_graph_manager<sp/>run_command</highlight></codeline>
</programlisting> The first call will execute the python file given and fall back to an interactive python terminal. The second call will just fallback to the interactive python terinal. In this terminal you can have access to a global object called &quot;robot&quot;. And in particular &quot;robot.device&quot;. This device is the link between the (extremely simple) hardware implemented in the demo_dynamic_graph_manager and the dynamic-graph. You can already explore what has been implemented by executing: <programlisting><codeline><highlight class="normal">&gt;&gt;&gt;<sp/>robot.device.displaySignals()</highlight></codeline>
</programlisting></para></listitem><listitem><para>Setup your control graph by executing python commands or use <computeroutput>execfile(...)</computeroutput> to execute a python script</para></listitem><listitem><para>In a last terminal you can start or stop the dynamic graph by executing the following ROS services:</para></listitem><listitem><para>Start dynamic graph <programlisting><codeline><highlight class="normal">rosservice<sp/>call<sp/>/dynamic_graph/start_dynamic_graph</highlight></codeline>
</programlisting></para></listitem><listitem><para>Stop dynamic graph <programlisting><codeline><highlight class="normal">rosservice<sp/>call<sp/>/dynamic_graph/stop_dynamic_graph</highlight></codeline>
</programlisting> </para></listitem></orderedlist>
</para></listitem></orderedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
