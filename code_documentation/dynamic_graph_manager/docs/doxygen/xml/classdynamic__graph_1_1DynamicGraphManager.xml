<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classdynamic__graph_1_1DynamicGraphManager" kind="class" language="C++" prot="public">
    <compoundname>dynamic_graph::DynamicGraphManager</compoundname>
    <derivedcompoundref refid="classdynamic__graph__manager_1_1SimpleDGM" prot="public" virt="non-virtual">dynamic_graph_manager::SimpleDGM</derivedcompoundref>
    <includes refid="dynamic__graph__manager_8hh" local="no">dynamic_graph_manager.hh</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a391d7a3f7c3df820d31f2c1d0ff7fc51" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string DynamicGraphManager::dg_ros_node_name_</definition>
        <argsstring></argsstring>
        <name>dg_ros_node_name_</name>
        <initializer>= &quot;dynamic_graph&quot;</initializer>
        <briefdescription>
<para>dg_ros_node_name_ this is the ros node name of the dynamic graph process </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="356" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a415f24927dbe9dfd0ee4a6462428bd48" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string DynamicGraphManager::hw_com_ros_node_name_</definition>
        <argsstring></argsstring>
        <name>hw_com_ros_node_name_</name>
        <initializer>=
    &quot;hardware_communication&quot;</initializer>
        <briefdescription>
<para>hw_com_ros_node_name_ this is the ros node name of the harware communication process </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="362" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string DynamicGraphManager::shared_memory_name_</definition>
        <argsstring></argsstring>
        <name>shared_memory_name_</name>
        <initializer>= &quot;DGM_ShM&quot;</initializer>
        <briefdescription>
<para>shared_memory_name is the name of the shared memory segment to be used </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="368" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1abd4e4f618fbdacfda8c2cdece08e401b" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string DynamicGraphManager::sensors_map_name_</definition>
        <argsstring></argsstring>
        <name>sensors_map_name_</name>
        <initializer>= &quot;sensors_map&quot;</initializer>
        <briefdescription>
<para>sensors_map_name is the name of the sensor map inside the shared memory segment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="374" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a056de4d7a49496b2b0812d96d93370d9" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string DynamicGraphManager::motor_controls_map_name_</definition>
        <argsstring></argsstring>
        <name>motor_controls_map_name_</name>
        <initializer>=
    &quot;motor_controls_map&quot;</initializer>
        <briefdescription>
<para>motor_controls_map_name is the name of the motor controls map inside the shared memory segment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="380" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a909b8d2d024a2a11473fa2d94a18002e" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string DynamicGraphManager::cond_var_name_</definition>
        <argsstring></argsstring>
        <name>cond_var_name_</name>
        <initializer>= &quot;cond_var&quot;</initializer>
        <briefdescription>
<para>cond_var_sensors_name_ is the name of the condition variable in the shared memory </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="386" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="386" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1adb99ba3a7a5e677b30531a69bcc922ec" prot="protected" static="no" mutable="no">
        <type>ros::ServiceServer</type>
        <definition>ros::ServiceServer dynamic_graph::DynamicGraphManager::ros_service_start_dg_</definition>
        <argsstring></argsstring>
        <name>ros_service_start_dg_</name>
        <briefdescription>
<para>ros_service_start_dg_ allows to start the dynamic graph on call. </para>        </briefdescription>
        <detaileddescription>
<para>It simply sets a flags that is used to wait the user call. Only used in the <ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref> process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="495" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1adf973b6da4e4fe14cae262ba94ebb191" prot="protected" static="no" mutable="no">
        <type>ros::ServiceServer</type>
        <definition>ros::ServiceServer dynamic_graph::DynamicGraphManager::ros_service_stop_dg_</definition>
        <argsstring></argsstring>
        <name>ros_service_stop_dg_</name>
        <briefdescription>
<para>ros_service_stop_dg_ allows to stop the dynamic graph on call. </para>        </briefdescription>
        <detaileddescription>
<para>It simply sets a flags that stop the main real time the control loop. Only used in the <ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref> process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="502" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a87baafbaadf396a7663da653dc5da106" prot="protected" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; dynamic_graph::DynamicGraphManager::is_dynamic_graph_stopped_</definition>
        <argsstring></argsstring>
        <name>is_dynamic_graph_stopped_</name>
        <briefdescription>
<para>is_dynamic_graph_stopped_ is the flag reflecting the state of the dynamic graph. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>TRUE the Dynamic Graph is NOT running.</para></listitem><listitem><para>FALSE the Dynamic Graph IS running. The type &quot;atomic&quot; is here to make sure that this variable is thread safe </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="511" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1ab1a2bc0a8f04126638056f430297097e" prot="protected" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; dynamic_graph::DynamicGraphManager::is_hardware_communication_stopped_</definition>
        <argsstring></argsstring>
        <name>is_hardware_communication_stopped_</name>
        <briefdescription>
<para>is_hardware_communication_stopped_ is the flag reflecting the state of the hardware communication thread. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>TRUE the hardware communication is NOT running.</para></listitem><listitem><para>FALSE the hardware communication IS running. The type &quot;atomic&quot; is here to make sure that this variable is thread safe </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="520" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a40458dd801d1ee7e2051f8b8fab5366b" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classdynamic__graph_1_1RosPythonInterpreter" kindref="compound">dynamic_graph::RosPythonInterpreter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;dynamic_graph::RosPythonInterpreter&gt; dynamic_graph::DynamicGraphManager::ros_python_interpreter_</definition>
        <argsstring></argsstring>
        <name>ros_python_interpreter_</name>
        <briefdescription>
<para>ros_python_interpreter_ptr_ is a ROS wrapper around a python interpreter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="526" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; real_time_tools::RealTimeThread &gt;</type>
        <definition>std::unique_ptr&lt;real_time_tools::RealTimeThread&gt; dynamic_graph::DynamicGraphManager::thread_dynamic_graph_</definition>
        <argsstring></argsstring>
        <name>thread_dynamic_graph_</name>
        <briefdescription>
<para>thread_dynamic_graph_ is the real time thread that runs the dynamic graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="532" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1ae0e1a3c59fa7d0282529e1a544e83b4d" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; real_time_tools::RealTimeThread &gt;</type>
        <definition>std::unique_ptr&lt;real_time_tools::RealTimeThread&gt; dynamic_graph::DynamicGraphManager::thread_hardware_communication_</definition>
        <argsstring></argsstring>
        <name>thread_hardware_communication_</name>
        <briefdescription>
<para>thread_hardware_communication_ is the real thread that communicate with the hardware. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="538" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1aa8aa645099e7e9cce426381e38b5027d" prot="protected" static="no" mutable="no">
        <type>pid_t</type>
        <definition>pid_t dynamic_graph::DynamicGraphManager::pid_dynamic_graph_process_</definition>
        <argsstring></argsstring>
        <name>pid_dynamic_graph_process_</name>
        <briefdescription>
<para>pid_dynamic_graph_process_ is the pid of the DynamicGraph process. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized to 0 and set during the <ref refid="classdynamic__graph_1_1DynamicGraphManager_1a93272fcbb3793dfc92422186022ecf72" kindref="member">DynamicGraphManager::run</ref> method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="544" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a02232cdc5cabca34d07dada6ced38532" prot="protected" static="no" mutable="no">
        <type>pid_t</type>
        <definition>pid_t dynamic_graph::DynamicGraphManager::pid_hardware_communication_process_</definition>
        <argsstring></argsstring>
        <name>pid_hardware_communication_process_</name>
        <briefdescription>
<para>pid_hardware_communication_process_ is the pid of the hardware communication process. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized to 0 and set during the <ref refid="classdynamic__graph_1_1DynamicGraphManager_1a93272fcbb3793dfc92422186022ecf72" kindref="member">DynamicGraphManager::run</ref> method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="551" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classdynamic__graph_1_1Device" kindref="compound">Device</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Device&gt; dynamic_graph::DynamicGraphManager::device_</definition>
        <argsstring></argsstring>
        <name>device_</name>
        <briefdescription>
<para>device_ is the DynamicGraph device that manages the computation of the graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="557" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedynamic__graph_1a51212ed7fa4ae81e7b362a27f09b7ab8" kindref="member">VectorDGMap</ref></type>
        <definition>VectorDGMap dynamic_graph::DynamicGraphManager::sensors_map_</definition>
        <argsstring></argsstring>
        <name>sensors_map_</name>
        <briefdescription>
<para>sensors_map_ is a map of dynamicgraph::Vector. </para>        </briefdescription>
        <detaileddescription>
<para>They represent all the sensors data measured on the robot. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="563" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedynamic__graph_1a51212ed7fa4ae81e7b362a27f09b7ab8" kindref="member">VectorDGMap</ref></type>
        <definition>VectorDGMap dynamic_graph::DynamicGraphManager::motor_controls_map_</definition>
        <argsstring></argsstring>
        <name>motor_controls_map_</name>
        <briefdescription>
<para>motor_controls_map_ is a map of dynamicgraph::Vector. </para>        </briefdescription>
        <detaileddescription>
<para>They represent all the controls to be sent to the robot. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="569" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; shared_memory::LockedConditionVariable &gt;</type>
        <definition>std::unique_ptr&lt;shared_memory::LockedConditionVariable&gt; dynamic_graph::DynamicGraphManager::cond_var_</definition>
        <argsstring></argsstring>
        <name>cond_var_</name>
        <briefdescription>
<para>cond_var_sensors_ this condition variable allow the computation of the dynamic graph just after the acquisition of the sensors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="575" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a7e6cc5e58f1accce947f929d233a67fd" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dynamic_graph::DynamicGraphManager::has_been_waken_by_dg_</definition>
        <argsstring></argsstring>
        <name>has_been_waken_by_dg_</name>
        <briefdescription>
<para>has_been_waken_by_dg_ is a flag that indicates if the hardware communication process has been awaken by the <ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref> process or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="581" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1abafc3cf4d8f7dc938f98b7eb07b7af9a" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned dynamic_graph::DynamicGraphManager::missed_control_count_</definition>
        <argsstring></argsstring>
        <name>missed_control_count_</name>
        <briefdescription>
<para>missed_control_count_ is counting the number of iteration when the <ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref> failed to provide data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="587" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a10922e790e039f78b0fabbb5ef944488" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned dynamic_graph::DynamicGraphManager::max_missed_control_</definition>
        <argsstring></argsstring>
        <name>max_missed_control_</name>
        <briefdescription>
<para>max_missed_control_ if the missed_control_count_ reach the value of max_missed_control_ then we switch to safety mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="593" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a1006cdb2d7e30e291d3d568923ebbc03" prot="protected" static="no" mutable="no">
        <type>clock::duration</type>
        <definition>clock::duration dynamic_graph::DynamicGraphManager::control_period_</definition>
        <argsstring></argsstring>
        <name>control_period_</name>
        <briefdescription>
<para>control_period_ this is the control period in nanoseconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="598" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a26167d2936575dfdbe31be4717b70cc5" prot="protected" static="no" mutable="no">
        <type>clock::time_point</type>
        <definition>clock::time_point dynamic_graph::DynamicGraphManager::hw_time_loop_before_sleep_</definition>
        <argsstring></argsstring>
        <name>hw_time_loop_before_sleep_</name>
        <briefdescription>
<para>hw_time_loop_before_sleep_ is the time measurement just before the hardware communication loop goes to sleep. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="604" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a3641066efdd3424bb2bd745f6ba8d315" prot="protected" static="no" mutable="no">
        <type>clock::time_point</type>
        <definition>clock::time_point dynamic_graph::DynamicGraphManager::hw_time_loop_after_sleep_</definition>
        <argsstring></argsstring>
        <name>hw_time_loop_after_sleep_</name>
        <briefdescription>
<para>hw_time_loop_after_sleep_ is the time measurement just after the hardware communication loop goes to sleep. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="610" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1afb2f9b39e5c529d525999c3e91e06213" prot="protected" static="no" mutable="no">
        <type>clock::duration</type>
        <definition>clock::duration dynamic_graph::DynamicGraphManager::hw_meas_sleep_time_</definition>
        <argsstring></argsstring>
        <name>hw_meas_sleep_time_</name>
        <briefdescription>
<para>hw_measured_sleep_time_ is the time during which the hardware communication process actually slept. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="616" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1aa89f848a27f201aed320e2c6a441dc02" prot="protected" static="no" mutable="no">
        <type>clock::duration</type>
        <definition>clock::duration dynamic_graph::DynamicGraphManager::hw_ref_sleep_time_</definition>
        <argsstring></argsstring>
        <name>hw_ref_sleep_time_</name>
        <briefdescription>
<para>hw_ref_sleep_time_ is the time during which the hardware communication process is supposed to sleep. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="622" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1af4c9ca6b9c161ac578b6726eaa7b7826" prot="protected" static="no" mutable="no">
        <type>clock::duration</type>
        <definition>clock::duration dynamic_graph::DynamicGraphManager::hw_meas_active_time_</definition>
        <argsstring></argsstring>
        <name>hw_meas_active_time_</name>
        <briefdescription>
<para>hw_meas_active_time_ is the time during which the hardware communication process is supposed to sleep. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="628" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a81617144faf55e4ed2bf60165060b0f5" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dynamic_graph::DynamicGraphManager::is_real_robot_</definition>
        <argsstring></argsstring>
        <name>is_real_robot_</name>
        <briefdescription>
<para>is_real_robot this boolean is a parameter to indicate if yes or no we are in simulation or in a real robot mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="634" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a18c2cc959dceef659ab1f567e06254f7" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::dg_active_timer_file_</definition>
        <argsstring></argsstring>
        <name>dg_active_timer_file_</name>
        <briefdescription>
<para>dg_active_timer_file_ this is the path to the file that will contain the computation time of each of the dynamic graph complete execution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="641" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1af02dbc7fb67674937208abe4cd75d652" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::dg_sleep_timer_file_</definition>
        <argsstring></argsstring>
        <name>dg_sleep_timer_file_</name>
        <briefdescription>
<para>dg_sleep_timer_file_ this is the path to the file that will contain the sleep duration of the dynamic graph thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="647" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a1a43bcf9c74648466d1e561203a39d87" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::dg_timer_file_</definition>
        <argsstring></argsstring>
        <name>dg_timer_file_</name>
        <briefdescription>
<para>dg_timer_file_ this is the path to the file that will contain the time of the dynamic graph loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="653" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a2bd29dbd358b8c02805f4df970e75936" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::hwc_active_timer_file_</definition>
        <argsstring></argsstring>
        <name>hwc_active_timer_file_</name>
        <briefdescription>
<para>hwc_active_timer_file_ this is the path to the file that will contain the computation time of each active period of the hardware communication loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="660" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a5db6275d202963665a35c5eb2e68088d" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::hwc_sleep_timer_file_</definition>
        <argsstring></argsstring>
        <name>hwc_sleep_timer_file_</name>
        <briefdescription>
<para>hwc_sleep_timer_file_ this is the path to the file that will contain the sleeping time of the hardware communication loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="666" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a84f97c9eebbecee1af314e74fe22d8ed" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::hwc_timer_file_</definition>
        <argsstring></argsstring>
        <name>hwc_timer_file_</name>
        <briefdescription>
<para>hwc_timer_file_ this is the path to the file that will contain the computation time of each of the hardware communication complete execution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="672" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::log_dir_</definition>
        <argsstring></argsstring>
        <name>log_dir_</name>
        <briefdescription>
<para>log_folder_ is the folder where all the data of the current experiment will be saved. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="678" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1ac3be4a8d0596390bc5dd055321a7df55" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::python_log_file_</definition>
        <argsstring></argsstring>
        <name>python_log_file_</name>
        <briefdescription>
<para>This file will contain the python interpreter output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="683" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="683" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a1f413dd58d270daf3c03f08d4a2c51cb" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dynamic_graph::DynamicGraphManager::app_dir_</definition>
        <argsstring></argsstring>
        <name>app_dir_</name>
        <briefdescription>
<para>This is the application directory in the home directory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="688" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a8f206d87817177e389df0c27f1954f51" prot="protected" static="no" mutable="no">
        <type>real_time_tools::Timer</type>
        <definition>real_time_tools::Timer dynamic_graph::DynamicGraphManager::dg_active_timer_</definition>
        <argsstring></argsstring>
        <name>dg_active_timer_</name>
        <briefdescription>
<para>dg_active_timer_ is the timer measuring the computation time of the dynamic graph loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="694" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a8e0eb495ce07011796c58f54cef16ef5" prot="protected" static="no" mutable="no">
        <type>real_time_tools::Timer</type>
        <definition>real_time_tools::Timer dynamic_graph::DynamicGraphManager::dg_sleep_timer_</definition>
        <argsstring></argsstring>
        <name>dg_sleep_timer_</name>
        <briefdescription>
<para>dg_sleep_timer_ is the timer measuring the time during which the dynamic graph loop sleeps. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="700" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1ae73984087ad28fe492905eda861783bd" prot="protected" static="no" mutable="no">
        <type>real_time_tools::Timer</type>
        <definition>real_time_tools::Timer dynamic_graph::DynamicGraphManager::dg_timer_</definition>
        <argsstring></argsstring>
        <name>dg_timer_</name>
        <briefdescription>
<para>dg_timer_ is the timer measuring the duration time of the dynamic graph loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="706" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1afe6c823bac22d756fc649f911fc1c29b" prot="protected" static="no" mutable="no">
        <type>real_time_tools::Timer</type>
        <definition>real_time_tools::Timer dynamic_graph::DynamicGraphManager::hwc_active_timer_</definition>
        <argsstring></argsstring>
        <name>hwc_active_timer_</name>
        <briefdescription>
<para>hwc_active_timer is measuring the active time of the hardware communication loop </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="712" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a89eb402f9e2eaa8dfad090f6c9845f6c" prot="protected" static="no" mutable="no">
        <type>real_time_tools::Timer</type>
        <definition>real_time_tools::Timer dynamic_graph::DynamicGraphManager::hwc_sleep_timer_</definition>
        <argsstring></argsstring>
        <name>hwc_sleep_timer_</name>
        <briefdescription>
<para>hwc_sleep_timer is measuring the sleeping time of the hardware communication loop </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="718" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a08ef83c411e5439204fa05b28f8e2794" prot="protected" static="no" mutable="no">
        <type>real_time_tools::Timer</type>
        <definition>real_time_tools::Timer dynamic_graph::DynamicGraphManager::hwc_timer_</definition>
        <argsstring></argsstring>
        <name>hwc_timer_</name>
        <briefdescription>
<para>hwc_timer is measuring the time of the hardware communication loop </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="723" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a844d4f6c15668884b37111003c8a25a0" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned dynamic_graph::DynamicGraphManager::memory_buffer_timers_</definition>
        <argsstring></argsstring>
        <name>memory_buffer_timers_</name>
        <briefdescription>
<para>memory_buffer_timers_ is the size of the memory buffers for the real_time_tools timers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="729" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1ab4716c8ec6194816235e6199863f46f9" prot="protected" static="no" mutable="no">
        <type>real_time_tools::Spinner</type>
        <definition>real_time_tools::Spinner dynamic_graph::DynamicGraphManager::hwc_spinner_</definition>
        <argsstring></argsstring>
        <name>hwc_spinner_</name>
        <briefdescription>
<para>This class allows us to time the real time thread for the hardware communication. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="735" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1af5aa11023c1dd272d7bbabdcccc511b6" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double dynamic_graph::DynamicGraphManager::hwc_predicted_sleeping_time_</definition>
        <argsstring></argsstring>
        <name>hwc_predicted_sleeping_time_</name>
        <briefdescription>
<para>This corresponds to the predicted sleeping time for the hardware communication process. </para>        </briefdescription>
        <detaileddescription>
<para>If this time is bigger than a certain threshold then user commands to the hardware can be sent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="742" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1abb979a3e9235ef71a61579a6a6ad1200" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double dynamic_graph::DynamicGraphManager::maximum_time_for_user_cmd_</definition>
        <argsstring></argsstring>
        <name>maximum_time_for_user_cmd_</name>
        <briefdescription>
<para>This the duration during which a user command can be executed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="747" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a1a07b4003cc1a0021e675847cc57ef5c" prot="protected" static="no" mutable="no">
        <type>std::deque&lt; std::function&lt; void(void)&gt; &gt;</type>
        <definition>std::deque&lt;std::function&lt;void(void)&gt; &gt; dynamic_graph::DynamicGraphManager::user_commands_</definition>
        <argsstring></argsstring>
        <name>user_commands_</name>
        <briefdescription>
<para>This is the list of the user commands. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="752" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a0fb35bc44f331db3570c09b75b49cd15" prot="protected" static="no" mutable="no">
        <type>std::deque&lt; ros::ServiceServer &gt;</type>
        <definition>std::deque&lt;ros::ServiceServer&gt; dynamic_graph::DynamicGraphManager::ros_user_commands_</definition>
        <argsstring></argsstring>
        <name>ros_user_commands_</name>
        <briefdescription>
<para>Attribute shared with the daughter class. </para>        </briefdescription>
        <detaileddescription>
<para>This is the list of the ros user commands. The class inheriting from this one can add services for the hardware communication process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="762" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a2c0f1323534e9e1b17f3b1cc23f0c7f1" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double dynamic_graph::DynamicGraphManager::control_period_sec_</definition>
        <argsstring></argsstring>
        <name>control_period_sec_</name>
        <briefdescription>
<para>control_period_sec_ this is the control period in Seconds (S.I. </para>        </briefdescription>
        <detaileddescription>
<para>units) for computation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="768" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" prot="protected" static="no" mutable="no">
        <type>YAML::Node</type>
        <definition>YAML::Node dynamic_graph::DynamicGraphManager::params_</definition>
        <argsstring></argsstring>
        <name>params_</name>
        <briefdescription>
<para>params_ is the pool of parameters in a yaml tree </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="773" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdynamic__graph_1_1DynamicGraphManager_1a1b7d9df75790d22b3258e1bd42fd537d" prot="protected" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dynamic_graph::DynamicGraphManager::hwc_mutex_</definition>
        <argsstring></argsstring>
        <name>hwc_mutex_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="775" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="775" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1afd98424082e5a1f878e6c7cb08a62c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DynamicGraphManager::DynamicGraphManager</definition>
        <argsstring>()</argsstring>
        <name>DynamicGraphManager</name>
        <briefdescription>
<para><ref refid="classdynamic__graph_1_1DynamicGraphManager" kindref="compound">DynamicGraphManager</ref>, constructor of the class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="102" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="33" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a6bcf93d16574035ee654289274d0a790" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>DynamicGraphManager::~DynamicGraphManager</definition>
        <argsstring>()</argsstring>
        <name>~DynamicGraphManager</name>
        <briefdescription>
<para><ref refid="classdynamic__graph_1_1DynamicGraphManager" kindref="compound">DynamicGraphManager</ref>, destructor of the class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="107" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="68" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1ac6859456bbdd4307cb880dc5e54131dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::initialize</definition>
        <argsstring>(YAML::Node param)</argsstring>
        <name>initialize</name>
        <param>
          <type>YAML::Node</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>initialize the basic variables </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="112" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="103" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a93272fcbb3793dfc92422186022ecf72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a93272fcbb3793dfc92422186022ecf72" kindref="member">run()</ref> splits the process in the <ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref> process and the hadware_communication process. </para>        </briefdescription>
        <detaileddescription>
<para>It initialize them and run them. WARNING this a NONE blocking function. One can spin endlessly using the ROS: ros::waitForShutdown(), for example. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="120" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="198" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a18dab9ca9c8901779a944386f2b8898c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::wait_start_dynamic_graph</definition>
        <argsstring>()</argsstring>
        <name>wait_start_dynamic_graph</name>
        <briefdescription>
<para>wait_start_dynamic_graph put the current thread to sleep until the user start the dynamic graph </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="126" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="238" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1ab827a776b4ac31ea91ace9a2bfc1e99d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::wait_stop_dynamic_graph</definition>
        <argsstring>()</argsstring>
        <name>wait_stop_dynamic_graph</name>
        <briefdescription>
<para>wait_stop_dynamic_graph put the current thread to sleep until the user stop the dynamic graph </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="132" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="247" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a83a98e169cd587d101bba69bb799e408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::wait_stop_hardware_communication</definition>
        <argsstring>()</argsstring>
        <name>wait_stop_hardware_communication</name>
        <briefdescription>
<para>wait_stop_hardware_communication put the current thread to sleep until the user stop the hardware communication. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&amp;&amp; hw_com_ros_node.ok() </para>        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="138" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="262" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a81926d5d33573d667bc6511bbb2d8f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::initialize_dynamic_graph_process</definition>
        <argsstring>()</argsstring>
        <name>initialize_dynamic_graph_process</name>
        <briefdescription>
<para>initialize_dynamic_graph_process instanciates all variables related to the <ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref> and user interface. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="144" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="303" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::run_python_command</definition>
        <argsstring>(std::ostream &amp;file, const std::string &amp;command)</argsstring>
        <name>run_python_command</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>run_python_command </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>is the logging file to log the entry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>is the python command itself </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="151" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="332" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a11cc3b7fefc7fe146dc112a7e6d55f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::python_prologue</definition>
        <argsstring>()</argsstring>
        <name>python_prologue</name>
        <briefdescription>
<para>python_prologue get the pointer of the device in the the python interpretor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="158" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="353" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a8e23eb4ce0acaef397bf84a770b9f015" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::run_dynamic_graph_process</definition>
        <argsstring>()</argsstring>
        <name>run_dynamic_graph_process</name>
        <briefdescription>
<para>run_dynamic_graph_process spawns the real time thread and becomes a ros spinner (thread in charge of the ros::service callbacks). </para>        </briefdescription>
        <detaileddescription>
<para>This function is virtual has it might differ from os to os. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="165" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="384" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a81e7cb10262383030c10156730d39ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::run_hardware_communication_process</definition>
        <argsstring>()</argsstring>
        <name>run_hardware_communication_process</name>
        <briefdescription>
<para>run_hardware_communication_process spawns the real time thread. </para>        </briefdescription>
        <detaileddescription>
<para>WARNING this function is not blocking. Function to block are available like ros::waitForShutdown() for example. This function is virtual has it might differ from os to os. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="173" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="402" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1ad13f5aef302173293a0c162c28505ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::run_single_process</definition>
        <argsstring>()</argsstring>
        <name>run_single_process</name>
        <briefdescription>
<para>run_single_process spawns the real time thread. </para>        </briefdescription>
        <detaileddescription>
<para>WARNING this function is not blocking. Function to block are available like ros::waitForShutdown() for example. This function is virtual has it might differ from os to os. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="181" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="425" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1ae3927887762c52c7bf50ab5a565c3077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void dynamic_graph::DynamicGraphManager::initialize_hardware_communication_process</definition>
        <argsstring>()</argsstring>
        <name>initialize_hardware_communication_process</name>
        <reimplementedby refid="classdynamic__graph__manager_1_1SimpleDGM_1a5d771fc5a9ae6dd524a658d50fbee5d3">initialize_hardware_communication_process</reimplementedby>
        <briefdescription>
<para>initialize_hardware_communication_process instanciate all variables related to the hardware communication. </para>        </briefdescription>
        <detaileddescription>
<para>In addition it spawns the real time thread. WARNING, this function needs to be overloaded using the actual drivers of the robot. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="193" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a7bddce83d5185433041ad27610b85b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void dynamic_graph::DynamicGraphManager::get_sensors_to_map</definition>
        <argsstring>(VectorDGMap &amp;)</argsstring>
        <name>get_sensors_to_map</name>
        <reimplementedby refid="classdynamic__graph__manager_1_1SimpleDGM_1aa92cd33a31c934835252f834bab7b9f4">get_sensors_to_map</reimplementedby>
        <param>
          <type><ref refid="namespacedynamic__graph_1a51212ed7fa4ae81e7b362a27f09b7ab8" kindref="member">VectorDGMap</ref> &amp;</type>
        </param>
        <briefdescription>
<para>get_sensors_to_map is the fonction that get the motor command from a map and that uses the drivers to send these command to the robot. </para>        </briefdescription>
        <detaileddescription>
<para>Each robot must have a different implementation of this function. WARNING, this function needs to be overloaded using the actual drivers of the robot. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="207" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="207" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a506e6f37ac7205efaf0efe4202cde897" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void dynamic_graph::DynamicGraphManager::set_motor_controls_from_map</definition>
        <argsstring>(const VectorDGMap &amp;)</argsstring>
        <name>set_motor_controls_from_map</name>
        <reimplementedby refid="classdynamic__graph__manager_1_1SimpleDGM_1ad38ccd35cc0c409a0aaefa8565634109">set_motor_controls_from_map</reimplementedby>
        <param>
          <type>const <ref refid="namespacedynamic__graph_1a51212ed7fa4ae81e7b362a27f09b7ab8" kindref="member">VectorDGMap</ref> &amp;</type>
        </param>
        <briefdescription>
<para>set_motor_controls_from_map is the fonction that get the motor command from a map and that uses the drivers to send these command to the robot. </para>        </briefdescription>
        <detaileddescription>
<para>Each robot must have a different implementation of this function. WARNING, this function needs to be overloaded using the actual drivers of the robot. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="221" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a60bb31040121d6041b4dd6556f5c7eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::compute_safety_controls</definition>
        <argsstring>()</argsstring>
        <name>compute_safety_controls</name>
        <reimplementedby refid="classdynamic__graph__manager_1_1SimpleDGM_1a37b28e687ce4e724770f5c9f23da4d4f">compute_safety_controls</reimplementedby>
        <briefdescription>
<para>compute_safety_controls computes safety controls very fast in case the dynamic graph is taking to much computation time or has crashed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="232" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="647" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dynamic_graph::DynamicGraphManager::stop_dynamic_graph</definition>
        <argsstring>()</argsstring>
        <name>stop_dynamic_graph</name>
        <briefdescription>
<para>stop_dynamic_graph stop the DynamicGraph. </para>        </briefdescription>
        <detaileddescription>
<para>;) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="241" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a1bfd2b965dde19d12d63f5928a4f670c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dynamic_graph::DynamicGraphManager::start_dynamic_graph</definition>
        <argsstring>()</argsstring>
        <name>start_dynamic_graph</name>
        <briefdescription>
<para>start_dynamic_graph start the DynamicGraph. </para>        </briefdescription>
        <detaileddescription>
<para>;) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="249" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1ab929d21277e5d2fba726b8ae422c27a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dynamic_graph::DynamicGraphManager::is_dynamic_graph_stopped</definition>
        <argsstring>()</argsstring>
        <name>is_dynamic_graph_stopped</name>
        <briefdescription>
<para>get the status of the dynamic graph (is running or not) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the flag is_dynamic_graph_stopped_ value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="258" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1aabf11778fb69e5203d38c8093de60bab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dynamic_graph::DynamicGraphManager::stop_hardware_communication</definition>
        <argsstring>()</argsstring>
        <name>stop_hardware_communication</name>
        <briefdescription>
<para>stop_hardware_communication stops the hardware communication. </para>        </briefdescription>
        <detaileddescription>
<para>;) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="266" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a234bef10fea6e3f9beb1580491127660" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dynamic_graph::DynamicGraphManager::start_hardware_communication</definition>
        <argsstring>()</argsstring>
        <name>start_hardware_communication</name>
        <briefdescription>
<para>start_hardware_communication starts the hardware communication. </para>        </briefdescription>
        <detaileddescription>
<para>;) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="274" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1afcc53ebec6e5f2057c23a05894715125" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dynamic_graph::DynamicGraphManager::is_hardware_communication_stopped</definition>
        <argsstring>()</argsstring>
        <name>is_hardware_communication_stopped</name>
        <briefdescription>
<para>get the status of the hardware communication (is running or not). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the flags is_dynamic_graph_stopped_ value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="283" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a9c11927e0b76e91fabc4b34ea7fb85bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pid_t</type>
        <definition>pid_t dynamic_graph::DynamicGraphManager::pid_dynamic_graph_process</definition>
        <argsstring>()</argsstring>
        <name>pid_dynamic_graph_process</name>
        <briefdescription>
<para>pid_dynamic_graph_process is an accessor on the pid of the process </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pid of the dynamic graph process </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="292" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1ac1abb11591e037e203329e900c89f4f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pid_t</type>
        <definition>pid_t dynamic_graph::DynamicGraphManager::pid_hardware_communication_process</definition>
        <argsstring>()</argsstring>
        <name>pid_hardware_communication_process</name>
        <briefdescription>
<para>pid_hardware_communication_process is an accessor on the pid of the process </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pid of the dynamic graph process </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="302" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a90bb14375da3d2aaaeafb356b6ca54f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdynamic__graph_1_1Device" kindref="compound">Device</ref> &amp;</type>
        <definition>Device&amp; dynamic_graph::DynamicGraphManager::device</definition>
        <argsstring>()</argsstring>
        <name>device</name>
        <briefdescription>
<para>device is a getter method on the <ref refid="classdynamic__graph_1_1Device" kindref="compound">Device</ref> internal pointer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a const reference to the device. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="311" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="311" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1ab980a2384c817ab5f59e712a54b2261a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DynamicGraphManager::has_dynamic_graph_process_died</definition>
        <argsstring>()</argsstring>
        <name>has_dynamic_graph_process_died</name>
        <briefdescription>
<para>has_dynamic_graph_process_died check if the process of the DynamicGraph has died or not. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the DynamicGraph process died. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="324" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="277" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1aea29e8dc351e0a50a8d2803d854d238d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dynamic_graph::DynamicGraphManager::is_in_safety_mode</definition>
        <argsstring>()</argsstring>
        <name>is_in_safety_mode</name>
        <reimplementedby refid="classdynamic__graph__manager_1_1SimpleDGM_1a5fe81f9feb5d982761d7a427aa31e7b4">is_in_safety_mode</reimplementedby>
        <briefdescription>
<para>is_in_safety_mode check if the dynamic graph is still alive and sending commands at a descent frequency. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if there is a problem </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="331" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="331" bodyend="350"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a72146c4ddd173869a512e9f174ad48df" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::add_user_command</definition>
        <argsstring>(std::function&lt; void(void)&gt; func)</argsstring>
        <name>add_user_command</name>
        <param>
          <type>std::function&lt; void(void)&gt;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Method inherited. </para>        </briefdescription>
        <detaileddescription>
<para>This method allow to simply add a user command </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="395" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="683" bodyend="688"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a664c7a3810c13a33057ae060281966b1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dynamic_graph::DynamicGraphManager::start_dynamic_graph</definition>
        <argsstring>(std_srvs::Empty::Request &amp;, std_srvs::Empty::Response &amp;)</argsstring>
        <name>start_dynamic_graph</name>
        <param>
          <type>std_srvs::Empty::Request &amp;</type>
        </param>
        <param>
          <type>std_srvs::Empty::Response &amp;</type>
        </param>
        <briefdescription>
<para>Method NOT inherited. </para>        </briefdescription>
        <detaileddescription>
<para>start_dg is the callback method of the ROS service start dynamic graph. <simplesect kind="return"><para>true. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="407" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a06740416640f3464edbbb57ee759b8fb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dynamic_graph::DynamicGraphManager::stop_dynamic_graph</definition>
        <argsstring>(std_srvs::Empty::Request &amp;, std_srvs::Empty::Response &amp;)</argsstring>
        <name>stop_dynamic_graph</name>
        <param>
          <type>std_srvs::Empty::Request &amp;</type>
        </param>
        <param>
          <type>std_srvs::Empty::Response &amp;</type>
        </param>
        <briefdescription>
<para>stop_dg is the callback method of the ROS service stop dynamic graph </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="419" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="419" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1aa396c4c91c076a103e2d5cb6c5606a7d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DynamicGraphManager::start_ros_service</definition>
        <argsstring>(ros::NodeHandle &amp;ros_node_handle)</argsstring>
        <name>start_ros_service</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>ros_node_handle</declname>
        </param>
        <briefdescription>
<para>start_ros_service is the method that advertise the different ros services. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="430" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="438" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a72f9e755719ec8fde8f145a67b518333" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * DynamicGraphManager::dynamic_graph_real_time_loop</definition>
        <argsstring>()</argsstring>
        <name>dynamic_graph_real_time_loop</name>
        <briefdescription>
<para>dynamic_graph_real_time_loop is the method used to execute the dynamic graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="436" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="453" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a4ea4183f1a4bd2d450ffb4a0a22b4242" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * DynamicGraphManager::hardware_communication_real_time_loop</definition>
        <argsstring>()</argsstring>
        <name>hardware_communication_real_time_loop</name>
        <briefdescription>
<para>hardware_communication_real_time_loop is the method that communicate with the hardware and send the commands (torque, position, current, ...) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="454" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="513" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1adf3adb88c5913b21b51c1f7bfab6d0f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * DynamicGraphManager::single_process_real_time_loop</definition>
        <argsstring>()</argsstring>
        <name>single_process_real_time_loop</name>
        <briefdescription>
<para>single_process_real_time_loop is the method that performs the control but in one single process. </para>        </briefdescription>
        <detaileddescription>
<para>(torque, position, current, ...) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="472" column="1" bodyfile="src/dynamic_graph_manager.cpp" bodystart="657" bodyend="681"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a7d289a916922f69796b0042f64de1499" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* dynamic_graph::DynamicGraphManager::dynamic_graph_real_time_loop_helper</definition>
        <argsstring>(void *context)</argsstring>
        <name>dynamic_graph_real_time_loop_helper</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>dynamic_graph_real_time_loop_helper is a static member allowing to use the posix pthread_create. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classdynamic__graph_1_1DynamicGraphManager" kindref="compound">DynamicGraphManager</ref> that spawned the thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nothing interesting for us. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="444" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="444" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1a771ad93758759932899273c5f01975fc" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* dynamic_graph::DynamicGraphManager::hardware_communication_real_time_loop_helper</definition>
        <argsstring>(void *context)</argsstring>
        <name>hardware_communication_real_time_loop_helper</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>dynamic_graph_real_time_loop_helper is a static member allowing to use the posix pthread_create. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classdynamic__graph_1_1DynamicGraphManager" kindref="compound">DynamicGraphManager</ref> that spawned the thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nothing interesting for us. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="462" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classdynamic__graph_1_1DynamicGraphManager_1af28f8990655ae8464acb3bd4c56a74c2" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* dynamic_graph::DynamicGraphManager::single_process_real_time_loop_helper</definition>
        <argsstring>(void *context)</argsstring>
        <name>single_process_real_time_loop_helper</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>dynamic_graph_real_time_loop_helper is a static member allowing to use the posix pthread_create. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classdynamic__graph_1_1DynamicGraphManager" kindref="compound">DynamicGraphManager</ref> that spawned the thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nothing interesting for us. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="480" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="480" bodyend="484"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class has for purpose to manage the different processes during run time. </para>    </briefdescription>
    <detaileddescription>
<para>The main tasks are:<itemizedlist>
<listitem><para>[1] Creates the Dynamic Graph device, the python interpreter, and the Drivers</para></listitem><listitem><para>[2] Ask the python interpreter to advertise its ROS services</para></listitem><listitem><para>[3] Ask the drivers to initialize the communication with the hardware</para></listitem><listitem><para>[4] Loads a yaml/urdf config file.</para></listitem><listitem><para>[5] Advertise the ROS services start/stop dynamic graph</para></listitem><listitem><para>[6] Wait for the ROS service start dynamic graph to be called</para></listitem><listitem><para>[7] Spawn the first real time process that executes the following:<itemizedlist>
<listitem><para>[7.1] gets the sensor data using Drivers and saves them in the shared std::map sensors</para></listitem><listitem><para>[7.2] reads the control values in the shared std::map commands and send them to the motors via the Drivers</para></listitem></itemizedlist>
</para></listitem><listitem><para>[8] Spawn the second real time process that executes the following:<itemizedlist>
<listitem><para>[8.1] passes the std::map sensors to the <ref refid="classdynamic__graph_1_1Device" kindref="compound">Device</ref>, which copies the data to its output signals</para></listitem><listitem><para>[8.2] gets the control values from the <ref refid="classdynamic__graph_1_1Device" kindref="compound">Device</ref> (which triggers the evaluation of the dynamic graph) and copies them into the shared std::map commands. In this class we heavily depend on std::unique pointers in order to initialize the DynamicGraph process and the hardware communication process independently. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="243">
        <label>dynamic_graph_manager::SimpleDGM</label>
        <link refid="classdynamic__graph__manager_1_1SimpleDGM"/>
        <childnode refid="242" relation="public-inheritance">
        </childnode>
      </node>
      <node id="242">
        <label>dynamic_graph::DynamicGraphManager</label>
        <link refid="classdynamic__graph_1_1DynamicGraphManager"/>
      </node>
    </inheritancegraph>
    <location file="include/dynamic_graph_manager/dynamic_graph_manager.hh" line="93" column="1" bodyfile="include/dynamic_graph_manager/dynamic_graph_manager.hh" bodystart="92" bodyend="776"/>
    <listofallmembers>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a72146c4ddd173869a512e9f174ad48df" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>add_user_command</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a1f413dd58d270daf3c03f08d4a2c51cb" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>app_dir_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a60bb31040121d6041b4dd6556f5c7eac" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>compute_safety_controls</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>cond_var_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a909b8d2d024a2a11473fa2d94a18002e" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>cond_var_name_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a1006cdb2d7e30e291d3d568923ebbc03" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>control_period_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a2c0f1323534e9e1b17f3b1cc23f0c7f1" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>control_period_sec_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a90bb14375da3d2aaaeafb356b6ca54f7" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>device</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>device_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a8f206d87817177e389df0c27f1954f51" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dg_active_timer_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a18c2cc959dceef659ab1f567e06254f7" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dg_active_timer_file_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a391d7a3f7c3df820d31f2c1d0ff7fc51" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dg_ros_node_name_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a8e0eb495ce07011796c58f54cef16ef5" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dg_sleep_timer_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1af02dbc7fb67674937208abe4cd75d652" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dg_sleep_timer_file_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ae73984087ad28fe492905eda861783bd" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dg_timer_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a1a43bcf9c74648466d1e561203a39d87" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dg_timer_file_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a72f9e755719ec8fde8f145a67b518333" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dynamic_graph_real_time_loop</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a7d289a916922f69796b0042f64de1499" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>dynamic_graph_real_time_loop_helper</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1afd98424082e5a1f878e6c7cb08a62c4a" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>DynamicGraphManager</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a7bddce83d5185433041ad27610b85b3a" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>get_sensors_to_map</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a4ea4183f1a4bd2d450ffb4a0a22b4242" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hardware_communication_real_time_loop</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a771ad93758759932899273c5f01975fc" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hardware_communication_real_time_loop_helper</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a7e6cc5e58f1accce947f929d233a67fd" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>has_been_waken_by_dg_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ab980a2384c817ab5f59e712a54b2261a" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>has_dynamic_graph_process_died</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a415f24927dbe9dfd0ee4a6462428bd48" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hw_com_ros_node_name_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1af4c9ca6b9c161ac578b6726eaa7b7826" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hw_meas_active_time_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1afb2f9b39e5c529d525999c3e91e06213" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hw_meas_sleep_time_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1aa89f848a27f201aed320e2c6a441dc02" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hw_ref_sleep_time_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a3641066efdd3424bb2bd745f6ba8d315" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hw_time_loop_after_sleep_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a26167d2936575dfdbe31be4717b70cc5" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hw_time_loop_before_sleep_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1afe6c823bac22d756fc649f911fc1c29b" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_active_timer_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a2bd29dbd358b8c02805f4df970e75936" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_active_timer_file_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a1b7d9df75790d22b3258e1bd42fd537d" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_mutex_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1af5aa11023c1dd272d7bbabdcccc511b6" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_predicted_sleeping_time_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a89eb402f9e2eaa8dfad090f6c9845f6c" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_sleep_timer_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a5db6275d202963665a35c5eb2e68088d" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_sleep_timer_file_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ab4716c8ec6194816235e6199863f46f9" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_spinner_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a08ef83c411e5439204fa05b28f8e2794" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_timer_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a84f97c9eebbecee1af314e74fe22d8ed" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>hwc_timer_file_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ac6859456bbdd4307cb880dc5e54131dd" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>initialize</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a81926d5d33573d667bc6511bbb2d8f52" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>initialize_dynamic_graph_process</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ae3927887762c52c7bf50ab5a565c3077" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>initialize_hardware_communication_process</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ab929d21277e5d2fba726b8ae422c27a8" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>is_dynamic_graph_stopped</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a87baafbaadf396a7663da653dc5da106" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>is_dynamic_graph_stopped_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1afcc53ebec6e5f2057c23a05894715125" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>is_hardware_communication_stopped</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ab1a2bc0a8f04126638056f430297097e" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>is_hardware_communication_stopped_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1aea29e8dc351e0a50a8d2803d854d238d" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>is_in_safety_mode</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a81617144faf55e4ed2bf60165060b0f5" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>is_real_robot_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>log_dir_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a10922e790e039f78b0fabbb5ef944488" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>max_missed_control_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1abb979a3e9235ef71a61579a6a6ad1200" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>maximum_time_for_user_cmd_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a844d4f6c15668884b37111003c8a25a0" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>memory_buffer_timers_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1abafc3cf4d8f7dc938f98b7eb07b7af9a" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>missed_control_count_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>motor_controls_map_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a056de4d7a49496b2b0812d96d93370d9" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>motor_controls_map_name_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>params_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a9c11927e0b76e91fabc4b34ea7fb85bc" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>pid_dynamic_graph_process</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1aa8aa645099e7e9cce426381e38b5027d" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>pid_dynamic_graph_process_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ac1abb11591e037e203329e900c89f4f5" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>pid_hardware_communication_process</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a02232cdc5cabca34d07dada6ced38532" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>pid_hardware_communication_process_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ac3be4a8d0596390bc5dd055321a7df55" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>python_log_file_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a11cc3b7fefc7fe146dc112a7e6d55f3d" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>python_prologue</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a40458dd801d1ee7e2051f8b8fab5366b" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>ros_python_interpreter_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1adb99ba3a7a5e677b30531a69bcc922ec" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>ros_service_start_dg_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1adf973b6da4e4fe14cae262ba94ebb191" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>ros_service_stop_dg_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a0fb35bc44f331db3570c09b75b49cd15" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>ros_user_commands_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a93272fcbb3793dfc92422186022ecf72" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>run</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a8e23eb4ce0acaef397bf84a770b9f015" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>run_dynamic_graph_process</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a81e7cb10262383030c10156730d39ce8" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>run_hardware_communication_process</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>run_python_command</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ad13f5aef302173293a0c162c28505ef8" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>run_single_process</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>sensors_map_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1abd4e4f618fbdacfda8c2cdece08e401b" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>sensors_map_name_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a506e6f37ac7205efaf0efe4202cde897" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>set_motor_controls_from_map</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>shared_memory_name_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1adf3adb88c5913b21b51c1f7bfab6d0f3" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>single_process_real_time_loop</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1af28f8990655ae8464acb3bd4c56a74c2" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>single_process_real_time_loop_helper</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a1bfd2b965dde19d12d63f5928a4f670c" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>start_dynamic_graph</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a664c7a3810c13a33057ae060281966b1" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>start_dynamic_graph</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a234bef10fea6e3f9beb1580491127660" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>start_hardware_communication</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1aa396c4c91c076a103e2d5cb6c5606a7d" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>start_ros_service</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>stop_dynamic_graph</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a06740416640f3464edbbb57ee759b8fb" prot="private" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>stop_dynamic_graph</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1aabf11778fb69e5203d38c8093de60bab" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>stop_hardware_communication</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>thread_dynamic_graph_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ae0e1a3c59fa7d0282529e1a544e83b4d" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>thread_hardware_communication_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a1a07b4003cc1a0021e675847cc57ef5c" prot="protected" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>user_commands_</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a18dab9ca9c8901779a944386f2b8898c" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>wait_start_dynamic_graph</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1ab827a776b4ac31ea91ace9a2bfc1e99d" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>wait_stop_dynamic_graph</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a83a98e169cd587d101bba69bb799e408" prot="public" virt="non-virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>wait_stop_hardware_communication</name></member>
      <member refid="classdynamic__graph_1_1DynamicGraphManager_1a6bcf93d16574035ee654289274d0a790" prot="public" virt="virtual"><scope>dynamic_graph::DynamicGraphManager</scope><name>~DynamicGraphManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
