<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="filter__graph_8py" kind="file" language="Python">
    <compoundname>filter_graph.py</compoundname>
    <innernamespace refid="namespacefilter__graph">filter_graph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dynamic_graph<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>plug</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dynamic_graph.sot.core.vector_constant<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>VectorConstant</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dynamic_graph.sot.core.fir_filter<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>FIRFilter_Vector_double</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dynamic_graph.sot.core.operator<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(Multiply_double_vector,</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Selec_of_vector,<sp/>Stack_of_vector,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Substract_of_vector)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dynamic_graph<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>writeGraph</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">create_simple_graph():</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>We<sp/>create<sp/>a<sp/>simple<sp/>graph<sp/>and<sp/>create<sp/>its<sp/>graphical<sp/>representation</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>here<sp/>we<sp/>create<sp/>some<sp/>input<sp/>to<sp/>graph.<sp/>These<sp/>a<sp/>constant<sp/>vector<sp/>but<sp/>it<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>anything<sp/>coming<sp/>from<sp/>the<sp/>hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>centered_slider<sp/>=<sp/>VectorConstant(</highlight><highlight class="stringliteral">&quot;4_robot_sliders&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>centered_slider.sout.value<sp/>=<sp/>[0.5,<sp/>0.5,<sp/>0.5,<sp/>0.5]</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Filter<sp/>the<sp/>centered<sp/>sliders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Hence<sp/>we<sp/>create<sp/>a<sp/>&quot;Finite<sp/>Impendance<sp/>Response&quot;<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>filter<sp/>is<sp/>in<sp/>the<sp/>following<sp/>form:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>out<sp/>=<sp/>sum_{i=0}^{N}<sp/>data_i<sp/>*<sp/>alpha_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>-<sp/>the<sp/>data_i<sp/>are<sp/>the<sp/>collected<sp/>elements,<sp/>their<sp/>number<sp/>grows<sp/>until<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>size<sp/>of<sp/>the<sp/>filter<sp/>is<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>-<sp/>the<sp/>alpha_i<sp/>are<sp/>the<sp/>gains<sp/>of<sp/>the<sp/>filter,<sp/>they<sp/>are<sp/>defined<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>method<sp/>&quot;setElement(index,<sp/>value)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>the<sp/>end<sp/>here<sp/>we<sp/>do<sp/>an<sp/>averaging<sp/>filter<sp/>on<sp/>200<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>slider_filtered<sp/>=<sp/>FIRFilter_Vector_double(</highlight><highlight class="stringliteral">&quot;slider_fir_filter&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>filter_size<sp/>=<sp/>200</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>slider_filtered.setSize(filter_size)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(filter_size):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slider_filtered.setElement(i,<sp/>1.0/float(filter_size))</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>we<sp/>plug<sp/>the<sp/>centered<sp/>sliders<sp/>output<sp/>to<sp/>the<sp/>input<sp/>of<sp/>the<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(centered_slider.sout,<sp/>slider_filtered.sin)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Now<sp/>we<sp/>want<sp/>the<sp/>slider<sp/>to<sp/>be<sp/>in<sp/>[-qref,<sp/>qref]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>So<sp/>we<sp/>multiply<sp/>all<sp/>sliders<sp/>by<sp/>a<sp/>constant<sp/>which<sp/>is<sp/>max_qref.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>scaled_slider<sp/>=<sp/>Multiply_double_vector(</highlight><highlight class="stringliteral">&quot;scaled_slider&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>scaled_slider.sin1.value<sp/>=<sp/>2.0</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(slider_filtered.sout,<sp/>scaled_slider.sin2)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Now<sp/>we<sp/>need<sp/>to<sp/>solve<sp/>the<sp/>problem<sp/>that<sp/>we<sp/>have<sp/>4<sp/>sliders<sp/>for<sp/>8<sp/>motors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Hence<sp/>we<sp/>will<sp/>map<sp/>each<sp/>slider<sp/>value<sp/>to<sp/>2<sp/>motors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>leg<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate([</highlight><highlight class="stringliteral">&quot;fr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hl&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fl&quot;</highlight><highlight class="normal">]):</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>first<sp/>of<sp/>all<sp/>we<sp/>define<sp/>the<sp/>references<sp/>for<sp/>the<sp/>hip<sp/>joint:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_hip_qref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Selec_of_vector(leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_hip_qref&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_hip_qref&quot;</highlight><highlight class="normal">].selec(i,<sp/>i+1)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(scaled_slider.sout,<sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_hip_qref&quot;</highlight><highlight class="normal">].sin)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Then<sp/>we<sp/>define<sp/>the<sp/>reference<sp/>for<sp/>the<sp/>knee<sp/>joint.<sp/>We<sp/>want<sp/>the<sp/>knee<sp/>to<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>twice<sp/>as<sp/>much<sp/>as<sp/>the<sp/>hip<sp/>and<sp/>on<sp/>the<sp/>opposite<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_knee_qref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Multiply_double_vector(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_knee_qref&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_knee_qref&quot;</highlight><highlight class="normal">].sin1.value<sp/>=<sp/>-<sp/>2.0</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_hip_qref&quot;</highlight><highlight class="normal">].sout,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_knee_qref&quot;</highlight><highlight class="normal">].sin2)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>now<sp/>we<sp/>need<sp/>to<sp/>stack<sp/>the<sp/>signals<sp/>2<sp/>by<sp/>2:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_qref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Stack_of_vector(leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_qref&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_qref&quot;</highlight><highlight class="normal">].selec1(0,<sp/>1)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_qref&quot;</highlight><highlight class="normal">].selec2(0,<sp/>1)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>first<sp/>element<sp/>is<sp/>the<sp/>hip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_hip_qref&quot;</highlight><highlight class="normal">].sout,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_qref&quot;</highlight><highlight class="normal">].sin1)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>second<sp/>element<sp/>is<sp/>the<sp/>knee</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_knee_qref&quot;</highlight><highlight class="normal">].sout,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[leg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_qref&quot;</highlight><highlight class="normal">].sin2)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>robot_state_front_legs<sp/>=<sp/>Stack_of_vector(</highlight><highlight class="stringliteral">&quot;front_legs_state&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(state[</highlight><highlight class="stringliteral">&quot;fr_qref&quot;</highlight><highlight class="normal">].sout,<sp/>robot_state_front_legs.sin1)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(state[</highlight><highlight class="stringliteral">&quot;fl_qref&quot;</highlight><highlight class="normal">].sout,<sp/>robot_state_front_legs.sin2)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>robot_state_back_legs<sp/>=<sp/>Stack_of_vector(</highlight><highlight class="stringliteral">&quot;hind_legs_state&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(state[</highlight><highlight class="stringliteral">&quot;hr_qref&quot;</highlight><highlight class="normal">].sout,<sp/>robot_state_back_legs.sin1)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(state[</highlight><highlight class="stringliteral">&quot;hl_qref&quot;</highlight><highlight class="normal">].sout,<sp/>robot_state_back_legs.sin2)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>robot_state<sp/>=<sp/>Stack_of_vector(</highlight><highlight class="stringliteral">&quot;robot_des_state&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(robot_state_front_legs.sout,<sp/>robot_state.sin1)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(robot_state_back_legs.sout,<sp/>robot_state.sin2)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">draw_simple_graph():</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>writeGraph(</highlight><highlight class="stringliteral">&apos;/tmp/robot_state_reference_from_slider.dot&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">create_simple_graph()</highlight></codeline>
<codeline lineno="88"><highlight class="normal">draw_simple_graph()</highlight></codeline>
    </programlisting>
    <location file="demos/filter_graph.py"/>
  </compounddef>
</doxygen>
