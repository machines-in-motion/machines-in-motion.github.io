<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="tools_8cpp" kind="file" language="C++">
    <compoundname>tools.cpp</compoundname>
    <includes refid="tools_8hh" local="no">dynamic_graph_manager/tools.hh</includes>
    <incdepgraph>
      <node id="2581">
        <label>src/tools.cpp</label>
        <link refid="tools.cpp"/>
        <childnode refid="2582" relation="include">
        </childnode>
      </node>
      <node id="2583">
        <label>dynamic-graph/linear-algebra.h</label>
      </node>
      <node id="2584">
        <label>yaml_cpp_catkin/yaml_eigen.h</label>
      </node>
      <node id="2582">
        <label>dynamic_graph_manager/tools.hh</label>
        <link refid="tools_8hh"/>
        <childnode refid="2583" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacedynamic__graph">dynamic_graph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) </para></simplesect>
<xrefsect id="license_1_license000066"><xreftitle>License</xreftitle><xrefdescription><para>License BSD-3-Clause </para></xrefdescription></xrefsect><simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tools_8hh" kindref="compound">dynamic_graph_manager/tools.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacedynamic__graph_1a3473e2d5502f8a2bff6b43cbc2d35e07" kindref="member">parse_yaml_node</ref>(</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YAML::Node&amp;<sp/>sensors_and_controls,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedynamic__graph_1a51212ed7fa4ae81e7b362a27f09b7ab8" kindref="member">VectorDGMap</ref>&amp;<sp/>out_sensors_map,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedynamic__graph_1a51212ed7fa4ae81e7b362a27f09b7ab8" kindref="member">VectorDGMap</ref>&amp;<sp/>out_motor_controls_map)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YAML::Node&amp;<sp/>sensors<sp/>=<sp/>sensors_and_controls[</highlight><highlight class="stringliteral">&quot;sensors&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YAML::Node&amp;<sp/>controls<sp/>=<sp/>sensors_and_controls[</highlight><highlight class="stringliteral">&quot;controls&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>std::string<sp/>hardware_name<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>dynamicgraph::Vector<sp/>init_value<sp/>(1);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>(0);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>out_sensors_map.clear();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>out_motor_controls_map.clear();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*******************************</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>iterate<sp/>over<sp/>the<sp/>sensors<sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>*******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(YAML::const_iterator<sp/>sensor_it<sp/>=<sp/>sensors.begin();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_it<sp/>!=<sp/>sensors.end();<sp/>++sensor_it)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>hardware_name<sp/>=<sp/>sensor_it-&gt;first.as&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>sensor_it-&gt;second[</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">].as&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>out_sensors_map[hardware_name]<sp/>=<sp/>dynamicgraph::Vector(size);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>out_sensors_map[hardware_name].setZero();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/********************************</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>iterate<sp/>over<sp/>the<sp/>controls<sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(YAML::const_iterator<sp/>control_it<sp/>=<sp/>controls.begin();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>control_it<sp/>!=<sp/>controls.end();<sp/>++control_it)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>hardware_name<sp/>=<sp/>control_it-&gt;first.as&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>control_it-&gt;second[</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">].as&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>out_motor_controls_map[hardware_name]<sp/>=<sp/>dynamicgraph::Vector(size);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>out_motor_controls_map[hardware_name].setZero();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight></codeline>
    </programlisting>
    <location file="src/tools.cpp"/>
  </compounddef>
</doxygen>
