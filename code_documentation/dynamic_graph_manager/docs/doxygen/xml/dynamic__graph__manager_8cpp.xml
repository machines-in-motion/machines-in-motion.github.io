<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dynamic__graph__manager_8cpp" kind="file" language="C++">
    <compoundname>dynamic_graph_manager.cpp</compoundname>
    <includes local="no">real_time_tools/iostream.hpp</includes>
    <includes local="no">real_time_tools/process_manager.hpp</includes>
    <includes refid="ros__init_8hh" local="no">dynamic_graph_manager/ros_init.hh</includes>
    <includes refid="dynamic__graph__manager_8hh" local="no">dynamic_graph_manager/dynamic_graph_manager.hh</includes>
    <includes refid="exception-yaml-cpp_8hpp" local="no">dynamic_graph_manager/exception/exception-yaml-cpp.hpp</includes>
    <incdepgraph>
      <node id="2017">
        <label>list</label>
      </node>
      <node id="1997">
        <label>atomic</label>
      </node>
      <node id="1992">
        <label>dynamic_graph_manager/dynamic_graph_manager.hh</label>
        <link refid="dynamic__graph__manager_8hh"/>
        <childnode refid="1993" relation="include">
        </childnode>
        <childnode refid="1994" relation="include">
        </childnode>
        <childnode refid="1995" relation="include">
        </childnode>
        <childnode refid="1996" relation="include">
        </childnode>
        <childnode refid="1997" relation="include">
        </childnode>
        <childnode refid="1998" relation="include">
        </childnode>
        <childnode refid="1999" relation="include">
        </childnode>
        <childnode refid="1991" relation="include">
        </childnode>
        <childnode refid="2000" relation="include">
        </childnode>
        <childnode refid="2001" relation="include">
        </childnode>
        <childnode refid="2002" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2004" relation="include">
        </childnode>
        <childnode refid="2005" relation="include">
        </childnode>
        <childnode refid="2009" relation="include">
        </childnode>
        <childnode refid="2012" relation="include">
        </childnode>
      </node>
      <node id="1995">
        <label>functional</label>
      </node>
      <node id="2000">
        <label>std_srvs/Empty.h</label>
      </node>
      <node id="2004">
        <label>shared_memory/locked_condition_variable.hpp</label>
      </node>
      <node id="2003">
        <label>real_time_tools/timer.hpp</label>
      </node>
      <node id="2006">
        <label>dynamic_graph_manager/RunCommand.h</label>
      </node>
      <node id="2001">
        <label>real_time_tools/thread.hpp</label>
      </node>
      <node id="2010">
        <label>dynamic-graph/linear-algebra.h</label>
      </node>
      <node id="2019">
        <label>string</label>
      </node>
      <node id="2018">
        <label>map</label>
      </node>
      <node id="1994">
        <label>wait.h</label>
      </node>
      <node id="2023">
        <label>exception</label>
      </node>
      <node id="2012">
        <label>dynamic_graph_manager/device.hh</label>
        <link refid="device_8hh"/>
        <childnode refid="1999" relation="include">
        </childnode>
        <childnode refid="2010" relation="include">
        </childnode>
        <childnode refid="2013" relation="include">
        </childnode>
        <childnode refid="2014" relation="include">
        </childnode>
        <childnode refid="2015" relation="include">
        </childnode>
        <childnode refid="2009" relation="include">
        </childnode>
      </node>
      <node id="2008">
        <label>dynamic-graph/python/interpreter.hh</label>
      </node>
      <node id="1990">
        <label>dynamic_graph_manager/ros_init.hh</label>
        <link refid="ros__init_8hh"/>
        <childnode refid="1991" relation="include">
        </childnode>
      </node>
      <node id="2015">
        <label>dynamic_graph_manager/periodic-call.hh</label>
        <link refid="periodic-call_8hh"/>
        <childnode refid="2008" relation="include">
        </childnode>
        <childnode refid="2016" relation="include">
        </childnode>
        <childnode refid="2013" relation="include">
        </childnode>
        <childnode refid="2017" relation="include">
        </childnode>
        <childnode refid="2018" relation="include">
        </childnode>
        <childnode refid="2019" relation="include">
        </childnode>
      </node>
      <node id="2002">
        <label>real_time_tools/spinner.hpp</label>
      </node>
      <node id="2007">
        <label>dynamic_graph_manager/RunPythonFile.h</label>
      </node>
      <node id="1999">
        <label>yaml-cpp/yaml.h</label>
      </node>
      <node id="2021">
        <label>dynamic_graph_manager/exception/exception-abstract.hh</label>
        <link refid="exception-abstract_8hh"/>
        <childnode refid="2022" relation="include">
        </childnode>
        <childnode refid="2019" relation="include">
        </childnode>
        <childnode refid="2023" relation="include">
        </childnode>
      </node>
      <node id="1988">
        <label>real_time_tools/iostream.hpp</label>
      </node>
      <node id="1989">
        <label>real_time_tools/process_manager.hpp</label>
      </node>
      <node id="2020">
        <label>dynamic_graph_manager/exception/exception-yaml-cpp.hpp</label>
        <link refid="exception-yaml-cpp_8hpp"/>
        <childnode refid="2021" relation="include">
        </childnode>
      </node>
      <node id="1993">
        <label>unistd.h</label>
      </node>
      <node id="2016">
        <label>dynamic-graph/signal-base.h</label>
      </node>
      <node id="1991">
        <label>ros/ros.h</label>
      </node>
      <node id="2022">
        <label>iostream</label>
      </node>
      <node id="2014">
        <label>dynamic-graph/all-signals.h</label>
      </node>
      <node id="2005">
        <label>dynamic_graph_manager/ros_interpreter.hh</label>
        <link refid="ros__interpreter_8hh"/>
        <childnode refid="1991" relation="include">
        </childnode>
        <childnode refid="2006" relation="include">
        </childnode>
        <childnode refid="2007" relation="include">
        </childnode>
        <childnode refid="2008" relation="include">
        </childnode>
      </node>
      <node id="2013">
        <label>dynamic-graph/entity.h</label>
      </node>
      <node id="1998">
        <label>mutex</label>
      </node>
      <node id="1996">
        <label>chrono</label>
      </node>
      <node id="2011">
        <label>yaml_cpp_catkin/yaml_eigen.h</label>
      </node>
      <node id="1987">
        <label>src/dynamic_graph_manager.cpp</label>
        <link refid="dynamic_graph_manager.cpp"/>
        <childnode refid="1988" relation="include">
        </childnode>
        <childnode refid="1989" relation="include">
        </childnode>
        <childnode refid="1990" relation="include">
        </childnode>
        <childnode refid="1992" relation="include">
        </childnode>
        <childnode refid="2020" relation="include">
        </childnode>
      </node>
      <node id="2009">
        <label>dynamic_graph_manager/tools.hh</label>
        <link refid="tools_8hh"/>
        <childnode refid="2010" relation="include">
        </childnode>
        <childnode refid="2011" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="dynamic__graph__manager_8cpp_1a1e34d5c68ba74d2b3d9e4925d4710cb8" prot="public" static="no">
        <name>DYNAMIC_GRAPH_MANAGER_VERBOSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynamic_graph_manager.cpp" line="20" column="9" bodyfile="src/dynamic_graph_manager.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Maximilien Naveau (<ulink url="mailto:maximilien.naveau@gmail.com">maximilien.naveau@gmail.com</ulink>) </para></simplesect>
<xrefsect id="license_1_license000045"><xreftitle>License</xreftitle><xrefdescription><para>License BSD-3-Clause </para></xrefdescription></xrefsect><simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>use<sp/>for<sp/>real_time<sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;real_time_tools/iostream.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>to<sp/>set<sp/>cpu<sp/>latency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;real_time_tools/process_manager.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>ROS<sp/>singleton<sp/>to<sp/>initialize<sp/>and<sp/>use<sp/>ROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ros__init_8hh" kindref="compound">dynamic_graph_manager/ros_init.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>file<sp/>defines<sp/>the<sp/>class<sp/>in<sp/>this<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dynamic__graph__manager_8hh" kindref="compound">dynamic_graph_manager/dynamic_graph_manager.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>order<sp/>to<sp/>throw<sp/>hand<sp/>made<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="exception-yaml-cpp_8hpp" kindref="compound">dynamic_graph_manager/exception/exception-yaml-cpp.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DYNAMIC_GRAPH_MANAGER_VERBOSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a391d7a3f7c3df820d31f2c1d0ff7fc51" kindref="member">DynamicGraphManager::dg_ros_node_name_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dynamic_graph&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a415f24927dbe9dfd0ee4a6462428bd48" kindref="member">DynamicGraphManager::hw_com_ros_node_name_</ref><sp/>=</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hardware_communication&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1abd4e4f618fbdacfda8c2cdece08e401b" kindref="member">DynamicGraphManager::sensors_map_name_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sensors_map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a056de4d7a49496b2b0812d96d93370d9" kindref="member">DynamicGraphManager::motor_controls_map_name_</ref><sp/>=</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;motor_controls_map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">DynamicGraphManager::shared_memory_name_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DGM_ShM&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a909b8d2d024a2a11473fa2d94a18002e" kindref="member">DynamicGraphManager::cond_var_name_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cond_var&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="classdynamic__graph_1_1DynamicGraphManager_1afd98424082e5a1f878e6c7cb08a62c4a" kindref="member">DynamicGraphManager::DynamicGraphManager</ref>()</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Upon<sp/>construction<sp/>the<sp/>graph<sp/>is<sp/>inactive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>.reset();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" kindref="member">stop_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aabf11778fb69e5203d38c8093de60bab" kindref="member">stop_hardware_communication</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a81617144faf55e4ed2bf60165060b0f5" kindref="member">is_real_robot_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aa8aa645099e7e9cce426381e38b5027d" kindref="member">pid_dynamic_graph_process_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a02232cdc5cabca34d07dada6ced38532" kindref="member">pid_hardware_communication_process_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>.clear();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>.clear();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a7e6cc5e58f1accce947f929d233a67fd" kindref="member">has_been_waken_by_dg_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1abafc3cf4d8f7dc938f98b7eb07b7af9a" kindref="member">missed_control_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a10922e790e039f78b0fabbb5ef944488" kindref="member">max_missed_control_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1006cdb2d7e30e291d3d568923ebbc03" kindref="member">control_period_</ref><sp/>=<sp/>clock::duration(0);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clean<sp/>the<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>shared_memory::clear_shared_memory(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>files<sp/>where<sp/>to<sp/>dump<sp/>the<sp/>timers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a18c2cc959dceef659ab1f567e06254f7" kindref="member">dg_active_timer_file_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/dg_active_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1af02dbc7fb67674937208abe4cd75d652" kindref="member">dg_sleep_timer_file_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/dg_sleep_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1a43bcf9c74648466d1e561203a39d87" kindref="member">dg_timer_file_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/dg_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a2bd29dbd358b8c02805f4df970e75936" kindref="member">hwc_active_timer_file_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/hwc_active_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a5db6275d202963665a35c5eb2e68088d" kindref="member">hwc_sleep_timer_file_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/hwc_sleep_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a84f97c9eebbecee1af314e74fe22d8ed" kindref="member">hwc_timer_file_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/hwc_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a6bcf93d16574035ee654289274d0a790" kindref="member">DynamicGraphManager::~DynamicGraphManager</ref>()</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>kill<sp/>all<sp/>ros<sp/>related<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1adb99ba3a7a5e677b30531a69bcc922ec" kindref="member">ros_service_start_dg_</ref>.shutdown();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1adf973b6da4e4fe14cae262ba94ebb191" kindref="member">ros_service_stop_dg_</ref>.shutdown();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="namespacedynamic__graph_1a0a7d6cd6c123bd1852af188fc06ce4f7" kindref="member">ros_shutdown</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>the<sp/>dynamic<sp/>graph<sp/>thread<sp/>to<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" kindref="member">stop_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;notify_all();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab827a776b4ac31ea91ace9a2bfc1e99d" kindref="member">wait_stop_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>the<sp/>hardware<sp/>communication<sp/>thread<sp/>to<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aabf11778fb69e5203d38c8093de60bab" kindref="member">stop_hardware_communication</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;notify_all();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a83a98e169cd587d101bba69bb799e408" kindref="member">wait_stop_hardware_communication</ref>();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clean<sp/>the<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>shared_memory::clear_shared_memory(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>the<sp/>python<sp/>interpretor<sp/>after<sp/>the<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>.reset(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a40458dd801d1ee7e2051f8b8fab5366b" kindref="member">ros_python_interpreter_</ref>.reset(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a02232cdc5cabca34d07dada6ced38532" kindref="member">pid_hardware_communication_process_</ref><sp/>==<sp/>getpid())</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>kill(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a9c11927e0b76e91fabc4b34ea7fb85bc" kindref="member">pid_dynamic_graph_process</ref>(),<sp/>SIGKILL);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab980a2384c817ab5f59e712a54b2261a" kindref="member">has_dynamic_graph_process_died</ref>())</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usleep(1000);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ac6859456bbdd4307cb880dc5e54131dd" kindref="member">DynamicGraphManager::initialize</ref>(YAML::Node<sp/>param){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Upon<sp/>initialization<sp/>the<sp/>graph<sp/>and<sp/>the<sp/>hardware<sp/>com<sp/>are<sp/>inactive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" kindref="member">stop_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aabf11778fb69e5203d38c8093de60bab" kindref="member">stop_hardware_communication</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>yaml<sp/>node<sp/>for<sp/>further<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref><sp/>=<sp/>param<sp/>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aa8aa645099e7e9cce426381e38b5027d" kindref="member">pid_dynamic_graph_process_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a02232cdc5cabca34d07dada6ced38532" kindref="member">pid_hardware_communication_process_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clean<sp/>the<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>shared_memory::clear_shared_memory(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>initialize<sp/>the<sp/>sensors<sp/>and<sp/>control<sp/>maps<sp/>in<sp/>the<sp/>common<sp/>initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="namespacedynamic__graph_1a3473e2d5502f8a2bff6b43cbc2d35e07" kindref="member">parse_yaml_node</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;device&quot;</highlight><highlight class="normal">],<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>shared_memory::set(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1abd4e4f618fbdacfda8c2cdece08e401b" kindref="member">sensors_map_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>shared_memory::set(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a056de4d7a49496b2b0812d96d93370d9" kindref="member">motor_controls_map_name_</ref>,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>maximum<sp/>cpu<sp/>latency<sp/>to<sp/>0<sp/>us.<sp/>This<sp/>keeps<sp/>the<sp/>CPU<sp/>from<sp/>sleeping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>real_time_tools::set_cpu_dma_latency(0);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>parameter<sp/>for<sp/>the<sp/>hardware<sp/>communication<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>std::string<sp/>error_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Fail<sp/>to<sp/>parse<sp/>yaml<sp/>file.<sp/>Node<sp/>is:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hardware_communication:<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a10922e790e039f78b0fabbb5ef944488" kindref="member">max_missed_control_</ref><sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;hardware_communication&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;max_missed_control&quot;</highlight><highlight class="normal">].as&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception&amp;<sp/>e){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1ExceptionYamlCpp" kindref="compound">ExceptionYamlCpp</ref>(ExceptionYamlCpp::PARSING_UNSIGNED,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_str<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;max_missed_control&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1006cdb2d7e30e291d3d568923ebbc03" kindref="member">control_period_</ref><sp/>=<sp/><sp/>clock::duration(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;hardware_communication&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;control_period&quot;</highlight><highlight class="normal">].as&lt;unsigned&gt;());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception&amp;<sp/>e){</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1ExceptionYamlCpp" kindref="compound">ExceptionYamlCpp</ref>(ExceptionYamlCpp::PARSING_UNSIGNED,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_str<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;control_period&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a2c0f1323534e9e1b17f3b1cc23f0c7f1" kindref="member">control_period_sec_</ref><sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;hardware_communication&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;control_period&quot;</highlight><highlight class="normal">].as&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>*<sp/>std::pow(10,-9);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception&amp;<sp/>e){</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1ExceptionYamlCpp" kindref="compound">ExceptionYamlCpp</ref>(ExceptionYamlCpp::PARSING_DOUBLE,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_str<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;control_period&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1abb979a3e9235ef71a61579a6a6ad1200" kindref="member">maximum_time_for_user_cmd_</ref><sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;hardware_communication&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;maximum_time_for_user_cmd&quot;</highlight><highlight class="normal">].as&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>*<sp/>std::pow(10,-9);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception&amp;<sp/>e){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1ExceptionYamlCpp" kindref="compound">ExceptionYamlCpp</ref>(ExceptionYamlCpp::PARSING_DOUBLE,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_str<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;maximum_time_for_user_cmd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a81617144faf55e4ed2bf60165060b0f5" kindref="member">is_real_robot_</ref><sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;is_real_robot&quot;</highlight><highlight class="normal">].as&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception&amp;<sp/>e){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1ExceptionYamlCpp" kindref="compound">ExceptionYamlCpp</ref>(ExceptionYamlCpp::PARSING_BOOL,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fail<sp/>to<sp/>parse<sp/>yaml<sp/>file.<sp/>Node<sp/>is:<sp/>\nis_real_robot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>=<sp/>real_time_tools::get_log_dir(</highlight><highlight class="stringliteral">&quot;dynamic_graph_manager&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a18c2cc959dceef659ab1f567e06254f7" kindref="member">dg_active_timer_file_</ref><sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;dg_active_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1af02dbc7fb67674937208abe4cd75d652" kindref="member">dg_sleep_timer_file_</ref><sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;dg_sleep_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1a43bcf9c74648466d1e561203a39d87" kindref="member">dg_timer_file_</ref><sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;dg_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a2bd29dbd358b8c02805f4df970e75936" kindref="member">hwc_active_timer_file_</ref><sp/>=<sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;hwc_active_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a5db6275d202963665a35c5eb2e68088d" kindref="member">hwc_sleep_timer_file_</ref><sp/>=<sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;hwc_sleep_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a84f97c9eebbecee1af314e74fe22d8ed" kindref="member">hwc_timer_file_</ref><sp/>=<sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;hwc_timer.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_timer_history_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(YAML::Node<sp/>parameter<sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;debug_timer_history_length&quot;</highlight><highlight class="normal">])<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>debug_timer_history_length<sp/>=<sp/>parameter.as&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8f206d87817177e389df0c27f1954f51" kindref="member">dg_active_timer_</ref>.set_memory_size(debug_timer_history_length);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8e0eb495ce07011796c58f54cef16ef5" kindref="member">dg_sleep_timer_</ref>.set_memory_size(debug_timer_history_length);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae73984087ad28fe492905eda861783bd" kindref="member">dg_timer_</ref>.set_memory_size(debug_timer_history_length);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1afe6c823bac22d756fc649f911fc1c29b" kindref="member">hwc_active_timer_</ref>.set_memory_size(debug_timer_history_length);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a89eb402f9e2eaa8dfad090f6c9845f6c" kindref="member">hwc_sleep_timer_</ref>.set_memory_size(debug_timer_history_length);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a08ef83c411e5439204fa05b28f8e2794" kindref="member">hwc_timer_</ref>.set_memory_size(debug_timer_history_length);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Log<sp/>will<sp/>be<sp/>saved<sp/>in<sp/>:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>create<sp/>and<sp/>destroy<sp/>the<sp/>condition<sp/>variable<sp/>to<sp/>free<sp/>the<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>therefore<sp/>the<sp/>associated<sp/>mutex<sp/>which<sp/>must<sp/>be<sp/>lockable<sp/>at<sp/>this<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::LockedConditionVariable(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a909b8d2d024a2a11473fa2d94a18002e" kindref="member">cond_var_name_</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a93272fcbb3793dfc92422186022ecf72" kindref="member">DynamicGraphManager::run</ref>()</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a81617144faf55e4ed2bf60165060b0f5" kindref="member">is_real_robot_</ref>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>pid_t<sp/>child_pid<sp/>=<sp/>fork();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(child_pid<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>child<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aa8aa645099e7e9cce426381e38b5027d" kindref="member">pid_dynamic_graph_process_</ref><sp/>=<sp/>getpid();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a02232cdc5cabca34d07dada6ced38532" kindref="member">pid_hardware_communication_process_</ref><sp/>=<sp/>getppid();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a81926d5d33573d667bc6511bbb2d8f52" kindref="member">initialize_dynamic_graph_process</ref>();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8e23eb4ce0acaef397bf84a770b9f015" kindref="member">run_dynamic_graph_process</ref>();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab827a776b4ac31ea91ace9a2bfc1e99d" kindref="member">wait_stop_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::waitForShutdown();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DG:<sp/>End<sp/>of<sp/>the<sp/>dynamic<sp/>graph<sp/>process.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(child_pid<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>parent<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aa8aa645099e7e9cce426381e38b5027d" kindref="member">pid_dynamic_graph_process_</ref><sp/>=<sp/>child_pid;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a02232cdc5cabca34d07dada6ced38532" kindref="member">pid_hardware_communication_process_</ref><sp/>=<sp/>getpid();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pid<sp/>of<sp/>dynamic<sp/>graph<sp/>process:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aa8aa645099e7e9cce426381e38b5027d" kindref="member">pid_dynamic_graph_process_</ref></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pid<sp/>of<sp/>hardware<sp/>communication<sp/>process:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a02232cdc5cabca34d07dada6ced38532" kindref="member">pid_hardware_communication_process_</ref></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae3927887762c52c7bf50ab5a565c3077" kindref="member">initialize_hardware_communication_process</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a81e7cb10262383030c10156730d39ce8" kindref="member">run_hardware_communication_process</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(std::runtime_error(</highlight><highlight class="stringliteral">&quot;DynamicGraphManager::run():<sp/>the<sp/>fork<sp/>failed&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a81926d5d33573d667bc6511bbb2d8f52" kindref="member">initialize_dynamic_graph_process</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae3927887762c52c7bf50ab5a565c3077" kindref="member">initialize_hardware_communication_process</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad13f5aef302173293a0c162c28505ef8" kindref="member">run_single_process</ref>();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a18dab9ca9c8901779a944386f2b8898c" kindref="member">DynamicGraphManager::wait_start_dynamic_graph</ref>()</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>ros::NodeHandle&amp;<sp/>dg_ros_node<sp/>=<sp/><ref refid="namespacedynamic__graph_1ab01ece41a91a029cf335e28548cdfc06" kindref="member">ros_init</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a391d7a3f7c3df820d31f2c1d0ff7fc51" kindref="member">dg_ros_node_name_</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab929d21277e5d2fba726b8ae422c27a8" kindref="member">is_dynamic_graph_stopped</ref>()<sp/>&amp;&amp;<sp/>dg_ros_node.ok())</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(1000);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab827a776b4ac31ea91ace9a2bfc1e99d" kindref="member">DynamicGraphManager::wait_stop_dynamic_graph</ref>()</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>ros::NodeHandle&amp;<sp/>dg_ros_node<sp/>=<sp/><ref refid="namespacedynamic__graph_1ab01ece41a91a029cf335e28548cdfc06" kindref="member">ros_init</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a391d7a3f7c3df820d31f2c1d0ff7fc51" kindref="member">dg_ros_node_name_</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab929d21277e5d2fba726b8ae422c27a8" kindref="member">is_dynamic_graph_stopped</ref>()<sp/>&amp;&amp;<sp/>dg_ros_node.ok())</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(100000);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" kindref="member">stop_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" kindref="member">thread_dynamic_graph_</ref>)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;notify_all();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" kindref="member">thread_dynamic_graph_</ref>-&gt;join();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a83a98e169cd587d101bba69bb799e408" kindref="member">DynamicGraphManager::wait_stop_hardware_communication</ref>()</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="namespacedynamic__graph_1ab01ece41a91a029cf335e28548cdfc06" kindref="member">ros_init</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a415f24927dbe9dfd0ee4a6462428bd48" kindref="member">hw_com_ros_node_name_</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1afcc53ebec6e5f2057c23a05894715125" kindref="member">is_hardware_communication_stopped</ref>())</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(100000);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aabf11778fb69e5203d38c8093de60bab" kindref="member">stop_hardware_communication</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae0e1a3c59fa7d0282529e1a544e83b4d" kindref="member">thread_hardware_communication_</ref>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;notify_all();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae0e1a3c59fa7d0282529e1a544e83b4d" kindref="member">thread_hardware_communication_</ref>-&gt;join();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab980a2384c817ab5f59e712a54b2261a" kindref="member">DynamicGraphManager::has_dynamic_graph_process_died</ref>()</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_dg_proc_dead<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>pid_t<sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>waitpid(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1aa8aa645099e7e9cce426381e38b5027d" kindref="member">pid_dynamic_graph_process_</ref>,<sp/>&amp;status,<sp/>WNOHANG);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>is_dg_proc_dead<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>is_dg_proc_dead<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(DYNAMIC_GRAPH_MANAGER_VERBOSE)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DynamicGraphManager::has_dynamic_graph_process_died():&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>waitpid<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>is_dg_proc_dead<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_dg_proc_dead;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a81926d5d33573d667bc6511bbb2d8f52" kindref="member">DynamicGraphManager::initialize_dynamic_graph_process</ref>()</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>here<sp/>this<sp/>process<sp/>becomes<sp/>a<sp/>ros<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>ros::NodeHandle&amp;<sp/>ros_node_handle<sp/>=<sp/><ref refid="namespacedynamic__graph_1ab01ece41a91a029cf335e28548cdfc06" kindref="member">ros_init</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a391d7a3f7c3df820d31f2c1d0ff7fc51" kindref="member">dg_ros_node_name_</ref>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>std::string<sp/>robot_name<sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;device&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">].as&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>export<sp/>the<sp/>yaml<sp/>node<sp/>to<sp/>ros<sp/>so<sp/>we<sp/>can<sp/>access<sp/>it<sp/>in<sp/>the<sp/>python<sp/>interpretor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>in<sp/>other<sp/>ros<sp/>node<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>ros_node_handle.setParam(</highlight><highlight class="stringliteral">&quot;device_name&quot;</highlight><highlight class="normal">,<sp/>robot_name);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>ros_node_handle.setParam(</highlight><highlight class="stringliteral">&quot;log_dir&quot;</highlight><highlight class="normal">,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ace11054bf618c29e4fda9a77905e8ff0" kindref="member">log_dir_</ref>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>create<sp/>a<sp/>python<sp/>interpreter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a40458dd801d1ee7e2051f8b8fab5366b" kindref="member">ros_python_interpreter_</ref>.reset(</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1RosPythonInterpreter" kindref="compound">dynamic_graph::RosPythonInterpreter</ref>(ros_node_handle));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>start<sp/>the<sp/>ros<sp/>services<sp/>for<sp/>the<sp/>DGM<sp/>(python<sp/>command<sp/>+<sp/>start/stop<sp/>DG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aa396c4c91c076a103e2d5cb6c5606a7d" kindref="member">start_ros_service</ref>(ros_node_handle);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>create<sp/>the<sp/>device<sp/>of<sp/>the<sp/>DG<sp/>and<sp/>implicitly<sp/>the<sp/>DG<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1Device" kindref="compound">Device</ref>(robot_name));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>-&gt;initialize(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3773835c294117a500af96d272921ea" kindref="member">params_</ref>[</highlight><highlight class="stringliteral">&quot;device&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>build<sp/>the<sp/>condition<sp/>variables<sp/>after<sp/>the<sp/>fork<sp/>(seems<sp/>safer<sp/>this<sp/>way)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>shared_memory::LockedConditionVariable(</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a909b8d2d024a2a11473fa2d94a18002e" kindref="member">cond_var_name_</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>call<sp/>the<sp/>prologue<sp/>of<sp/>the<sp/>python<sp/>interpreter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>*NEED*<sp/>to<sp/>do<sp/>this<sp/>*AFTER*<sp/>the<sp/>device<sp/>is<sp/>created<sp/>to<sp/>fetch<sp/>its<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>python<sp/>interpreter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a11cc3b7fefc7fe146dc112a7e6d55f3d" kindref="member">python_prologue</ref>();</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">DynamicGraphManager::run_python_command</ref>(std::ostream&amp;<sp/>file,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>command)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>command<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>std::string<sp/>lerr(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),lout(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),lres(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a40458dd801d1ee7e2051f8b8fab5366b" kindref="member">ros_python_interpreter_</ref>-&gt;run_python_command(command,lres,lout,lerr);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lres<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lres==</highlight><highlight class="stringliteral">&quot;&lt;NULL&gt;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&lt;&lt;<sp/>lout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;------&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&lt;&lt;<sp/>lerr<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&lt;&lt;<sp/>lres<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a11cc3b7fefc7fe146dc112a7e6d55f3d" kindref="member">DynamicGraphManager::python_prologue</ref>()</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>the<sp/>log<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>aof(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ac3be4a8d0596390bc5dd055321a7df55" kindref="member">python_log_file_</ref>.c_str());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref>(</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aof,<sp/></highlight><highlight class="stringliteral">&quot;print(\&quot;Executing<sp/>python<sp/>interpreter<sp/>prologue...\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>current<sp/>environment<sp/>variable<sp/>are<sp/>setup<sp/>in<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>python<sp/>interpreter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref>(aof,<sp/></highlight><highlight class="stringliteral">&quot;import<sp/>sys,<sp/>os&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref>(aof,<sp/></highlight><highlight class="stringliteral">&quot;pythonpath<sp/>=<sp/>os.environ[&apos;PYTHONPATH&apos;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref>(aof,<sp/></highlight><highlight class="stringliteral">&quot;path<sp/>=<sp/>[]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref>(aof,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>p<sp/>in<sp/>pythonpath.split(&apos;:&apos;):\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>if<sp/>p<sp/>not<sp/>in<sp/>sys.path:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>path.append(p)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref><sp/>(aof,<sp/></highlight><highlight class="stringliteral">&quot;path.extend(sys.path)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref><sp/>(aof,<sp/></highlight><highlight class="stringliteral">&quot;sys.path<sp/>=<sp/>path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>be<sp/>able<sp/>to<sp/>invoke<sp/>rospy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref><sp/>(aof,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;if<sp/>not<sp/>hasattr(sys,<sp/>\&apos;argv\&apos;):\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>sys.argv<sp/><sp/>=<sp/>[&apos;dynamic_graph_manager&apos;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>device<sp/>or<sp/>get<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>c++<sp/>object<sp/>if<sp/>it<sp/>already<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref>(aof,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;from<sp/>dynamic_graph_manager.device.prologue<sp/>import<sp/>robot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a56acce72235fe0786830ec19a3439309" kindref="member">run_python_command</ref>(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aof,<sp/></highlight><highlight class="stringliteral">&quot;print(\&quot;Executing<sp/>python<sp/>interpreter<sp/>prologue...<sp/>Done\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>the<sp/>log<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>aof.close();</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8e23eb4ce0acaef397bf84a770b9f015" kindref="member">DynamicGraphManager::run_dynamic_graph_process</ref>()</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;wait<sp/>to<sp/>start<sp/>dynamic<sp/>graph\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>ros::NodeHandle&amp;<sp/>dg_ros_node<sp/>=<sp/><ref refid="namespacedynamic__graph_1ab01ece41a91a029cf335e28548cdfc06" kindref="member">ros_init</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a391d7a3f7c3df820d31f2c1d0ff7fc51" kindref="member">dg_ros_node_name_</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a18dab9ca9c8901779a944386f2b8898c" kindref="member">wait_start_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dg_ros_node.ok())</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>launch<sp/>the<sp/>real<sp/>time<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" kindref="member">thread_dynamic_graph_</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>real_time_tools::RealTimeThread());</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" kindref="member">thread_dynamic_graph_</ref>-&gt;parameters_.cpu_id_.push_back(0);<sp/></highlight><highlight class="comment">//<sp/>cpu<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" kindref="member">thread_dynamic_graph_</ref>-&gt;create_realtime_thread(</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a7d289a916922f69796b0042f64de1499" kindref="member">DynamicGraphManager::dynamic_graph_real_time_loop_helper</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;dynamic<sp/>graph<sp/>thread<sp/>started\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;dynamic<sp/>graph<sp/>thread<sp/>NOT<sp/>started<sp/>as<sp/>ROS<sp/>has<sp/>been<sp/>shutdown.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a81e7cb10262383030c10156730d39ce8" kindref="member">DynamicGraphManager::run_hardware_communication_process</ref>()</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>here<sp/>on<sp/>this<sp/>process<sp/>is<sp/>a<sp/>ros<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="namespacedynamic__graph_1ab01ece41a91a029cf335e28548cdfc06" kindref="member">ros_init</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a415f24927dbe9dfd0ee4a6462428bd48" kindref="member">hw_com_ros_node_name_</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>build<sp/>the<sp/>condition<sp/>variables<sp/>after<sp/>the<sp/>fork<sp/>(seems<sp/>safer<sp/>this<sp/>way)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>shared_memory::LockedConditionVariable(</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a909b8d2d024a2a11473fa2d94a18002e" kindref="member">cond_var_name_</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>the<sp/>hardware<sp/>thread<sp/>to<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a234bef10fea6e3f9beb1580491127660" kindref="member">start_hardware_communication</ref>();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>launch<sp/>the<sp/>real<sp/>time<sp/>thread<sp/>and<sp/>ros<sp/>spin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>cpu_affinity;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_affinity.clear();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_affinity.push_back(2);<sp/></highlight><highlight class="comment">//<sp/>cpu<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae0e1a3c59fa7d0282529e1a544e83b4d" kindref="member">thread_hardware_communication_</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>real_time_tools::RealTimeThread());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae0e1a3c59fa7d0282529e1a544e83b4d" kindref="member">thread_hardware_communication_</ref>-&gt;parameters_.cpu_id_.push_back(2);<sp/></highlight><highlight class="comment">//<sp/>cpu<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae0e1a3c59fa7d0282529e1a544e83b4d" kindref="member">thread_hardware_communication_</ref>-&gt;create_realtime_thread(</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a771ad93758759932899273c5f01975fc" kindref="member">DynamicGraphManager::hardware_communication_real_time_loop_helper</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;hardware<sp/>communication<sp/>loop<sp/>started\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad13f5aef302173293a0c162c28505ef8" kindref="member">DynamicGraphManager::run_single_process</ref>()</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;wait<sp/>to<sp/>start<sp/>dynamic<sp/>graph\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a18dab9ca9c8901779a944386f2b8898c" kindref="member">wait_start_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>launch<sp/>the<sp/>real<sp/>time<sp/>thread<sp/>and<sp/>ros<sp/>spin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" kindref="member">thread_dynamic_graph_</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>real_time_tools::RealTimeThread());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aee7d35de31cdb05958c1b4f539c290ae" kindref="member">thread_dynamic_graph_</ref>-&gt;create_realtime_thread(</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classdynamic__graph_1_1DynamicGraphManager_1af28f8990655ae8464acb3bd4c56a74c2" kindref="member">DynamicGraphManager::single_process_real_time_loop_helper</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;single<sp/>process<sp/>dynamic<sp/>graph<sp/>loop<sp/>started\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aa396c4c91c076a103e2d5cb6c5606a7d" kindref="member">DynamicGraphManager::start_ros_service</ref>(ros::NodeHandle&amp;<sp/>ros_node_handle)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Advertize<sp/>the<sp/>service<sp/>to<sp/>start<sp/>and<sp/>stop<sp/>the<sp/>dynamic<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1adb99ba3a7a5e677b30531a69bcc922ec" kindref="member">ros_service_start_dg_</ref><sp/>=<sp/>ros_node_handle.advertiseService(</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;start_dynamic_graph&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1bfd2b965dde19d12d63f5928a4f670c" kindref="member">DynamicGraphManager::start_dynamic_graph</ref>,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1adf973b6da4e4fe14cae262ba94ebb191" kindref="member">ros_service_stop_dg_</ref><sp/>=<sp/>ros_node_handle.advertiseService(</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;stop_dynamic_graph&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" kindref="member">DynamicGraphManager::stop_dynamic_graph</ref>,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>advertize<sp/>the<sp/>ros::services<sp/>associated<sp/>to<sp/>the<sp/>python<sp/>interpreter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a40458dd801d1ee7e2051f8b8fab5366b" kindref="member">ros_python_interpreter_</ref>-&gt;start_ros_service();</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a72f9e755719ec8fde8f145a67b518333" kindref="member">DynamicGraphManager::dynamic_graph_real_time_loop</ref>()</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;DG:<sp/>Locking<sp/>scope...&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;lock_scope();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>ros::NodeHandle&amp;<sp/>dg_ros_node<sp/>=<sp/><ref refid="namespacedynamic__graph_1ab01ece41a91a029cf335e28548cdfc06" kindref="member">ros_init</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a391d7a3f7c3df820d31f2c1d0ff7fc51" kindref="member">dg_ros_node_name_</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;DG:<sp/>Start<sp/>loop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>timers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8f206d87817177e389df0c27f1954f51" kindref="member">dg_active_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8e0eb495ce07011796c58f54cef16ef5" kindref="member">dg_sleep_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae73984087ad28fe492905eda861783bd" kindref="member">dg_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab929d21277e5d2fba726b8ae422c27a8" kindref="member">is_dynamic_graph_stopped</ref>()<sp/>&amp;&amp;<sp/>dg_ros_node.ok())</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measure<sp/>the<sp/>complete<sp/>iteration<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae73984087ad28fe492905eda861783bd" kindref="member">dg_timer_</ref>.tac_tic();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measure<sp/>the<sp/>active<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8f206d87817177e389df0c27f1954f51" kindref="member">dg_active_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>sensor<sp/>from<sp/>the<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::get(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1abd4e4f618fbdacfda8c2cdece08e401b" kindref="member">sensors_map_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>the<sp/>dynamic<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>-&gt;set_sensors_from_map(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>-&gt;execute_graph();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>-&gt;get_controls_to_map(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>command<sp/>to<sp/>the<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_memory::set(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a056de4d7a49496b2b0812d96d93370d9" kindref="member">motor_controls_map_name_</ref>,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measure<sp/>the<sp/>active<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8f206d87817177e389df0c27f1954f51" kindref="member">dg_active_timer_</ref>.tac();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measure<sp/>the<sp/>sleep<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8e0eb495ce07011796c58f54cef16ef5" kindref="member">dg_sleep_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>notify<sp/>the<sp/>hardware_communication<sp/>process<sp/>that<sp/>the<sp/>control<sp/>has<sp/>been<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;notify_all();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>that<sp/>the<sp/>hardware_communication<sp/>process<sp/>acquiers<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;wait();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measure<sp/>the<sp/>sleep<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8e0eb495ce07011796c58f54cef16ef5" kindref="member">dg_sleep_timer_</ref>.tac();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>this<sp/>function<sp/>here<sp/>because<sp/>the<sp/>loop<sp/>might<sp/>stop<sp/>because<sp/>of<sp/>ROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" kindref="member">stop_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;DG:<sp/>Dumping<sp/>time<sp/>measurement\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8f206d87817177e389df0c27f1954f51" kindref="member">dg_active_timer_</ref>.dump_measurements(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a18c2cc959dceef659ab1f567e06254f7" kindref="member">dg_active_timer_file_</ref>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a8e0eb495ce07011796c58f54cef16ef5" kindref="member">dg_sleep_timer_</ref>.dump_measurements(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1af02dbc7fb67674937208abe4cd75d652" kindref="member">dg_sleep_timer_file_</ref>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ae73984087ad28fe492905eda861783bd" kindref="member">dg_timer_</ref>.dump_measurements(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1a43bcf9c74648466d1e561203a39d87" kindref="member">dg_timer_file_</ref>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;unlock_scope();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;DG:<sp/>Stop<sp/>Loop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>THREAD_FUNCTION_RETURN_VALUE;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a4ea4183f1a4bd2d450ffb4a0a22b4242" kindref="member">DynamicGraphManager::hardware_communication_real_time_loop</ref>()</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>acquiere<sp/>the<sp/>lock<sp/>on<sp/>the<sp/>condition<sp/>variable<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;lock_scope();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>basic<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>assert(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab1a2bc0a8f04126638056f430297097e" kindref="member">is_hardware_communication_stopped_</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>loop<sp/>is<sp/>started&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>assert(<ref refid="namespacedynamic__graph_1ab000cd6e1e6ed365a5a3e1adddf89dff" kindref="member">ros_exist</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a415f24927dbe9dfd0ee4a6462428bd48" kindref="member">hw_com_ros_node_name_</ref>));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>ros::NodeHandle&amp;<sp/>hw_ros_node<sp/>=<sp/><ref refid="namespacedynamic__graph_1ab01ece41a91a029cf335e28548cdfc06" kindref="member">ros_init</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a415f24927dbe9dfd0ee4a6462428bd48" kindref="member">hw_com_ros_node_name_</ref>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>assert(hw_ros_node.ok()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Ros<sp/>has<sp/>to<sp/>be<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>motor_controls_map<sp/>with<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(VectorDGMap::iterator<sp/>ctrl<sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>.begin()<sp/>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctrl<sp/>!=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>.end()<sp/>;<sp/>++ctrl)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>ctrl-&gt;second.fill(0.0);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>time<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1afe6c823bac22d756fc649f911fc1c29b" kindref="member">hwc_active_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a08ef83c411e5439204fa05b28f8e2794" kindref="member">hwc_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>the<sp/>loop<sp/>so<sp/>it<sp/>respect<sp/>the<sp/>input<sp/>frequence/period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab4716c8ec6194816235e6199863f46f9" kindref="member">hwc_spinner_</ref>.set_period(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a2c0f1323534e9e1b17f3b1cc23f0c7f1" kindref="member">control_period_sec_</ref>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab4716c8ec6194816235e6199863f46f9" kindref="member">hwc_spinner_</ref>.initialize();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>start<sp/>the<sp/>main<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;HARDWARE:<sp/>Start<sp/>loop<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>hwc_mutex_.lock();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1afcc53ebec6e5f2057c23a05894715125" kindref="member">is_hardware_communication_stopped</ref>()<sp/>&amp;&amp;<sp/>hw_ros_node.ok())</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>the<sp/>sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1afcc53ebec6e5f2057c23a05894715125" kindref="member">is_hardware_communication_stopped</ref>()<sp/>&amp;&amp;<sp/>hw_ros_node.ok())<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a7bddce83d5185433041ad27610b85b3a" kindref="member">get_sensors_to_map</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;owns()<sp/>||<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;try_lock())<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>sensors<sp/>to<sp/>the<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::set(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1abd4e4f618fbdacfda8c2cdece08e401b" kindref="member">sensors_map_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>running<sp/>on<sp/>the<sp/>real<sp/>hardware,<sp/>unlock<sp/>the<sp/>mutex<sp/>such<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task<sp/>process<sp/>can<sp/>acquire<sp/>it<sp/>right<sp/>away<sp/>after<sp/>calling<sp/>`notify_all()`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>simulation,<sp/>the<sp/>mutex<sp/>is<sp/>released<sp/>by<sp/>the<sp/>call<sp/>to<sp/>`wait`<sp/>further<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;unlock();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>dynamic<sp/>graph<sp/>process<sp/>that<sp/>it<sp/>can<sp/>compute<sp/>the<sp/>graph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>running<sp/>on<sp/>the<sp/>real<sp/>hardware,<sp/>this<sp/>notify_all<sp/>also<sp/>acts<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time-synchronization<sp/>between<sp/>the<sp/>task<sp/>and<sp/>motor<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;notify_all();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>predict<sp/>here<sp/>the<sp/>sleeping<sp/>time<sp/>in<sp/>the<sp/>spinner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1af5aa11023c1dd272d7bbabdcccc511b6" kindref="member">hwc_predicted_sleeping_time_</ref><sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab4716c8ec6194816235e6199863f46f9" kindref="member">hwc_spinner_</ref>.predict_sleeping_time();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1af5aa11023c1dd272d7bbabdcccc511b6" kindref="member">hwc_predicted_sleeping_time_</ref><sp/>&gt;<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1abb979a3e9235ef71a61579a6a6ad1200" kindref="member">maximum_time_for_user_cmd_</ref>)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1a07b4003cc1a0021e675847cc57ef5c" kindref="member">user_commands_</ref>.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1a07b4003cc1a0021e675847cc57ef5c" kindref="member">user_commands_</ref>[0]();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1a07b4003cc1a0021e675847cc57ef5c" kindref="member">user_commands_</ref>.pop_front();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;HARDWARE:<sp/>Executed<sp/>user<sp/>command\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>is<sp/>the<sp/>end<sp/>of<sp/>the<sp/>thread<sp/>activity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1afe6c823bac22d756fc649f911fc1c29b" kindref="member">hwc_active_timer_</ref>.tac();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a08ef83c411e5439204fa05b28f8e2794" kindref="member">hwc_timer_</ref>.tac_tic();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleeps<sp/>for<sp/>one<sp/>period.<sp/>This<sp/>clocks<sp/>the<sp/>motor<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a89eb402f9e2eaa8dfad090f6c9845f6c" kindref="member">hwc_sleep_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>hwc_mutex_.unlock();</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab4716c8ec6194816235e6199863f46f9" kindref="member">hwc_spinner_</ref>.spin();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>hwc_mutex_.lock();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a89eb402f9e2eaa8dfad090f6c9845f6c" kindref="member">hwc_sleep_timer_</ref>.tac();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>is<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>thread<sp/>activity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1afe6c823bac22d756fc649f911fc1c29b" kindref="member">hwc_active_timer_</ref>.tic();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Check<sp/>if<sp/>realtime<sp/>was<sp/>lost<sp/>here.<sp/>Using<sp/>realtime_check<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recorded<sp/>switches<sp/>for<sp/>jviereck.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>control<sp/>process<sp/>finished<sp/>its<sp/>computation,<sp/>it<sp/>is<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>are<sp/>able<sp/>to<sp/>acquire<sp/>the<sp/>lock<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;try_lock())<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>new<sp/>control<sp/>command<sp/>is<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1abafc3cf4d8f7dc938f98b7eb07b7af9a" kindref="member">missed_control_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="classdynamic__graph_1_1DynamicGraphManager_1abafc3cf4d8f7dc938f98b7eb07b7af9a" kindref="member">missed_control_count_</ref>;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1aea29e8dc351e0a50a8d2803d854d238d" kindref="member">is_in_safety_mode</ref>())<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>once<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!once){</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;HARDWARE:<sp/>Warning<sp/>enter<sp/>into<sp/>safe_mode\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>once<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a60bb31040121d6041b4dd6556f5c7eac" kindref="member">compute_safety_controls</ref>();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>write<sp/>the<sp/>safety<sp/>command<sp/>in<sp/>the<sp/>shared<sp/>memory<sp/>in<sp/>order<sp/>to<sp/>perform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>potential<sp/>interpolation<sp/>in<sp/>the<sp/>control<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::set(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a056de4d7a49496b2b0812d96d93370d9" kindref="member">motor_controls_map_name_</ref>,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1abafc3cf4d8f7dc938f98b7eb07b7af9a" kindref="member">missed_control_count_</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>wait<sp/>on<sp/>the<sp/>conditional<sp/>variable<sp/>was<sp/>successful,<sp/>then<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>values<sp/>from<sp/>shared<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_memory::get(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a97fa7b0a31efa6192c3dcc44fbe63886" kindref="member">shared_memory_name_</ref>,<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a056de4d7a49496b2b0812d96d93370d9" kindref="member">motor_controls_map_name_</ref>,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>do<sp/>not<sp/>send<sp/>the<sp/>command<sp/>if<sp/>the<sp/>thread<sp/>is<sp/>asked<sp/>to<sp/>stopped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1afcc53ebec6e5f2057c23a05894715125" kindref="member">is_hardware_communication_stopped</ref>()<sp/>&amp;&amp;<sp/>hw_ros_node.ok())<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>the<sp/>command<sp/>to<sp/>the<sp/>motors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a506e6f37ac7205efaf0efe4202cde897" kindref="member">set_motor_controls_from_map</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>this<sp/>function<sp/>here<sp/>because<sp/>the<sp/>loop<sp/>might<sp/>stop<sp/>because<sp/>of<sp/>ROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>need<sp/>the<sp/>flag<sp/>to<sp/>be<sp/>set<sp/>to<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1aabf11778fb69e5203d38c8093de60bab" kindref="member">stop_hardware_communication</ref>();</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;HARDWARE:<sp/>Dump<sp/>active<sp/>time<sp/>measurement<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1afe6c823bac22d756fc649f911fc1c29b" kindref="member">hwc_active_timer_</ref>.dump_measurements(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a2bd29dbd358b8c02805f4df970e75936" kindref="member">hwc_active_timer_file_</ref>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;HARDWARE:<sp/>sleep<sp/>time<sp/>measurement<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a89eb402f9e2eaa8dfad090f6c9845f6c" kindref="member">hwc_sleep_timer_</ref>.dump_measurements(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a5db6275d202963665a35c5eb2e68088d" kindref="member">hwc_sleep_timer_file_</ref>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;HARDWARE:<sp/>hwc<sp/>time<sp/>measurement<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a08ef83c411e5439204fa05b28f8e2794" kindref="member">hwc_timer_</ref>.dump_measurements(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a84f97c9eebbecee1af314e74fe22d8ed" kindref="member">hwc_timer_file_</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a003d8598839c07a7d81c1afed0ea0b01" kindref="member">cond_var_</ref>-&gt;unlock_scope();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>rt_printf(</highlight><highlight class="stringliteral">&quot;HARDWARE:<sp/>Stop<sp/>loop<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>THREAD_FUNCTION_RETURN_VALUE;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a60bb31040121d6041b4dd6556f5c7eac" kindref="member">DynamicGraphManager::compute_safety_controls</ref>()</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>VERY<sp/>STUPID!!!<sp/>TODO:<sp/>FIND<sp/>A<sp/>BETTER<sp/>WAY<sp/>AND<sp/>USE<sp/>AT<sp/>LEAST<sp/>PID<sp/>CONTROL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(VectorDGMap::iterator<sp/>ctrl<sp/>=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>.begin()<sp/>;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctrl<sp/>!=<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>.end()<sp/>;<sp/>++ctrl)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>ctrl-&gt;second.fill(0.0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1adf3adb88c5913b21b51c1f7bfab6d0f3" kindref="member">DynamicGraphManager::single_process_real_time_loop</ref>()</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;DG:<sp/>Locking<sp/>scope...&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DG:<sp/>Start<sp/>loop&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="classdynamic__graph_1_1DynamicGraphManager_1ab929d21277e5d2fba726b8ae422c27a8" kindref="member">is_dynamic_graph_stopped</ref>()<sp/>&amp;&amp;<sp/>ros::ok())</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>acquire<sp/>the<sp/>sensors<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a7bddce83d5185433041ad27610b85b3a" kindref="member">get_sensors_to_map</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>the<sp/>dynamic<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>-&gt;set_sensors_from_map(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a896bf6cb22d2d88a5a6a307a2e44608e" kindref="member">sensors_map_</ref>);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>-&gt;execute_graph();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a416ca1c33660df4f7f74eb29df4c5a58" kindref="member">device_</ref>-&gt;get_controls_to_map(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>the<sp/>command<sp/>to<sp/>the<sp/>motors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a506e6f37ac7205efaf0efe4202cde897" kindref="member">set_motor_controls_from_map</ref>(<ref refid="classdynamic__graph_1_1DynamicGraphManager_1a03eabd2f08990a1dcc1caa652b701020" kindref="member">motor_controls_map_</ref>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>this<sp/>function<sp/>here<sp/>because<sp/>the<sp/>loop<sp/>might<sp/>stop<sp/>because<sp/>of<sp/>ROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>flag<sp/>is<sp/>set<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1ad3c7c528ef283fbfb803377c8c631b4c" kindref="member">stop_dynamic_graph</ref>();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;dynamic<sp/>graph<sp/>thread<sp/>stopped\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DG:<sp/>Stop<sp/>loop&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>THREAD_FUNCTION_RETURN_VALUE;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a72146c4ddd173869a512e9f174ad48df" kindref="member">DynamicGraphManager::add_user_command</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/>func)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>hwc_mutex_.lock();</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DynamicGraphManager_1a1a07b4003cc1a0021e675847cc57ef5c" kindref="member">user_commands_</ref>.push_back(func);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>hwc_mutex_.unlock();</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/dynamic_graph_manager.cpp"/>
  </compounddef>
</doxygen>
