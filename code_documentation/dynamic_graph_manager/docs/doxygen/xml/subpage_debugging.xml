<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="subpage_debugging" kind="page">
    <compoundname>subpage_debugging</compoundname>
    <title>6/ Debugging the implementation</title>
    <detaileddescription>
<sect1 id="subpage_debugging_1debug_sec_entity_impl">
<title>6.1/ Debugging Entity / Controller implementations</title>
<para>There are few ways to debug the controller before running anything on the real robot:<orderedlist>
<listitem><para><bold> Creating a simulation device using the robot yaml file (Recommended) </bold><orderedlist>
<listitem><para>Create a robot device using the yaml file of the robot (found in robot_properties/robot_name/config/robot_name.yaml)</para></listitem><listitem><para>initialize your control graph and set up your control graph with all its entities.</para></listitem><listitem><para>run a loop executing the graph to verify the output from the controller.</para></listitem><listitem><para>An example of this implementation is available here : <ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/dg_blmc_robots/blob/master/demos/quadruped/quad_simu.py">https://git-amd.tuebingen.mpg.de/amd-clmc/dg_blmc_robots/blob/master/demos/quadruped/quad_simu.py</ulink><orderedlist>
<listitem><para>Copy the robot init part before your control graph and change the name to the robot being used (initializes the robot device.)</para></listitem><listitem><para>copy the robot simulation part after your control graph and modify the code to make it suitable for the robot.yaml. (change number of joint, etc...)</para></listitem><listitem><para>run the python file along with roscore to debug.</para></listitem></orderedlist>
</para></listitem></orderedlist>
</para></listitem><listitem><para><bold> Using Pybullet </bold> (available for quadruped and Teststand)<orderedlist>
<listitem><para>example simulations for teststand are available here : <ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/dg_blmc_robots/tree/master/demos/teststand/simulations">https://git-amd.tuebingen.mpg.de/amd-clmc/dg_blmc_robots/tree/master/demos/teststand/simulations</ulink></para></listitem><listitem><para>example simulations for quadruped are available here : <ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/dg_blmc_robots/tree/master/demos/quadruped/simulations">https://git-amd.tuebingen.mpg.de/amd-clmc/dg_blmc_robots/tree/master/demos/quadruped/simulations</ulink></para></listitem></orderedlist>
</para></listitem><listitem><para><bold> Create the entity alone in python and feed it with constant vectors </bold></para></listitem></orderedlist>
</para></sect1>
<sect1 id="subpage_debugging_1debug_sec_dgm">
<title>6.2/ Debugging Dynamic Graph Manager</title>
<para>To debug the low-level of dynamic graph manager, use GDB. <programlisting><codeline><highlight class="normal">INFORMATION:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>avoid<sp/>SIGINT<sp/>to<sp/>get<sp/>caught<sp/>by<sp/>GDB,<sp/>execute<sp/>the<sp/>line<sp/>handle<sp/>SIGINT<sp/>nostop<sp/>pass<sp/>on<sp/>the<sp/>GDB<sp/>command<sp/>line.</highlight></codeline>
</programlisting></para><para><bold> When to use GDB </bold> :<orderedlist>
<listitem><para>Segmentation faults</para></listitem><listitem><para>python terminal displays following : (This is seen in the terminal in which the python script is run) <programlisting><codeline><highlight class="normal">Connection<sp/>to<sp/>remote<sp/>server<sp/>lost.<sp/>Reconnecting...</highlight></codeline>
<codeline><highlight class="normal">Retrying<sp/>previous<sp/>command...</highlight></codeline>
<codeline><highlight class="normal">Connection<sp/>to<sp/>remote<sp/>server<sp/>lost.<sp/>Reconnecting...</highlight></codeline>
</programlisting></para></listitem></orderedlist>
</para><para><bold> GDB for Python </bold>:</para><para>To debug python files using gdb use the following command: <programlisting><codeline><highlight class="normal">gdb<sp/>-ex<sp/>r<sp/>--args<sp/>python<sp/>&lt;programname&gt;.py<sp/>&lt;arguments&gt;</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
