<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="subpage_basic_control_graph" kind="page">
    <compoundname>subpage_basic_control_graph</compoundname>
    <title>5/ Basic Control Graph</title>
    <detaileddescription>
<sect1 id="subpage_basic_control_graph_1control_sec_intro">
<title>5.1/ Good practice</title>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Create a pacckage like ci_integration that depends on Dynamic Graph and show the implementation of the dg_ci_example.</para></xrefdescription></xrefsect></para><para><programlisting><codeline><highlight class="normal">WARNING:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Please<sp/>make<sp/>sure<sp/>to<sp/>read<sp/>the<sp/>following<sp/>page<sp/>first:<sp/>4/<sp/>Implementing<sp/>a<sp/>robot<sp/>in<sp/></highlight></codeline>
<codeline><highlight class="normal">dynamic<sp/>graph<sp/>manager</highlight></codeline>
</programlisting></para><para>If possible, controllers and helper functions should be implemented in &quot;dg_tools&quot;. Please refer to the project&apos;s readme about the desired code structure.</para><para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>cleanly split between a simulated example (currently shown with stuggihop) and a hardware example (currently at the bottom with a single motor...).</para></xrefdescription></xrefsect></para></sect1>
<sect1 id="subpage_basic_control_graph_1control_sec_simple_entity">
<title>5.2/ Writing a simple entity</title>
<para>In dynamic graph, an entity is an object that consumes input signals and provides output signals. For instance, a P-controller might consume the current position of a motor as input signal and provide as output a torque command to move the motor position towards a desired position.</para><para>To control a robot / simulator using dynamic graph manager, the following is necessary:<itemizedlist>
<listitem><para>Implement a controller as a dynamic graph entity.</para></listitem><listitem><para>Example:<itemizedlist>
<listitem><para><ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/dg_tools/blob/master/src/control/control_pd.cpp">https://git-amd.tuebingen.mpg.de/amd-clmc/dg_tools/blob/master/src/control/control_pd.cpp</ulink></para></listitem><listitem><para><ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/dg_tools/blob/master/include/dg_tools/control/control_pd.hpp">https://git-amd.tuebingen.mpg.de/amd-clmc/dg_tools/blob/master/include/dg_tools/control/control_pd.hpp</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para>Expose the entity using a few lines in CMakeList.txt</para></listitem><listitem><para>Example:<itemizedlist>
<listitem><para><ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/dg_tools/blob/master/src/CMakeLists.txt">https://git-amd.tuebingen.mpg.de/amd-clmc/dg_tools/blob/master/src/CMakeLists.txt</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para>In the python interpreter of the dynamic graph manager, create the control graph, connect it to the robot device and run configurations if needed</para></listitem><listitem><para>Example (TODO: make an example contained in dg_tools):<itemizedlist>
<listitem><para><ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/dg_blmc_robots/blob/master/demos/stuggihop/simulations/dg_stuggihop_simu_basic.py">https://git-amd.tuebingen.mpg.de/amd-clmc/dg_blmc_robots/blob/master/demos/stuggihop/simulations/dg_stuggihop_simu_basic.py</ulink></para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="subpage_basic_control_graph_1control_sec_expose_entity">
<title>5.3/ Expose the entities to Python</title>
<para>Once you have defined the controller in C++, you need to expose it to python. This is done by adding a few lines into the CMakeList.txt file.</para><para>For an example, please refer to <ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/dg_tools/blob/master/src/CMakeLists.txt">https://git-amd.tuebingen.mpg.de/amd-clmc/dg_tools/blob/master/src/CMakeLists.txt</ulink>.<itemizedlist>
<listitem><para>First add your entities here: <image type="html" name="create_lib.png"></image>
</para></listitem><listitem><para>Secondly export the python bindings: <image type="html" name="expose_python.png"></image>
</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">WARNING:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">one<sp/>need<sp/>the<sp/>following<sp/>lines<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>CMakeLists.txt<sp/>because<sp/></highlight></codeline>
<codeline><highlight class="normal">otherwise<sp/>the<sp/>python<sp/>bindings<sp/>will<sp/>not<sp/>link<sp/>to<sp/>your<sp/>library<sp/>and<sp/>will<sp/>not<sp/>find<sp/></highlight></codeline>
<codeline><highlight class="normal">your<sp/>entities.</highlight></codeline>
</programlisting> <image type="html" name="cmake_header.png"></image>
</para></sect1>
<sect1 id="subpage_basic_control_graph_1control_sec_load_graph">
<title>5.4/ Create the control graph entries and connect them to the robot</title>
<para>An example on how a simple control graph using the MotorController with the robot.device is shown in single_motor_main.py. Note that <computeroutput>robot.device</computeroutput> is provided by the Dynamic Graph Manager automatically and initialized to talk to the real/simulated hardware. The robot.device is created from the yaml file&apos;s device specification. Especially, all the input and output signals are created on the <computeroutput>robot.device</computeroutput> as described in the <computeroutput>sensor</computeroutput> and <computeroutput>control</computeroutput> part of the yaml file. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
