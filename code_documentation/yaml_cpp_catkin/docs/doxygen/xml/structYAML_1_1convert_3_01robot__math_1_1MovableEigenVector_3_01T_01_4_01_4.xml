<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structYAML_1_1convert_3_01robot__math_1_1MovableEigenVector_3_01T_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>YAML::convert&lt; robot_math::MovableEigenVector&lt; T &gt; &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structYAML_1_1convert_3_01robot__math_1_1MovableEigenVector_3_01T_01_4_01_4_1a1eaba2e3451344a859914e8a781d542e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node</type>
        <definition>static Node YAML::convert&lt; robot_math::MovableEigenVector&lt; T &gt; &gt;::encode</definition>
        <argsstring>(const robot_math::MovableEigenVector&lt; T &gt; &amp;mp)</argsstring>
        <name>encode</name>
        <param>
          <type>const <ref refid="structrobot__math_1_1MovableEigenVector" kindref="compound">robot_math::MovableEigenVector</ref>&lt; T &gt; &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/yaml_cpp_catkin/yaml_eigen.h" line="143" column="1" bodyfile="include/yaml_cpp_catkin/yaml_eigen.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structYAML_1_1convert_3_01robot__math_1_1MovableEigenVector_3_01T_01_4_01_4_1a31a0b4061fd234b46a046cb9f87994f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool YAML::convert&lt; robot_math::MovableEigenVector&lt; T &gt; &gt;::decode</definition>
        <argsstring>(const Node &amp;node, robot_math::MovableEigenVector&lt; T &gt; &amp;mp)</argsstring>
        <name>decode</name>
        <param>
          <type>const Node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structrobot__math_1_1MovableEigenVector" kindref="compound">robot_math::MovableEigenVector</ref>&lt; T &gt; &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/yaml_cpp_catkin/yaml_eigen.h" line="146" column="1" bodyfile="include/yaml_cpp_catkin/yaml_eigen.h" bodystart="146" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/yaml_cpp_catkin/yaml_eigen.h" line="142" column="1" bodyfile="include/yaml_cpp_catkin/yaml_eigen.h" bodystart="142" bodyend="149"/>
    <listofallmembers>
      <member refid="structYAML_1_1convert_3_01robot__math_1_1MovableEigenVector_3_01T_01_4_01_4_1a31a0b4061fd234b46a046cb9f87994f2" prot="public" virt="non-virtual"><scope>YAML::convert&lt; robot_math::MovableEigenVector&lt; T &gt; &gt;</scope><name>decode</name></member>
      <member refid="structYAML_1_1convert_3_01robot__math_1_1MovableEigenVector_3_01T_01_4_01_4_1a1eaba2e3451344a859914e8a781d542e" prot="public" virt="non-virtual"><scope>YAML::convert&lt; robot_math::MovableEigenVector&lt; T &gt; &gt;</scope><name>encode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
