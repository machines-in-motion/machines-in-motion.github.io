<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="reactive__lqr__controller_8cpp" kind="file" language="C++">
    <compoundname>reactive_lqr_controller.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="reactive__lqr__controller_8hpp" local="yes">dg_tools/ComImpedanceControl/reactive_lqr_controller.hpp</includes>
    <includes local="no">sot/core/debug.hh</includes>
    <includes local="no">dynamic-graph/factory.h</includes>
    <incdepgraph>
      <node id="162">
        <label>dynamic-graph/factory.h</label>
      </node>
      <node id="161">
        <label>sot/core/debug.hh</label>
      </node>
      <node id="157">
        <label>dynamic-graph/linear-algebra.h</label>
      </node>
      <node id="155">
        <label>dg_tools/ComImpedanceControl/reactive_lqr_controller.hpp</label>
        <link refid="reactive__lqr__controller_8hpp"/>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
      </node>
      <node id="158">
        <label>dynamic-graph/signal-time-dependent.h</label>
      </node>
      <node id="153">
        <label>src/com_impedance_control/reactive_lqr_controller.cpp</label>
        <link refid="reactive_lqr_controller.cpp"/>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
      </node>
      <node id="156">
        <label>math.h</label>
      </node>
      <node id="154">
        <label>iostream</label>
      </node>
      <node id="159">
        <label>dynamic-graph/signal-ptr.h</label>
      </node>
      <node id="160">
        <label>dynamic-graph/entity.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceEigen">Eigen</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="reactive__lqr__controller_8cpp_1a980041380ef860e47088d8c7c10aee84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DYNAMICGRAPH_FACTORY_ENTITY_PLUGIN</definition>
        <argsstring>(ReactiveLQRController,&quot;ReactiveLQRController&quot;)</argsstring>
        <name>DYNAMICGRAPH_FACTORY_ENTITY_PLUGIN</name>
        <param>
          <type><ref refid="classdynamicgraph_1_1sot_1_1ReactiveLQRController" kindref="compound">ReactiveLQRController</ref></type>
        </param>
        <param>
          <type>&quot;ReactiveLQRController&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/com_impedance_control/reactive_lqr_controller.cpp" line="23" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>receding<sp/>reactive<sp/>LQR<sp/>implementation<sp/>for<sp/>solo.<sp/>The<sp/>desired<sp/>trajectory<sp/>is<sp/>obtained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>centroidal<sp/>momentum<sp/>controller.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//Author<sp/>:<sp/>Avadesh<sp/>Meduri</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Date:<sp/>29/04/2019</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reactive__lqr__controller_8hpp" kindref="compound">dg_tools/ComImpedanceControl/reactive_lqr_controller.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sot/core/debug.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dynamic-graph/factory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedynamicgraph_1_1sot" kindref="compound">dynamicgraph::sot</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedynamicgraph" kindref="compound">dynamicgraph</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceEigen" kindref="compound">Eigen</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------<sp/>Python<sp/>name<sp/>during<sp/>import<sp/>--------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">DYNAMICGRAPH_FACTORY_ENTITY_PLUGIN(<ref refid="classdynamicgraph_1_1sot_1_1ReactiveLQRController" kindref="compound">ReactiveLQRController</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">ReactiveLQRController::ReactiveLQRController(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>:<sp/>Entity(name)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>,TimeStep(0)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>,com_posSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::com_pos&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>,com_velSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::com_vel&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>,com_oriSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::com_ori&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>,com_ang_velSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::com_ang_vel&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>,end_eff_pos_12dSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::end_eff_pos&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>,des_fffSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::des_fff&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>,cnt_valueSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::cnt_value&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>,cnt_sensor_valueSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::cnt_sensor_value&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>,state_vectorSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::state_vector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>,massSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(vector)::mass&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>,inertiaSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(Matrix)::inertia&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>,horizonSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(Vector)::horizon&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>,qSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(Matrix)::q&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>,rSIN(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::input(Matrix)::r&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>,lqr_gainsSOUT(boost::bind(&amp;<ref refid="classdynamicgraph_1_1sot_1_1ReactiveLQRController" kindref="compound">ReactiveLQRController</ref>::return_lqr_gains_,<sp/>this,<sp/>_1,<sp/>_2),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_posSIN<sp/>&lt;&lt;<sp/>com_velSIN<sp/>&lt;&lt;<sp/>com_oriSIN<sp/>&lt;&lt;<sp/>com_ang_velSIN<sp/>&lt;&lt;<sp/>end_eff_pos_12dSIN<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>des_fffSIN<sp/>&lt;&lt;<sp/>cnt_valueSIN<sp/>&lt;&lt;<sp/>cnt_sensor_valueSIN<sp/>&lt;&lt;<sp/>massSIN<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaSIN<sp/>&lt;&lt;<sp/>horizonSIN<sp/>&lt;&lt;<sp/>qSIN<sp/>&lt;&lt;<sp/>rSIN,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ReactiveLQRController(&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;)::output(Matrix)::return_lqr_gains&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>init(TimeStep);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initializing<sp/>matrix<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Entity::signalRegistration(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_posSIN<sp/>&lt;&lt;<sp/>com_velSIN<sp/>&lt;&lt;<sp/>com_oriSIN<sp/>&lt;&lt;<sp/>com_ang_velSIN<sp/>&lt;&lt;<sp/>end_eff_pos_12dSIN<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>des_fffSIN<sp/>&lt;&lt;<sp/>cnt_valueSIN<sp/>&lt;&lt;<sp/>cnt_sensor_valueSIN<sp/>&lt;&lt;<sp/>state_vectorSIN<sp/>&lt;&lt;<sp/>massSIN<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inertiaSIN<sp/>&lt;&lt;<sp/>horizonSIN<sp/>&lt;&lt;<sp/>qSIN<sp/>&lt;&lt;<sp/>rSIN<sp/>&lt;&lt;<sp/>lqr_gainsSOUT</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">MatrixXd<sp/>ReactiveLQRController::</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>compute_r_cross_mat_(VectorXd<sp/>end_eff_pos,<sp/>Vector3d<sp/>com_pos<sp/>){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computes<sp/>the<sp/>R<sp/>matrix<sp/>for<sp/>cross<sp/>product<sp/>between<sp/>R<sp/>and<sp/>F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>R<sp/>=<sp/>[[0,<sp/>-rz,<sp/>ry],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>[rz,<sp/>0,<sp/>-rx],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-ry,<sp/>rx,<sp/>0]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(end_eff_pos.size()==3);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>R_cross_mat<sp/>&lt;&lt;<sp/>0.0,<sp/>-1.0*(end_eff_pos(2)-com_pos(2)),<sp/>end_eff_pos(1)-com_pos(1),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_eff_pos(2)-com_pos(2),<sp/>0.0,<sp/>-1.0*(end_eff_pos(0)-com_pos(0)),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.0*(end_eff_pos(1)-com_pos(1)),<sp/>(end_eff_pos(0)-com_pos(0)),<sp/>0.0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R_cross_mat;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">VectorXd<sp/>ReactiveLQRController::</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>compute_dyn_(Vector3d<sp/>com_pos,<sp/>Vector3d<sp/>com_vel,<sp/><sp/>Quaternion&lt;double&gt;<sp/>ori,<sp/>Vector3d<sp/>com_ang_vel,<sp/>VectorXd<sp/>end_eff_pos_12d,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXd<sp/>des_fff,<sp/>Vector4d<sp/>cnt_value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass,<sp/>MatrixXd<sp/>inertia<sp/>,MatrixXd&amp;<sp/>A_t,<sp/>MatrixXd&amp;<sp/>B_t){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//computes<sp/>dynamic<sp/>for<sp/>the<sp/>urrent<sp/>time<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>xd<sp/>=<sp/>A_t<sp/>*<sp/>X<sp/>+<sp/>B_t*U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>bound<sp/>by<sp/>an<sp/>init<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>omega.resize(4,4);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>mass_inv_identity.resize(3,3);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>A_t.resize(13,13);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>B_t.resize(13,12);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>R_cross_mat.resize(3,3);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>x.resize(13);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;asserting<sp/>in<sp/>dyn<sp/>computation&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(com_pos.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(com_ang_vel.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(end_eff_pos_12d.size()<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cnt_value.size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(mass.size()<sp/>==<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;asserting<sp/>done<sp/>in<sp/>dyn<sp/>computation&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>omega<sp/>is<sp/>4*4<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>omega<sp/>&lt;&lt;<sp/>0,<sp/>com_ang_vel(2),<sp/>-1*com_ang_vel(1),<sp/>com_ang_vel(0),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1*com_ang_vel(2),<sp/>0,<sp/>com_ang_vel(0),<sp/>com_ang_vel(1),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ang_vel(1),<sp/>-1*com_ang_vel(0),<sp/>0,<sp/>com_ang_vel(2),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1*com_ang_vel(0),<sp/>-1*com_ang_vel(1),<sp/>-1*com_ang_vel(2),<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;completed<sp/>defining<sp/>omega<sp/>...&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>A_t<sp/>&lt;&lt;<sp/>Matrix::Zero(3,3),<sp/>Matrix::Identity(3,3),<sp/>Matrix::Zero(3,4),<sp/>Matrix::Zero(3,3),</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix::Zero(3,3),<sp/>Matrix::Zero(3,3),<sp/>Matrix::Zero(3,4),<sp/>Matrix::Zero(3,3),</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix::Zero(4,3),<sp/>Matrix::Zero(4,3),<sp/><sp/><sp/><sp/>0.5*omega,<sp/><sp/><sp/><sp/><sp/><sp/>Matrix::Zero(4,3),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix::Zero(3,3),<sp/>Matrix::Zero(3,3),<sp/>Matrix::Zero(3,4),<sp/>Matrix::Zero(3,3);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;completed<sp/>defining<sp/>A&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>mass_inv_identity<sp/>&lt;&lt;<sp/>1/mass<sp/>,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/>1/mass,<sp/>0.0,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/><sp/>1/mass<sp/>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;completed<sp/>defining<sp/>mass<sp/>matrix&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>inertia_global_inv<sp/>=<sp/>(ori.toRotationMatrix()<sp/>*<sp/>inertia<sp/>*<sp/>ori.toRotationMatrix().transpose()).inverse();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>R_cross_mat_fl<sp/>=<sp/>inertia_global_inv<sp/>*<sp/>this-&gt;compute_r_cross_mat_(end_eff_pos_12d.segment(0,3),<sp/>com_pos);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>R_cross_mat_fr<sp/>=<sp/>inertia_global_inv<sp/>*<sp/>this-&gt;compute_r_cross_mat_(end_eff_pos_12d.segment(3,3),<sp/>com_pos);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>R_cross_mat_hl<sp/>=<sp/>inertia_global_inv<sp/>*<sp/>this-&gt;compute_r_cross_mat_(end_eff_pos_12d.segment(6,3),<sp/>com_pos);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>R_cross_mat_hr<sp/>=<sp/>inertia_global_inv<sp/>*<sp/>this-&gt;compute_r_cross_mat_(end_eff_pos_12d.segment(9,3),<sp/>com_pos);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;completed<sp/>calcultatin<sp/>cross<sp/>matrixes&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>B_t<sp/>&lt;&lt;<sp/>Matrix::Zero(3,3),<sp/>Matrix::Zero(3,3),<sp/>Matrix::Zero(3,3),<sp/>Matrix::Zero(3,3),</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt_value(0)<sp/>*<sp/>mass_inv_identity,<sp/>cnt_value(1)<sp/>*<sp/>mass_inv_identity,<sp/>cnt_value(2)<sp/>*<sp/>mass_inv_identity,<sp/>cnt_value(3)<sp/>*<sp/>mass_inv_identity,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix::Zero(4,3),<sp/>Matrix::Zero(4,3),<sp/>Matrix::Zero(4,3),<sp/>Matrix::Zero(4,3),</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt_value(0)<sp/>*<sp/>R_cross_mat_fl<sp/>,<sp/>cnt_value(1)<sp/>*<sp/>R_cross_mat_fr,<sp/>cnt_value(2)<sp/>*<sp/>R_cross_mat_hl,<sp/>cnt_value(3)<sp/>*<sp/>R_cross_mat_hr;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>B_t<sp/>&lt;&lt;<sp/>&quot;\n\n\n&quot;<sp/>&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>x<sp/>&lt;&lt;<sp/>com_pos(0),<sp/>com_pos(1),<sp/>com_pos(2),<sp/>com_vel(0),<sp/>com_vel(1),<sp/>com_vel(2),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ori.vec()[0],<sp/>ori.vec()[1],<sp/>ori.vec()[2],<sp/>ori.w(),<sp/>com_ang_vel(0),<sp/>com_ang_vel(1),<sp/>com_ang_vel(2);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A_t<sp/>*<sp/>x<sp/>+<sp/>B_t<sp/>*<sp/>des_fff;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReactiveLQRController::</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>compute_lin_dyn_(Eigen::MatrixXd<sp/>lin_A_t,<sp/>Eigen::MatrixXd<sp/>lin_B_t){</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>computes<sp/>the<sp/>linearized<sp/>A<sp/>and<sp/>B<sp/>in<sp/>the<sp/>taylor<sp/>expansion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Xd<sp/>=<sp/>lin_A_t*X<sp/>+<sp/>lin_B_t*U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReactiveLQRController::</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>compute_num_lin_dyn_(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3d<sp/>com_pos_t,<sp/>VectorXd<sp/>com_vel_t,<sp/>Vector3d<sp/>com_ang_vel_t,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quaternion&lt;double&gt;<sp/>ori_t,<sp/>VectorXd<sp/>end_eff_pos_12d_t,<sp/>Vector4d<sp/>cnt_value_t,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3d<sp/>com_pos_t1,<sp/>Vector3d<sp/>com_vel_t1,<sp/>Vector3d<sp/>com_ang_vel_t1,<sp/>Quaternion&lt;double&gt;<sp/>ori_t1,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXd<sp/>end_eff_pos_12d_t1,<sp/>Vector4d<sp/>cnt_value_t1,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXd<sp/>des_fff,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass,<sp/>MatrixXd<sp/>inertia,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd&amp;<sp/>lin_A_t,<sp/>MatrixXd&amp;<sp/>lin_B_t){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>computes<sp/>the<sp/>linearized<sp/>A<sp/>and<sp/>B<sp/>using<sp/>numerical<sp/>differentiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>put<sp/>inside<sp/>an<sp/>init<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unit_vec.resize(13);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lin_A_t.resize(13,13);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lin_B_t.resize(13,12);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xd_t<sp/>=<sp/>this-&gt;compute_dyn_(com_pos_t,<sp/>com_vel_t,<sp/>ori_t,<sp/>com_ang_vel_t,<sp/>end_eff_pos_12d_t,<sp/>des_fff,<sp/>cnt_value_t,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass,<sp/>inertia,<sp/>A_t,<sp/>B_t);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;completed<sp/>defining<sp/>state<sp/>vector&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lin_A<sp/>=<sp/>(dA/dx)*X^T<sp/>+<sp/>A<sp/>+<sp/>(dB/dx)*U^T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>diffrentiating<sp/>with<sp/>repect<sp/>to<sp/>com_pos_x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i<sp/>++){</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_pos_pd<sp/>=<sp/>com_pos_t;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_pos_pd(i)<sp/>=<sp/>com_pos_t1(i);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lin_A_t.col(i)<sp/>=<sp/>(1/(com_pos_t1(i)<sp/>-<sp/>com_pos_t(i)))*(this-&gt;compute_dyn_(com_pos_pd,com_vel_t,<sp/>ori_t,<sp/>com_ang_vel_t,<sp/>end_eff_pos_12d_t,<sp/>des_fff,<sp/>cnt_value_t,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass,<sp/>inertia,<sp/>A_t,<sp/>B_t)<sp/>-<sp/>xd_t);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_vel_pd<sp/>=<sp/>com_vel_t;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_vel_pd(i)<sp/>=<sp/>com_vel_t1(i);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lin_A_t.col(i+3)<sp/>=<sp/>(1/(com_vel_t1(i)<sp/>-<sp/>com_vel_t(i)))*(this-&gt;compute_dyn_(com_pos_t,com_vel_pd,<sp/>ori_t,<sp/>com_ang_vel_t,<sp/>end_eff_pos_12d_t,<sp/>des_fff,<sp/>cnt_value_t,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass,<sp/>inertia,<sp/>A_t,<sp/>B_t)<sp/>-<sp/>xd_t);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ori_pd<sp/>=<sp/>ori_t;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ori_pd.vec()[i]<sp/>=<sp/>ori_t1.vec()[i];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lin_A_t.col(i<sp/>+<sp/>6)<sp/>=<sp/>(1/(ori_t1.vec()[i]<sp/>-<sp/>ori_t.vec()[i]))*(this-&gt;compute_dyn_(com_pos_t,com_vel_t,<sp/>com_ori_pd,<sp/>com_ang_vel_t,<sp/>end_eff_pos_12d_t,<sp/>des_fff,<sp/>cnt_value_t,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass,<sp/>inertia,<sp/>A_t,<sp/>B_t)<sp/>-<sp/>xd_t);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ang_vel_pd<sp/>=<sp/>com_ang_vel_t;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ang_vel_pd(i)<sp/>=<sp/>com_ang_vel_t1(i);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lin_A_t.col(i+10)<sp/>=<sp/>(1/(com_ang_vel_t1(i)<sp/>-<sp/>com_ang_vel_t(i)))*(this-&gt;compute_dyn_(com_pos_t,com_vel_t,<sp/>ori_t,<sp/>com_ang_vel_pd,<sp/>end_eff_pos_12d_t,<sp/>des_fff,<sp/>cnt_value_t,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass,<sp/>inertia,<sp/>A_t,<sp/>B_t)<sp/>-<sp/>xd_t);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_ori_pd<sp/>=<sp/>ori_t;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_ori_pd.w()<sp/>=<sp/>ori_t1.w();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lin_A_t.col(9)<sp/>=<sp/>(1/(ori_t1.w()<sp/>-<sp/>ori_t.w()))*(this-&gt;compute_dyn_(com_pos_t,com_vel_t,<sp/>com_ori_pd,<sp/>com_ang_vel_t,<sp/>end_eff_pos_12d_t,<sp/>des_fff,<sp/>cnt_value_t,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass,<sp/>inertia,<sp/>A_t,<sp/>B_t)<sp/>-<sp/>xd_t);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;completed<sp/>computing<sp/>lin_A&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lin_B_t<sp/>=<sp/>B_t;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>lin_B_t<sp/>&lt;&lt;<sp/>&quot;\n\n\n&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>lin_B_t<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReactiveLQRController::</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>compute_lqr_gains_(MatrixXd<sp/>Q,<sp/>MatrixXd<sp/>R,<sp/>MatrixXd<sp/>lin_A,<sp/>MatrixXd<sp/>lin_B,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/>P_prev,<sp/>MatrixXd<sp/>&amp;P,<sp/>MatrixXd<sp/>&amp;K){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>K.resize(12,13);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>K<sp/>=<sp/>-(R<sp/>+<sp/>B<sp/>^T<sp/>*P_prev<sp/>*<sp/>B)^(-1)*<sp/>B^T<sp/>*<sp/>P_prev<sp/>*<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>K<sp/>=<sp/>-1*(((R<sp/>+<sp/>lin_B.transpose()<sp/>*<sp/>P_prev<sp/>*<sp/>lin_B).inverse())<sp/>*<sp/>lin_B.transpose()<sp/>*<sp/>P_prev<sp/>*<sp/>lin_A);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>making<sp/>each<sp/>element<sp/>negative<sp/>of<sp/>its<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>K<sp/>=<sp/>Matrix::Zero(12,13)<sp/>-<sp/>K;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>K<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>P<sp/>=<sp/>Q<sp/>+<sp/>K.transpose()*R*K<sp/>+<sp/>(lin_A<sp/>+<sp/>lin_B*K).transpose()<sp/>*<sp/>P_prev<sp/>*<sp/>(lin_A<sp/>+<sp/>lin_B*K);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>((R<sp/>+<sp/>lin_B.transpose()<sp/>*<sp/>P_prev<sp/>*<sp/>lin_B).inverse())<sp/>*<sp/>lin_B.transpose()<sp/>*<sp/>P_prev<sp/>*<sp/>lin_A<sp/><sp/>&lt;&lt;<sp/>&quot;\n\n\n\n&quot;&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">dynamicgraph::Matrix&amp;<sp/>ReactiveLQRController::</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>return_lqr_gains_(dynamicgraph::Matrix<sp/>&amp;<sp/>lqr_gains,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>sotDEBUGIN(15);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>com_pos<sp/>=<sp/>com_posSIN(t);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>com_vel<sp/>=<sp/>com_velSIN(t);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>com_ang_vel<sp/>=<sp/>com_ang_velSIN(t);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>com_ori<sp/>=<sp/>com_oriSIN(t);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>end_eff_pos_12d<sp/>=<sp/>end_eff_pos_12dSIN(t);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>des_fff_12d<sp/>=<sp/>des_fffSIN(t);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>cnt_value<sp/>=<sp/>cnt_valueSIN(t);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>dynamicgraph::Vector&amp;<sp/>cnt_sensor_value<sp/>=<sp/>cnt_sensor_valueSIN(t);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>dynamicgraph::Vector&amp;<sp/>state_vector<sp/>=<sp/>state_vectorSIN(t);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>mass<sp/>=<sp/>massSIN(t);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Matrix&amp;<sp/>inertia<sp/>=<sp/>inertiaSIN(t);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Vector&amp;<sp/>horizon<sp/>=<sp/>horizonSIN(t);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Matrix&amp;<sp/>Q<sp/>=<sp/>qSIN(t);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dynamicgraph::Matrix&amp;<sp/>R<sp/>=<sp/>rSIN(t);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>P_prev<sp/>=<sp/>Matrix::Zero(13,13);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;asserting<sp/>in<sp/>return_lqr_gains&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(com_pos.size()<sp/>==<sp/>3*(horizon[0]<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(com_vel.size()<sp/>==<sp/>3*(horizon[0]<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(com_ang_vel.size()<sp/>==<sp/>3*(horizon[0]<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(com_ori.size()<sp/>==<sp/>4*(horizon[0]<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(end_eff_pos_12d.size()<sp/>==<sp/>12*(horizon[0]<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(des_fff_12d.size()<sp/>==<sp/>12*(horizon[0]<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cnt_value.size()<sp/>==<sp/>4*(horizon[0]<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;completed<sp/>asserting<sp/>in<sp/>return_lqr_gains&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>horizon[0]<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>backward<sp/>pass<sp/>of<sp/>lqr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h=1;<sp/>h<sp/>&lt;<sp/>horizon[0]+1;<sp/>h++){</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_pos_t<sp/>=<sp/>com_pos.segment(3*(horizon[0]<sp/>-<sp/>h),<sp/>3);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_vel_t<sp/>=<sp/>com_vel.segment(3*(horizon[0]<sp/>-<sp/>h),<sp/>3);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_ang_vel_t<sp/>=<sp/>com_ang_vel.segment(3*(horizon[0]<sp/>-<sp/>h),<sp/>3);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ori_tmp<sp/>=<sp/>com_ori.segment(4*(horizon[0]<sp/>-<sp/>h),<sp/>4);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_ori_t.w()<sp/>=<sp/>ori_tmp[3];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_ori_t.vec()<sp/>=<sp/>ori_tmp.segment(0,3);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_eff_pos_12d_t<sp/>=<sp/>end_eff_pos_12d.segment(12*(horizon[0]<sp/>-<sp/>h),<sp/>12);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cnt_value_t<sp/>=<sp/>cnt_value.segment(4*(horizon[0]<sp/>-<sp/>h),<sp/>4);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_pos_t1<sp/>=<sp/>com_pos.segment(3*(horizon[0]-h+1),<sp/>3);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_vel_t1<sp/>=<sp/>com_vel.segment(3*(horizon[0]-h+1),<sp/>3);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_ang_vel_t1<sp/>=<sp/>com_ang_vel.segment(3*(horizon[0]-h+1),<sp/>3);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ori_tmp<sp/>=<sp/>com_ori.segment(4*(horizon[0]-h+1),<sp/>4);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_ori_t1.w()<sp/>=<sp/>ori_tmp[3];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>com_ori_t1.vec()<sp/>=<sp/>ori_tmp.segment(0,3);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_eff_pos_12d_t1<sp/>=<sp/>end_eff_pos_12d.segment(12*(horizon[0]-h+1),<sp/>12);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cnt_value_t1<sp/>=<sp/>cnt_value.segment(4*(horizon[0]-h+1),<sp/>4);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>des_fff_t<sp/>=<sp/>des_fff_12d.segment(12*(horizon[0]-<sp/>h),<sp/>12);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>xd_t<sp/>=<sp/>this-&gt;compute_dyn_(com_pos_t,<sp/>com_ang_vel_t,<sp/>com_ori_t,<sp/>com_ang_vel_t,<sp/>end_eff_pos_12d_t,<sp/>des_fff_t,<sp/>cnt_value_t,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass[0],<sp/>inertia,<sp/>A_t,<sp/>B_t);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;compute_num_lin_dyn_(com_pos_t,<sp/>com_vel_t,<sp/>com_ang_vel_t,<sp/>com_ori_t,<sp/>end_eff_pos_12d_t,<sp/>cnt_value_t,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_pos_t1,<sp/>com_vel_t1,<sp/>com_ang_vel_t1,<sp/>com_ori_t1,<sp/>end_eff_pos_12d_t1,<sp/>cnt_value_t1,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>des_fff_t,<sp/>mass[0],<sp/>inertia,<sp/>lin_A_ht,<sp/>lin_B_ht);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;compute_lqr_gains_(Q,<sp/>R,<sp/>lin_A_ht,<sp/>lin_B_ht,<sp/>P_prev,<sp/>P,<sp/>K<sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>P_prev<sp/>=<sp/>P;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>P_prev<sp/>&lt;&lt;<sp/>&quot;\n\n\n&quot;<sp/>&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>lqr_gains<sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>K<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lqr_gains<sp/>=<sp/>Matrix::Zero(12,13);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>sotDEBUGOUT(15);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lqr_gains;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/com_impedance_control/reactive_lqr_controller.cpp"/>
  </compounddef>
</doxygen>
