<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="math__small__entities_8py" kind="file" language="Python">
    <compoundname>math_small_entities.py</compoundname>
    <innerclass refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantVector" prot="public">python::dg_tools::math_small_entities::ConstantVector</innerclass>
    <innerclass refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantDouble" prot="public">python::dg_tools::math_small_entities::ConstantDouble</innerclass>
    <innerclass refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Stack2Vectors" prot="public">python::dg_tools::math_small_entities::Stack2Vectors</innerclass>
    <innerclass refid="classpython_1_1dg__tools_1_1math__small__entities_1_1StackZero" prot="public">python::dg_tools::math_small_entities::StackZero</innerclass>
    <innerclass refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Add2Vectors" prot="public">python::dg_tools::math_small_entities::Add2Vectors</innerclass>
    <innerclass refid="classpython_1_1dg__tools_1_1math__small__entities_1_1MultiplyDoubleVector" prot="public">python::dg_tools::math_small_entities::MultiplyDoubleVector</innerclass>
    <innernamespace refid="namespacepython_1_1dg__tools_1_1math__small__entities">python::dg_tools::math_small_entities</innernamespace>
    <innernamespace refid="namespacepy__dg__tools">py_dg_tools</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">@package<sp/>py_dg_tools</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">@author<sp/>Avadesh<sp/>Meduri</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">@license<sp/>License<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">@copyright<sp/>Copyright<sp/>(c)<sp/>2019,<sp/>New<sp/>York<sp/>University<sp/>and<sp/>Max<sp/>Planck<sp/>Gesellschaft.</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">@date<sp/>2019-03-01</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">@brief<sp/>Contains<sp/>generic<sp/>impedance<sp/>control<sp/>functions<sp/>that<sp/>will<sp/>be<sp/>used<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">impedance_controller</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dynamic_graph<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>plug</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dynamic_graph.sot.core<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Selec_of_vector</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedynamic__graph_1_1sot_1_1core_1_1math__small__entities" kindref="compound">dynamic_graph.sot.core.math_small_entities</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorConstant,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixConstant,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>Add_of_double,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>Add_of_vector,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>Multiply_double_vector,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>Substract_of_double,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>Substract_of_vector,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>Multiply_matrix_vector,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixTranspose,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixHomoToPose,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Component_of_vector,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>Selec_of_vector,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>Stack_of_vector,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Multiply_of_double,</highlight></codeline>
<codeline lineno="31"><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">#<sp/>from<sp/>dynamic_graph.sot.core.op_point_modifier<sp/>import<sp/>OpPointModifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">#<sp/>from<sp/>dynamic_graph.sot.core.fir_filter<sp/>import<sp/>FIRFilter_Vector_double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">stack_zero(vec,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>stacks<sp/>a<sp/>zeros<sp/>before<sp/>the<sp/>vector</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>Constant<sp/>vector<sp/>(not<sp/>numpy<sp/>arrays)</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Constant<sp/>vector<sp/>(not<sp/>numpy<sp/>arrays)</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size<sp/>of<sp/>first<sp/>vector<sp/>(int)</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size<sp/>of<sp/>first<sp/>vector<sp/>(int)</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>zero<sp/>=<sp/>VectorConstant(</highlight><highlight class="stringliteral">&quot;zero&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>zero.sout.value<sp/>=<sp/>(0.,)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>op<sp/>=<sp/>Stack_of_vector(entityName)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>op.selec1(0,<sp/>1)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>op.selec2(0,<sp/>2)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(zero.sout,<sp/>op.sin1)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec,<sp/>op.sin2)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op.sout</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">add_doub_doub_2(db1,<sp/>db2,<sp/>entityName):</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>add<sp/>=<sp/>Add_of_double(entityName)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(db1,<sp/>add.signal(</highlight><highlight class="stringliteral">&apos;sin1&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(db2,<sp/>add.signal(</highlight><highlight class="stringliteral">&apos;sin2&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add.sout</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">mul_double_vec_2(doub,<sp/>vec,<sp/>entityName):</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>need<sp/>double<sp/>as<sp/>a<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>mul<sp/>=<sp/>Multiply_double_vector(entityName)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(doub,<sp/>float):</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mul.sin1.value<sp/>=<sp/>doub</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(doub,<sp/>mul.signal(</highlight><highlight class="stringliteral">&apos;sin1&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec,<sp/>mul.signal(</highlight><highlight class="stringliteral">&apos;sin2&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mul.sout</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scale_values(double,<sp/>scale,<sp/>entityName):</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>mul<sp/>=<sp/>Multiply_of_double(entityName)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>mul.sin0.value<sp/>=<sp/>scale</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(double,<sp/>mul.sin1)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mul.sout</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">mul_doub_doub(db1,<sp/>db2,<sp/>entityName):</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>dif1<sp/>=<sp/>Multiply_of_double(entityName)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(db1,<sp/>float):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dif1.sin0.value<sp/>=<sp/>db1</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(db1,<sp/>dif1.sin0)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(db2,<sp/>dif1.sin1)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dif1.sout</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Initialisers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConstantVector(object):</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Define<sp/>a<sp/>nice<sp/>interface<sp/>to<sp/>create<sp/>constant<sp/>vector</highlight></codeline>
<codeline lineno="95" refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantVector" refkind="compound"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>vec,<sp/>entity_name):</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantVector_1a4a8d243668df79c77799583641991fae" kindref="member">vec</ref><sp/>=<sp/>VectorConstant(entity_name)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantVector_1a584f02de2615a0265e56ba489b4df335" kindref="member">set_vec</ref>(vec)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantVector_1a8b292e537665662d7697d2d9e572ece1" kindref="member">sout</ref><sp/>=<sp/>self.vec.sout</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">set_vec(self,<sp/>vec):</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.vec.sout.value<sp/>=<sp/>vec</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_vec(self):</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.vec.sout.value</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constVector(val,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>initialises<sp/>an<sp/>constant<sp/>vector</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>array<sp/>(python<sp/>list)</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>op<sp/>=<sp/>VectorConstant(entityName).sout</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>op.value<sp/>=<sp/>list(val)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">matrixConstant(val):</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>initialises<sp/>an<sp/>constant<sp/>matrix</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>matrix<sp/>(python<sp/>array)</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>op<sp/>=<sp/>MatrixConstant(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).sout</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>op.value<sp/>=<sp/>val</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantDouble" kindref="compound">ConstantDouble</ref>(object):</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Fake<sp/>an<sp/>entity<sp/>which<sp/>provide<sp/>a<sp/>constant<sp/>double</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>idea<sp/>is<sp/>to<sp/>create<sp/>a<sp/>&quot;sout<sp/>=<sp/>sin1<sp/>+<sp/>0.0&quot;,<sp/>hence<sp/>a<sp/>constant<sp/>double</highlight></codeline>
<codeline lineno="134" refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantDouble" refkind="compound"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>value,<sp/>entity_name=&quot;&quot;):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>a<sp/>&quot;double<sp/>+<sp/>double&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantDouble_1a05a3ff952b97d1e86ee08e6dae3b343a" kindref="member">add</ref><sp/>=<sp/>Add_of_double(entity_name)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initialize<sp/>both<sp/>value<sp/>to<sp/>0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add.sin1.value<sp/>=<sp/>value</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add.sin2.value<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>input<sp/>signal<sp/>is<sp/>in<sp/>fact<sp/>the<sp/>sin1,<sp/>so<sp/>&quot;sout<sp/>=<sp/>sin1<sp/>+<sp/>0.0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantDouble_1a151f45becbbe8644ec18506e38fcd7a0" kindref="member">sin</ref><sp/>=<sp/>self.add.sin1</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1ConstantDouble_1a0ba1911ca1603e79bfef8b6c077158be" kindref="member">sout</ref><sp/>=<sp/>self.add.sout</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">set_value(self,<sp/>value):</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add.sin1.value<sp/>=<sp/>value</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_value(self):</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.add.sin1.value</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral">Operators</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Stack2Vectors" kindref="compound">Stack2Vectors</ref>(object):</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Define<sp/>an<sp/>easier<sp/>interface<sp/>to<sp/>simple<sp/>stack<sp/>2<sp/>vectors</highlight></codeline>
<codeline lineno="161" refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Stack2Vectors" refkind="compound"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>sin1,<sp/>sin2,<sp/>size1,<sp/>size2,<sp/>entity_name=&quot;&quot;):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Stack2Vectors_1aee9133206d4944bf94d2be498aaa2c7e" kindref="member">op</ref><sp/>=<sp/>Stack_of_vector(entity_name)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.op.selec1(0,<sp/>size1)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.op.selec2(0,<sp/>size2)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Stack2Vectors_1ab524298b794cbd1f5d8b239bda6f717c" kindref="member">sin1</ref><sp/>=<sp/>self.op.sin1</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Stack2Vectors_1aeac6844b2c195cfc85d5a2368d491e21" kindref="member">sin2</ref><sp/>=<sp/>self.op.sin2</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Stack2Vectors_1a3a20ad03d0a52ffac73e11e8b786253b" kindref="member">sout</ref><sp/>=<sp/>self.op.sout</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(sin1,<sp/>self.op.sin1)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(sin2,<sp/>self.op.sin2)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">stack_two_vectors(vec1,<sp/>vec2,<sp/>vec1_size,<sp/>vec2_size,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>stacks<sp/>two<sp/>vectors</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>Constant<sp/>vector<sp/>(not<sp/>numpy<sp/>arrays)</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Constant<sp/>vector<sp/>(not<sp/>numpy<sp/>arrays)</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size<sp/>of<sp/>first<sp/>vector<sp/>(int)</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size<sp/>of<sp/>first<sp/>vector<sp/>(int)</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>op<sp/>=<sp/>Stack_of_vector(entityName)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>op.selec1(0,<sp/>vec1_size)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>op.selec2(0,<sp/>vec2_size)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec1,<sp/>op.signal(</highlight><highlight class="stringliteral">&apos;sin1&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec2,<sp/>op.signal(</highlight><highlight class="stringliteral">&apos;sin2&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op.signal(</highlight><highlight class="stringliteral">&apos;sout&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1StackZero" kindref="compound">StackZero</ref>(object):</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>stacks<sp/>a<sp/>zero<sp/>before<sp/>the<sp/>vector</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Input<sp/>:<sp/>number<sp/>of<sp/>zeroes<sp/>you<sp/>want<sp/>to<sp/>stack<sp/>up<sp/>(int)</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>vector<sp/>you<sp/>want<sp/>to<sp/>stack<sp/>the<sp/>zeroes<sp/>on<sp/>top</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size<sp/>of<sp/>vector<sp/>(int)</highlight></codeline>
<codeline lineno="196" refid="classpython_1_1dg__tools_1_1math__small__entities_1_1StackZero" refkind="compound"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>nb_0,<sp/>vec_size,<sp/>vec=None,<sp/>prefix=&apos;&apos;):</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1StackZero_1afd77c3ead9b408cd92e28918c11a9430" kindref="member">zero</ref><sp/>=<sp/>VectorConstant(</highlight><highlight class="stringliteral">&quot;zero&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.zero.sout.value<sp/>=<sp/>nb_0<sp/>*<sp/>(0.,)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1StackZero_1a0578f0f7b3b6767c71f1c6c64567bd93" kindref="member">op</ref><sp/>=<sp/>Stack_of_vector(prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;zero_stacker&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.op.selec1(0,<sp/>nb_0)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.op.selec2(0,<sp/>vec_size)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(self.zero.sout,<sp/>self.op.sin1)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>vec<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(vec,<sp/>self.op.sin2)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1StackZero_1aeb83d2bb60478305de080dd215560dee" kindref="member">sin</ref><sp/>=<sp/>self.op.sin2</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1StackZero_1af808bd0b6e64b8aeba17cc160f29484b" kindref="member">sout</ref><sp/>=<sp/>self.op.sout</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">selec_vector(vec,<sp/>start_index,<sp/>end_index,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>selects<sp/>a<sp/>part<sp/>of<sp/>the<sp/>input<sp/>vector<sp/>(slices<sp/>vector)</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>Constant<sp/>vector<sp/>(not<sp/>numpy<sp/>array)</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>start<sp/>index<sp/>(int)</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>end<sp/>index<sp/>(int)</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Ex<sp/>:<sp/>selec_vector([1,2,3,4],<sp/>1,3)<sp/>=<sp/>[2,3]<sp/>{input<sp/>must<sp/>be<sp/>a<sp/>const<sp/>vector}</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>op<sp/>=<sp/>Selec_of_vector(entityName)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>op.selec(start_index,<sp/>end_index)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec,<sp/>op.signal(</highlight><highlight class="stringliteral">&apos;sin&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op.sout</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>Math<sp/>Operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Add2Vectors" kindref="compound">Add2Vectors</ref>(object):</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>interface<sp/>to<sp/>the<sp/>Add_of_vector<sp/>entity</highlight></codeline>
<codeline lineno="236" refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Add2Vectors" refkind="compound"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>vector_sin1,<sp/>vector_sin2,<sp/>entity_name=&apos;&apos;):</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Add2Vectors_1a05f25ea034d56ca14cd8c83414d9fd6e" kindref="member">op</ref><sp/>=<sp/>Add_of_vector(entity_name)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Add2Vectors_1a83e5c3083168c62acf3d93802b396b76" kindref="member">sin1</ref><sp/>=<sp/>self.op.sin1</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Add2Vectors_1a41be9171214f0243162899da628c1a6d" kindref="member">sin2</ref><sp/>=<sp/>self.op.sin2</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1Add2Vectors_1ae865de9c7a4c7d2e03b8c685326e0b1f" kindref="member">sout</ref><sp/>=<sp/>self.op.sout</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(vector_sin1,<sp/>self.op.sin1)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(vector_sin2,<sp/>self.op.sin2)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">add_vec_vec(vec1,<sp/>vec2,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>adds<sp/>two<sp/>Vectors</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>Constant<sp/>vectors<sp/>(not<sp/>numpy<sp/>arrays)</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>add<sp/>=<sp/>Add_of_vector(entityName)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec1,<sp/>add.signal(</highlight><highlight class="stringliteral">&apos;sin1&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec2,<sp/>add.signal(</highlight><highlight class="stringliteral">&apos;sin2&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add.sout</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">subtract_vec_vec(pos1,<sp/>pos2,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>subtracts<sp/>two<sp/>Vectors</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>Constant<sp/>vectors<sp/>(not<sp/>numpy<sp/>arrays)</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_op<sp/>=<sp/>Substract_of_vector(entityName)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(pos1,<sp/>sub_op.signal(</highlight><highlight class="stringliteral">&apos;sin1&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(pos2,<sp/>sub_op.signal(</highlight><highlight class="stringliteral">&apos;sin2&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sub_op.sout</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">transpose_mat(mat,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>transposes<sp/>a<sp/>matrix</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>Constant<sp/>matrix<sp/>(not<sp/>numpy<sp/>arrays)</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>op<sp/>=<sp/>MatrixTranspose(entityName)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(mat,<sp/>op.sin)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op.sout</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">multiply_mat_vec(mat,<sp/>vec,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>multiplies<sp/>a<sp/>matrix<sp/>and<sp/>vector</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>Constant<sp/>matrix<sp/>(not<sp/>numpy<sp/>arrays)</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Constant<sp/>vector<sp/>(not<sp/>numpy<sp/>array)</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>mat_mul<sp/>=<sp/>Multiply_matrix_vector(entityName)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(mat,<sp/>mat_mul.signal(</highlight><highlight class="stringliteral">&apos;sin1&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec,<sp/>mat_mul.signal(</highlight><highlight class="stringliteral">&apos;sin2&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat_mul.sout</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1MultiplyDoubleVector" kindref="compound">MultiplyDoubleVector</ref>(object):</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Simpler<sp/>interface<sp/>to<sp/>multiply<sp/>a<sp/>double<sp/>and<sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="294" refid="classpython_1_1dg__tools_1_1math__small__entities_1_1MultiplyDoubleVector" refkind="compound"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>double_sin,<sp/>vector_sin,<sp/>entity_name=&apos;&apos;):</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1MultiplyDoubleVector_1a457e6937d9762373d4e1442ef0f8063a" kindref="member">op</ref><sp/>=<sp/>Multiply_double_vector(entity_name)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1MultiplyDoubleVector_1ab9af832a8c134bf03fca80168dbe757b" kindref="member">sin1</ref><sp/>=<sp/>self.op.sin1</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1MultiplyDoubleVector_1aed7cf50295ab6be0381522a8bbd7a637" kindref="member">sin2</ref><sp/>=<sp/>self.op.sin2</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classpython_1_1dg__tools_1_1math__small__entities_1_1MultiplyDoubleVector_1ac06f0ebb1bbda12565e5d33bb634cee2" kindref="member">sout</ref><sp/>=<sp/>self.op.sout</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(double_sin,<sp/>self.op.sin1)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug(vector_sin,<sp/>self.op.sin2)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">mul_double_vec(doub,<sp/>vec,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>multiplies<sp/>a<sp/>double<sp/>and<sp/>vector</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>Constant<sp/>double</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Constant<sp/>vector<sp/>(not<sp/>numpy<sp/>array)</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>mul<sp/>=<sp/>Multiply_double_vector(entityName)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>mul.sin1.value<sp/>=<sp/>doub</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(vec,<sp/>mul.signal(</highlight><highlight class="stringliteral">&apos;sin2&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mul.sout</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">#########################<sp/>Robotics<sp/>operators<sp/>##################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">hom2pos(robot_joint_signal,<sp/>entityName=&apos;&apos;):</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>This<sp/>function<sp/>transforms<sp/>a<sp/>homogenous<sp/>matrix<sp/>to<sp/>xyz<sp/>cordinate</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>##<sp/>Input<sp/>:<sp/>robot<sp/>(DynamicPinocchio<sp/>model)<sp/>joint<sp/>signal</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_pos<sp/>=<sp/>MatrixHomoToPose(entityName)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>plug(robot_joint_signal,<sp/>conv_pos.signal(</highlight><highlight class="stringliteral">&apos;sin&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conv_pos.signal(</highlight><highlight class="stringliteral">&apos;sout&apos;</highlight><highlight class="normal">)</highlight></codeline>
    </programlisting>
    <location file="python/dg_tools/math_small_entities.py"/>
  </compounddef>
</doxygen>
